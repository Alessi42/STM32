
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a148  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a2d0  0800a2d0  0001a2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a31c  0800a31c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a324  0800a324  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  20000090  0800a3bc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  0800a3bc  00020b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f15  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046ae  00000000  00000000  00047fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f88  00000000  00000000  0004c688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d98  00000000  00000000  0004e610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d98a  00000000  00000000  000503a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a9f6  00000000  00000000  0007dd32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114baf  00000000  00000000  00098728  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ad2d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088f0  00000000  00000000  001ad354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a2b8 	.word	0x0800a2b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a2b8 	.word	0x0800a2b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <TIM4_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TIM4_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80004cc:	2104      	movs	r1, #4
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <TIM4_IRQHandler+0x1c>)
 80004d0:	f002 fdc8 	bl	8003064 <HAL_GPIO_TogglePin>
	__HAL_TIM_CLEAR_FLAG(&Timer4Handle, TIM_FLAG_UPDATE);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <TIM4_IRQHandler+0x20>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f06f 0201 	mvn.w	r2, #1
 80004dc:	611a      	str	r2, [r3, #16]
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	48000400 	.word	0x48000400
 80004e8:	200002e8 	.word	0x200002e8

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f001 f895 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f81d 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 fb7b 	bl	8000bf4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004fe:	f000 f94d 	bl	800079c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000502:	f000 f98b 	bl	800081c <MX_I2C2_Init>
  MX_LCD_Init();
 8000506:	f000 f9c9 	bl	800089c <MX_LCD_Init>
  MX_QUADSPI_Init();
 800050a:	f000 f9ff 	bl	800090c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800050e:	f000 fa23 	bl	8000958 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000512:	f000 fac9 	bl	8000aa8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000516:	f000 fb3d 	bl	8000b94 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 800051a:	f009 fb19 	bl	8009b50 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 800051e:	f000 f8b7 	bl	8000690 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000522:	f000 faff 	bl	8000b24 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i =0;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();
    //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
    //HAL_Delay(100);
	  i++;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	e7fb      	b.n	800052a <main+0x3e>
	...

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0b8      	sub	sp, #224	; 0xe0
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f009 fdf6 	bl	800a134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2288      	movs	r2, #136	; 0x88
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f009 fde8 	bl	800a134 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f004 fba2 	bl	8004cac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b46      	ldr	r3, [pc, #280]	; (8000684 <SystemClock_Config+0x150>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a45      	ldr	r2, [pc, #276]	; (8000684 <SystemClock_Config+0x150>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000578:	231c      	movs	r3, #28
 800057a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000596:	2360      	movs	r3, #96	; 0x60
 8000598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005ae:	2314      	movs	r3, #20
 80005b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fcba 	bl	8004f44 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005d6:	f000 fc49 	bl	8000e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2303      	movs	r3, #3
 80005e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005fc:	2101      	movs	r1, #1
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 f850 	bl	80056a4 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800060a:	f000 fc2f 	bl	8000e6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <SystemClock_Config+0x154>)
 8000610:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000612:	2300      	movs	r3, #0
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000616:	2300      	movs	r3, #0
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800061a:	2300      	movs	r3, #0
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800061e:	2300      	movs	r3, #0
 8000620:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000626:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800062c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000630:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000634:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000636:	2301      	movs	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800063e:	2318      	movs	r3, #24
 8000640:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000642:	2307      	movs	r3, #7
 8000644:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <SystemClock_Config+0x158>)
 8000650:	61fb      	str	r3, [r7, #28]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	4618      	mov	r0, r3
 8000656:	f005 fa29 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8000660:	f000 fc04 	bl	8000e6c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000668:	f004 fb3e 	bl	8004ce8 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x142>
  {
    Error_Handler();
 8000672:	f000 fbfb 	bl	8000e6c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000676:	f006 f977 	bl	8006968 <HAL_RCCEx_EnableMSIPLLMode>
}
 800067a:	bf00      	nop
 800067c:	37e0      	adds	r7, #224	; 0xe0
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	000268c2 	.word	0x000268c2
 800068c:	01110000 	.word	0x01110000

08000690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  __ADC_CLK_ENABLE();
 8000696:	4b3d      	ldr	r3, [pc, #244]	; (800078c <MX_ADC1_Init+0xfc>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a3c      	ldr	r2, [pc, #240]	; (800078c <MX_ADC1_Init+0xfc>)
 800069c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b3a      	ldr	r3, [pc, #232]	; (800078c <MX_ADC1_Init+0xfc>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <MX_ADC1_Init+0x100>)
 80006cc:	4a31      	ldr	r2, [pc, #196]	; (8000794 <MX_ADC1_Init+0x104>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <MX_ADC1_Init+0x100>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_ADC1_Init+0x100>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <MX_ADC1_Init+0x100>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_ADC1_Init+0x100>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <MX_ADC1_Init+0x100>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_ADC1_Init+0x100>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_ADC1_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_ADC1_Init+0x100>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_ADC1_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_CC4;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_ADC1_Init+0x100>)
 800070a:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_ADC1_Init+0x100>)
 8000712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_ADC1_Init+0x100>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_ADC1_Init+0x100>)
 8000722:	2200      	movs	r2, #0
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_ADC1_Init+0x100>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	4818      	ldr	r0, [pc, #96]	; (8000790 <MX_ADC1_Init+0x100>)
 8000730:	f001 f9d2 	bl	8001ad8 <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800073a:	f000 fb97 	bl	8000e6c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4811      	ldr	r0, [pc, #68]	; (8000790 <MX_ADC1_Init+0x100>)
 800074a:	f002 f90d 	bl	8002968 <HAL_ADCEx_MultiModeConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000754:	f000 fb8a 	bl	8000e6c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ADC1_Init+0x108>)
 800075a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075c:	2306      	movs	r3, #6
 800075e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000764:	237f      	movs	r3, #127	; 0x7f
 8000766:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000768:	2304      	movs	r3, #4
 800076a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <MX_ADC1_Init+0x100>)
 8000776:	f001 fd3b 	bl	80021f0 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000780:	f000 fb74 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	20000284 	.word	0x20000284
 8000794:	50040000 	.word	0x50040000
 8000798:	14f00020 	.word	0x14f00020

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C1_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C1_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d8:	f004 f860 	bl	800489c <HAL_I2C_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f000 fb43 	bl	8000e6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ea:	f004 f8e6 	bl	80049ba <HAL_I2CEx_ConfigAnalogFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 fb3a 	bl	8000e6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_I2C1_Init+0x74>)
 80007fc:	f004 f928 	bl	8004a50 <HAL_I2CEx_ConfigDigitalFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 fb31 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000168 	.word	0x20000168
 8000814:	40005400 	.word	0x40005400
 8000818:	00404c74 	.word	0x00404c74

0800081c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C2_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_I2C2_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_I2C2_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <MX_I2C2_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_I2C2_Init+0x74>)
 8000834:	2201      	movs	r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_I2C2_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_I2C2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <MX_I2C2_Init+0x74>)
 8000858:	f004 f820 	bl	800489c <HAL_I2C_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 fb03 	bl	8000e6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_I2C2_Init+0x74>)
 800086a:	f004 f8a6 	bl	80049ba <HAL_I2CEx_ConfigAnalogFilter>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 fafa 	bl	8000e6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_I2C2_Init+0x74>)
 800087c:	f004 f8e8 	bl	8004a50 <HAL_I2CEx_ConfigDigitalFilter>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 faf1 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200001b4 	.word	0x200001b4
 8000894:	40005800 	.word	0x40005800
 8000898:	00404c74 	.word	0x00404c74

0800089c <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_LCD_Init+0x68>)
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <MX_LCD_Init+0x6c>)
 80008a4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_LCD_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_LCD_Init+0x68>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_LCD_Init+0x68>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_LCD_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_LCD_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_LCD_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_LCD_Init+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_LCD_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_LCD_Init+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_LCD_Init+0x68>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_LCD_Init+0x68>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_LCD_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_LCD_Init+0x68>)
 80008f0:	f004 f8fa 	bl	8004ae8 <HAL_LCD_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80008fa:	f000 fab7 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000328 	.word	0x20000328
 8000908:	40002400 	.word	0x40002400

0800090c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_QUADSPI_Init+0x44>)
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <MX_QUADSPI_Init+0x48>)
 8000914:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_QUADSPI_Init+0x44>)
 8000918:	22ff      	movs	r2, #255	; 0xff
 800091a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_QUADSPI_Init+0x44>)
 800091e:	2201      	movs	r2, #1
 8000920:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_QUADSPI_Init+0x44>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_QUADSPI_Init+0x44>)
 800092a:	2201      	movs	r2, #1
 800092c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_QUADSPI_Init+0x44>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_QUADSPI_Init+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_QUADSPI_Init+0x44>)
 800093c:	f004 fa3a 	bl	8004db4 <HAL_QSPI_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000946:	f000 fa91 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000468 	.word	0x20000468
 8000954:	a0001000 	.word	0xa0001000

08000958 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800095c:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <MX_SAI1_Init+0x13c>)
 800095e:	4a4e      	ldr	r2, [pc, #312]	; (8000a98 <MX_SAI1_Init+0x140>)
 8000960:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <MX_SAI1_Init+0x13c>)
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <MX_SAI1_Init+0x13c>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800096e:	4b49      	ldr	r3, [pc, #292]	; (8000a94 <MX_SAI1_Init+0x13c>)
 8000970:	2240      	movs	r2, #64	; 0x40
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000974:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <MX_SAI1_Init+0x13c>)
 8000976:	2200      	movs	r2, #0
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800097a:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <MX_SAI1_Init+0x13c>)
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000980:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <MX_SAI1_Init+0x13c>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000986:	4b43      	ldr	r3, [pc, #268]	; (8000a94 <MX_SAI1_Init+0x13c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800098c:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <MX_SAI1_Init+0x13c>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000992:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <MX_SAI1_Init+0x13c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000998:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <MX_SAI1_Init+0x13c>)
 800099a:	4a40      	ldr	r2, [pc, #256]	; (8000a9c <MX_SAI1_Init+0x144>)
 800099c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800099e:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009b0:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009b8:	2208      	movs	r2, #8
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80009bc:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009be:	2201      	movs	r2, #1
 80009c0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80009c8:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80009ec:	4829      	ldr	r0, [pc, #164]	; (8000a94 <MX_SAI1_Init+0x13c>)
 80009ee:	f006 fa6d 	bl	8006ecc <HAL_SAI_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80009f8:	f000 fa38 	bl	8000e6c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_SAI1_Init+0x148>)
 80009fe:	4a29      	ldr	r2, [pc, #164]	; (8000aa4 <MX_SAI1_Init+0x14c>)
 8000a00:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_SAI1_Init+0x148>)
 8000a82:	f006 fa23 	bl	8006ecc <HAL_SAI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000a8c:	f000 f9ee 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000364 	.word	0x20000364
 8000a98:	40015404 	.word	0x40015404
 8000a9c:	0002ee00 	.word	0x0002ee00
 8000aa0:	20000200 	.word	0x20000200
 8000aa4:	40015424 	.word	0x40015424

08000aa8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <MX_SPI2_Init+0x78>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000ac2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ac6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ada:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000af6:	2207      	movs	r2, #7
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_SPI2_Init+0x74>)
 8000b08:	f006 fb7a 	bl	8007200 <HAL_SPI_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b12:	f000 f9ab 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000c4 	.word	0x200000c4
 8000b20:	40003800 	.word	0x40003800

08000b24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
	Timer4Handle.Instance = TIM4;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_TIM4_Init+0x64>)
 8000b2c:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <MX_TIM4_Init+0x68>)
 8000b2e:	601a      	str	r2, [r3, #0]
	Timer4Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM4_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
	Timer4Handle.Init.ClockDivision = 0;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_TIM4_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
	Timer4Handle.Init.Prescaler = 1000;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_TIM4_Init+0x64>)
 8000b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b42:	605a      	str	r2, [r3, #4]
	Timer4Handle.Init.Period = 800;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_TIM4_Init+0x64>)
 8000b46:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b4a:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_TIM4_Init+0x6c>)
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <MX_TIM4_Init+0x6c>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6593      	str	r3, [r2, #88]	; 0x58
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_TIM4_Init+0x6c>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
	HAL_TIM_Base_Init(&Timer4Handle);
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <MX_TIM4_Init+0x64>)
 8000b66:	f006 fbd5 	bl	8007314 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&Timer4Handle);
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM4_Init+0x64>)
 8000b6c:	f006 fbfe 	bl	800736c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0); // middle priority
 8000b70:	2200      	movs	r2, #0
 8000b72:	2107      	movs	r1, #7
 8000b74:	201e      	movs	r0, #30
 8000b76:	f002 f87e 	bl	8002c76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b7a:	201e      	movs	r0, #30
 8000b7c:	f002 f897 	bl	8002cae <HAL_NVIC_EnableIRQ>

}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200002e8 	.word	0x200002e8
 8000b8c:	40000800 	.word	0x40000800
 8000b90:	40021000 	.word	0x40021000

08000b94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MX_USART2_UART_Init+0x5c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bd8:	f006 fc8c 	bl	80074f4 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000be2:	f000 f943 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200003e8 	.word	0x200003e8
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	4b92      	ldr	r3, [pc, #584]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a91      	ldr	r2, [pc, #580]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b8f      	ldr	r3, [pc, #572]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b8c      	ldr	r3, [pc, #560]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a8b      	ldr	r2, [pc, #556]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b89      	ldr	r3, [pc, #548]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	4b86      	ldr	r3, [pc, #536]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a85      	ldr	r2, [pc, #532]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b83      	ldr	r3, [pc, #524]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b80      	ldr	r3, [pc, #512]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a7f      	ldr	r2, [pc, #508]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b7d      	ldr	r3, [pc, #500]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b7a      	ldr	r3, [pc, #488]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a79      	ldr	r2, [pc, #484]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b77      	ldr	r3, [pc, #476]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	4b74      	ldr	r3, [pc, #464]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a73      	ldr	r2, [pc, #460]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b71      	ldr	r3, [pc, #452]	; (8000e54 <MX_GPIO_Init+0x260>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f240 1109 	movw	r1, #265	; 0x109
 8000ca0:	486d      	ldr	r0, [pc, #436]	; (8000e58 <MX_GPIO_Init+0x264>)
 8000ca2:	f002 f9c7 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210d      	movs	r1, #13
 8000caa:	486c      	ldr	r0, [pc, #432]	; (8000e5c <MX_GPIO_Init+0x268>)
 8000cac:	f002 f9c2 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb6:	486a      	ldr	r0, [pc, #424]	; (8000e60 <MX_GPIO_Init+0x26c>)
 8000cb8:	f002 f9bc 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc2:	4867      	ldr	r0, [pc, #412]	; (8000e60 <MX_GPIO_Init+0x26c>)
 8000cc4:	f002 f9b6 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4865      	ldr	r0, [pc, #404]	; (8000e64 <MX_GPIO_Init+0x270>)
 8000cce:	f002 f9b1 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	485b      	ldr	r0, [pc, #364]	; (8000e58 <MX_GPIO_Init+0x264>)
 8000cea:	f001 fffb 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000cee:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf4:	4b5c      	ldr	r3, [pc, #368]	; (8000e68 <MX_GPIO_Init+0x274>)
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4857      	ldr	r0, [pc, #348]	; (8000e60 <MX_GPIO_Init+0x26c>)
 8000d04:	f001 ffee 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4851      	ldr	r0, [pc, #324]	; (8000e60 <MX_GPIO_Init+0x26c>)
 8000d1c:	f001 ffe2 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin|JOY_DOWN_Pin;
 8000d20:	232e      	movs	r3, #46	; 0x2e
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f001 ffd5 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d3e:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <MX_GPIO_Init+0x274>)
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f001 ffc8 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|M3V3_REG_ON_Pin;
 8000d54:	2309      	movs	r3, #9
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	483c      	ldr	r0, [pc, #240]	; (8000e5c <MX_GPIO_Init+0x268>)
 8000d6c:	f001 ffba 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000d70:	2304      	movs	r3, #4
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4835      	ldr	r0, [pc, #212]	; (8000e5c <MX_GPIO_Init+0x268>)
 8000d88:	f001 ffac 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	482c      	ldr	r0, [pc, #176]	; (8000e58 <MX_GPIO_Init+0x264>)
 8000da6:	f001 ff9d 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000daa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4827      	ldr	r0, [pc, #156]	; (8000e60 <MX_GPIO_Init+0x26c>)
 8000dc4:	f001 ff8e 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000dc8:	2305      	movs	r3, #5
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_GPIO_Init+0x274>)
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4822      	ldr	r0, [pc, #136]	; (8000e64 <MX_GPIO_Init+0x270>)
 8000ddc:	f001 ff82 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	481b      	ldr	r0, [pc, #108]	; (8000e64 <MX_GPIO_Init+0x270>)
 8000df8:	f001 ff74 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_GPIO_Init+0x274>)
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4812      	ldr	r0, [pc, #72]	; (8000e5c <MX_GPIO_Init+0x268>)
 8000e12:	f001 ff67 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <MX_GPIO_Init+0x264>)
 8000e2e:	f001 ff59 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_GPIO_Init+0x274>)
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0x264>)
 8000e46:	f001 ff4d 	bl	8002ce4 <HAL_GPIO_Init>

}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	; 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48001000 	.word	0x48001000
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	48000800 	.word	0x48000800
 8000e64:	48000c00 	.word	0x48000c00
 8000e68:	10120000 	.word	0x10120000

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_ADC_MspInit+0xb4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d144      	bne.n	8000f70 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_ADC_MspInit+0xb8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f32:	230b      	movs	r3, #11
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f001 fece 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f4c:	230b      	movs	r3, #11
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <HAL_ADC_MspInit+0xbc>)
 8000f5c:	f001 fec2 	bl	8002ce4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2012      	movs	r0, #18
 8000f66:	f001 fe86 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f6a:	2012      	movs	r0, #18
 8000f6c:	f001 fe9f 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	50040000 	.word	0x50040000
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	48000400 	.word	0x48000400

08000f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2e      	ldr	r2, [pc, #184]	; (800105c <HAL_I2C_MspInit+0xd8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d128      	bne.n	8000ff8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a2d      	ldr	r2, [pc, #180]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000fbe:	23c0      	movs	r3, #192	; 0xc0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4822      	ldr	r0, [pc, #136]	; (8001064 <HAL_I2C_MspInit+0xe0>)
 8000fda:	f001 fe83 	bl	8002ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8000fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ff6:	e02d      	b.n	8001054 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_I2C_MspInit+0xe4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d128      	bne.n	8001054 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800101a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800102c:	2304      	movs	r3, #4
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <HAL_I2C_MspInit+0xe0>)
 8001038:	f001 fe54 	bl	8002ce4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 8001042:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001046:	6593      	str	r3, [r2, #88]	; 0x58
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_I2C_MspInit+0xdc>)
 800104a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	; 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40005400 	.word	0x40005400
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	40005800 	.word	0x40005800

0800106c <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a44      	ldr	r2, [pc, #272]	; (800119c <HAL_LCD_MspInit+0x130>)
 800108a:	4293      	cmp	r3, r2
 800108c:	f040 8081 	bne.w	8001192 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8001090:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 8001096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109a:	6593      	str	r3, [r2, #88]	; 0x58
 800109c:	4b40      	ldr	r3, [pc, #256]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	4a3c      	ldr	r2, [pc, #240]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b4:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010cc:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	4a30      	ldr	r2, [pc, #192]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_LCD_MspInit+0x134>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8001108:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800110c:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800111a:	230b      	movs	r3, #11
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	481f      	ldr	r0, [pc, #124]	; (80011a4 <HAL_LCD_MspInit+0x138>)
 8001126:	f001 fddd 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800112a:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800112e:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800113c:	230b      	movs	r3, #11
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f001 fdcb 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG20_Pin|SEG3_Pin|SEG19_Pin|SEG4_Pin 
 800114e:	f24f 2330 	movw	r3, #62000	; 0xf230
 8001152:	61fb      	str	r3, [r7, #28]
                          |SEG11_Pin|SEG12_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001160:	230b      	movs	r3, #11
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <HAL_LCD_MspInit+0x13c>)
 800116c:	f001 fdba 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8001170:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001174:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001182:	230b      	movs	r3, #11
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <HAL_LCD_MspInit+0x140>)
 800118e:	f001 fda9 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3730      	adds	r7, #48	; 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40002400 	.word	0x40002400
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48000c00 	.word	0x48000c00

080011b0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_QSPI_MspInit+0x7c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d128      	bne.n	8001224 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_QSPI_MspInit+0x80>)
 80011d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011d6:	4a16      	ldr	r2, [pc, #88]	; (8001230 <HAL_QSPI_MspInit+0x80>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6513      	str	r3, [r2, #80]	; 0x50
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_QSPI_MspInit+0x80>)
 80011e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_QSPI_MspInit+0x80>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_QSPI_MspInit+0x80>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_QSPI_MspInit+0x80>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8001202:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001206:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001214:	230a      	movs	r3, #10
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_QSPI_MspInit+0x84>)
 8001220:	f001 fd60 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	a0001000 	.word	0xa0001000
 8001230:	40021000 	.word	0x40021000
 8001234:	48001000 	.word	0x48001000

08001238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_SPI_MspInit+0x7c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d127      	bne.n	80012aa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_SPI_MspInit+0x80>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <HAL_SPI_MspInit+0x80>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6593      	str	r3, [r2, #88]	; 0x58
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_SPI_MspInit+0x80>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_SPI_MspInit+0x80>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <HAL_SPI_MspInit+0x80>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_SPI_MspInit+0x80>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800128a:	231a      	movs	r3, #26
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800129a:	2305      	movs	r3, #5
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_SPI_MspInit+0x84>)
 80012a6:	f001 fd1d 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40003800 	.word	0x40003800
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000c00 	.word	0x48000c00

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d113      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6593      	str	r3, [r2, #88]	; 0x58
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201e      	movs	r0, #30
 80012f0:	f001 fcc1 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012f4:	201e      	movs	r0, #30
 80012f6:	f001 fcda 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40000800 	.word	0x40000800
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_UART_MspInit+0x7c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d127      	bne.n	800137e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_UART_MspInit+0x80>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <HAL_UART_MspInit+0x80>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6593      	str	r3, [r2, #88]	; 0x58
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_UART_MspInit+0x80>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_UART_MspInit+0x80>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_UART_MspInit+0x80>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_UART_MspInit+0x80>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800135e:	2360      	movs	r3, #96	; 0x60
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001366:	2301      	movs	r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136e:	2307      	movs	r3, #7
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_UART_MspInit+0x84>)
 800137a:	f001 fcb3 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	; 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40004400 	.word	0x40004400
 800138c:	40021000 	.word	0x40021000
 8001390:	48000c00 	.word	0x48000c00

08001394 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_SAI_MspInit+0xdc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d135      	bne.n	8001412 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <HAL_SAI_MspInit+0xe0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10b      	bne.n	80013c6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_SAI_MspInit+0xe4>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	4a31      	ldr	r2, [pc, #196]	; (8001478 <HAL_SAI_MspInit+0xe4>)
 80013b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_SAI_MspInit+0xe4>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_SAI_MspInit+0xe0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a29      	ldr	r2, [pc, #164]	; (8001474 <HAL_SAI_MspInit+0xe0>)
 80013ce:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80013d0:	2374      	movs	r3, #116	; 0x74
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013e0:	230d      	movs	r3, #13
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4824      	ldr	r0, [pc, #144]	; (800147c <HAL_SAI_MspInit+0xe8>)
 80013ec:	f001 fc7a 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80013f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001402:	230d      	movs	r3, #13
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	481b      	ldr	r0, [pc, #108]	; (800147c <HAL_SAI_MspInit+0xe8>)
 800140e:	f001 fc69 	bl	8002ce4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <HAL_SAI_MspInit+0xec>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d124      	bne.n	8001466 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_SAI_MspInit+0xe0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10b      	bne.n	800143c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_SAI_MspInit+0xe4>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	4a13      	ldr	r2, [pc, #76]	; (8001478 <HAL_SAI_MspInit+0xe4>)
 800142a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142e:	6613      	str	r3, [r2, #96]	; 0x60
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_SAI_MspInit+0xe4>)
 8001432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_SAI_MspInit+0xe0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <HAL_SAI_MspInit+0xe0>)
 8001444:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001456:	230d      	movs	r3, #13
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4806      	ldr	r0, [pc, #24]	; (800147c <HAL_SAI_MspInit+0xe8>)
 8001462:	f001 fc3f 	bl	8002ce4 <HAL_GPIO_Init>

    }
}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40015404 	.word	0x40015404
 8001474:	200000ac 	.word	0x200000ac
 8001478:	40021000 	.word	0x40021000
 800147c:	48001000 	.word	0x48001000
 8001480:	40015424 	.word	0x40015424

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f8fc 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <ADC1_2_IRQHandler+0x10>)
 80014e6:	f000 fc4b 	bl	8001d80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000284 	.word	0x20000284

080014f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <OTG_FS_IRQHandler+0x10>)
 80014fa:	f002 f84d 	bl	8003598 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000087c 	.word	0x2000087c

08001508 <_sbrk>:
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x50>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x16>
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <_sbrk+0x50>)
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <_sbrk+0x54>)
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <_sbrk+0x50>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <_sbrk+0x50>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	466a      	mov	r2, sp
 800152e:	4293      	cmp	r3, r2
 8001530:	d907      	bls.n	8001542 <_sbrk+0x3a>
 8001532:	f008 fdc5 	bl	800a0c0 <__errno>
 8001536:	4602      	mov	r2, r0
 8001538:	230c      	movs	r3, #12
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	e006      	b.n	8001550 <_sbrk+0x48>
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <_sbrk+0x50>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a03      	ldr	r2, [pc, #12]	; (8001558 <_sbrk+0x50>)
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200000b0 	.word	0x200000b0
 800155c:	20000b48 	.word	0x20000b48

08001560 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <SystemInit+0x64>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <SystemInit+0x64>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <SystemInit+0x68>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <SystemInit+0x68>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <SystemInit+0x68>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <SystemInit+0x68>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <SystemInit+0x68>)
 800158c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001590:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001594:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <SystemInit+0x68>)
 8001598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800159c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <SystemInit+0x68>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <SystemInit+0x68>)
 80015a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <SystemInit+0x68>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SystemInit+0x64>)
 80015b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b6:	609a      	str	r2, [r3, #8]
#endif
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	40021000 	.word	0x40021000

080015cc <Reset_Handler>:
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopForever+0x2>
 80015d0:	2100      	movs	r1, #0
 80015d2:	e003      	b.n	80015dc <LoopCopyDataInit>

080015d4 <CopyDataInit>:
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <LoopForever+0x6>)
 80015d6:	585b      	ldr	r3, [r3, r1]
 80015d8:	5043      	str	r3, [r0, r1]
 80015da:	3104      	adds	r1, #4

080015dc <LoopCopyDataInit>:
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <LoopForever+0xa>)
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <LoopForever+0xe>)
 80015e0:	1842      	adds	r2, r0, r1
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d3f6      	bcc.n	80015d4 <CopyDataInit>
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopForever+0x12>)
 80015e8:	e002      	b.n	80015f0 <LoopFillZerobss>

080015ea <FillZerobss>:
 80015ea:	2300      	movs	r3, #0
 80015ec:	f842 3b04 	str.w	r3, [r2], #4

080015f0 <LoopFillZerobss>:
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <LoopForever+0x16>)
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3f9      	bcc.n	80015ea <FillZerobss>
 80015f6:	f7ff ffb3 	bl	8001560 <SystemInit>
 80015fa:	f008 fd67 	bl	800a0cc <__libc_init_array>
 80015fe:	f7fe ff75 	bl	80004ec <main>

08001602 <LoopForever>:
 8001602:	e7fe      	b.n	8001602 <LoopForever>
 8001604:	20018000 	.word	0x20018000
 8001608:	0800a32c 	.word	0x0800a32c
 800160c:	20000000 	.word	0x20000000
 8001610:	20000090 	.word	0x20000090
 8001614:	20000090 	.word	0x20000090
 8001618:	20000b44 	.word	0x20000b44

0800161c <ADC3_IRQHandler>:
 800161c:	e7fe      	b.n	800161c <ADC3_IRQHandler>
	...

08001620 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_Init+0x3c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_Init+0x3c>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f001 fb12 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163c:	2000      	movs	r0, #0
 800163e:	f000 f80f 	bl	8001660 <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	e001      	b.n	8001652 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164e:	f7ff fc15 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001652:	79fb      	ldrb	r3, [r7, #7]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_InitTick+0x68>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d022      	beq.n	80016ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_InitTick+0x6c>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_InitTick+0x68>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001680:	fbb1 f3f3 	udiv	r3, r1, r3
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f001 fb1e 	bl	8002cca <HAL_SYSTICK_Config>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10f      	bne.n	80016b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d809      	bhi.n	80016ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169a:	2200      	movs	r2, #0
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	f04f 30ff 	mov.w	r0, #4294967295
 80016a2:	f001 fae8 	bl	8002c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_InitTick+0x70>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e007      	b.n	80016be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e004      	b.n	80016be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e001      	b.n	80016be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000004 	.word	0x20000004

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x1c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x20>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_IncTick+0x1c>)
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	200004ac 	.word	0x200004ac
 80016f4:	20000008 	.word	0x20000008

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200004ac 	.word	0x200004ac

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d004      	beq.n	8001734 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_Delay+0x40>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001734:	bf00      	nop
 8001736:	f7ff ffdf 	bl	80016f8 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	429a      	cmp	r2, r3
 8001744:	d8f7      	bhi.n	8001736 <HAL_Delay+0x26>
  {
  }
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	609a      	str	r2, [r3, #8]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017bc:	b490      	push	{r4, r7}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3360      	adds	r3, #96	; 0x60
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80017d8:	6822      	ldr	r2, [r4, #0]
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <LL_ADC_SetOffset+0x40>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	4313      	orrs	r3, r2
 80017ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017ee:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc90      	pop	{r4, r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	03fff000 	.word	0x03fff000

08001800 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001800:	b490      	push	{r4, r7}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3360      	adds	r3, #96	; 0x60
 800180e:	461a      	mov	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bc90      	pop	{r4, r7}
 8001826:	4770      	bx	lr

08001828 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001828:	b490      	push	{r4, r7}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3360      	adds	r3, #96	; 0x60
 8001838:	461a      	mov	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4313      	orrs	r3, r2
 800184c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bc90      	pop	{r4, r7}
 8001856:	4770      	bx	lr

08001858 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800187e:	b490      	push	{r4, r7}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3330      	adds	r3, #48	; 0x30
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	4413      	add	r3, r2
 800189c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800189e:	6822      	ldr	r2, [r4, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	211f      	movs	r1, #31
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	401a      	ands	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	0e9b      	lsrs	r3, r3, #26
 80018b4:	f003 011f 	and.w	r1, r3, #31
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc90      	pop	{r4, r7}
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018f6:	b490      	push	{r4, r7}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3314      	adds	r3, #20
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	0e5b      	lsrs	r3, r3, #25
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	4413      	add	r3, r2
 8001914:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	0d1b      	lsrs	r3, r3, #20
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2107      	movs	r1, #7
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	0d1b      	lsrs	r3, r3, #20
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bc90      	pop	{r4, r7}
 8001944:	4770      	bx	lr
	...

08001948 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0318 	and.w	r3, r3, #24
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <LL_ADC_SetChannelSingleDiff+0x44>)
 800196c:	40d9      	lsrs	r1, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	400b      	ands	r3, r1
 8001972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001976:	431a      	orrs	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	0007ffff 	.word	0x0007ffff

08001990 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 031f 	and.w	r3, r3, #31
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6093      	str	r3, [r2, #8]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a00:	d101      	bne.n	8001a06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <LL_ADC_IsEnabled+0x18>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <LL_ADC_IsEnabled+0x1a>
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d101      	bne.n	8001aa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d101      	bne.n	8001ac8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e134      	b.n	8001d5c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff f9df 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff67 	bl	80019ec <LL_ADC_IsDeepPowerDownEnabled>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff4d 	bl	80019c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff82 	bl	8001a3c <LL_ADC_IsInternalRegulatorEnabled>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d113      	bne.n	8001b66 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff66 	bl	8001a14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b48:	4b86      	ldr	r3, [pc, #536]	; (8001d64 <HAL_ADC_Init+0x28c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	4a86      	ldr	r2, [pc, #536]	; (8001d68 <HAL_ADC_Init+0x290>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b58:	e002      	b.n	8001b60 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff66 	bl	8001a3c <LL_ADC_IsInternalRegulatorEnabled>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff77 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 8001b9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80cf 	bne.w	8001d4a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80cb 	bne.w	8001d4a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bbc:	f043 0202 	orr.w	r2, r3, #2
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff4b 	bl	8001a64 <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d115      	bne.n	8001c00 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd4:	4865      	ldr	r0, [pc, #404]	; (8001d6c <HAL_ADC_Init+0x294>)
 8001bd6:	f7ff ff45 	bl	8001a64 <LL_ADC_IsEnabled>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4864      	ldr	r0, [pc, #400]	; (8001d70 <HAL_ADC_Init+0x298>)
 8001bde:	f7ff ff41 	bl	8001a64 <LL_ADC_IsEnabled>
 8001be2:	4603      	mov	r3, r0
 8001be4:	431c      	orrs	r4, r3
 8001be6:	4863      	ldr	r0, [pc, #396]	; (8001d74 <HAL_ADC_Init+0x29c>)
 8001be8:	f7ff ff3c 	bl	8001a64 <LL_ADC_IsEnabled>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4323      	orrs	r3, r4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	485f      	ldr	r0, [pc, #380]	; (8001d78 <HAL_ADC_Init+0x2a0>)
 8001bfc:	f7ff fdaa 	bl	8001754 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7e5b      	ldrb	r3, [r3, #25]
 8001c04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d106      	bne.n	8001c3c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	045b      	lsls	r3, r3, #17
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_ADC_Init+0x2a4>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff0a 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 8001c76:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff17 	bl	8001ab0 <LL_ADC_INJ_IsConversionOngoing>
 8001c82:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d13d      	bne.n	8001d06 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d13a      	bne.n	8001d06 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c94:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cac:	f023 0302 	bic.w	r3, r3, #2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	69b9      	ldr	r1, [r7, #24]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d118      	bne.n	8001cf6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cce:	f023 0304 	bic.w	r3, r3, #4
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	e007      	b.n	8001d06 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10c      	bne.n	8001d28 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	f023 010f 	bic.w	r1, r3, #15
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
 8001d26:	e007      	b.n	8001d38 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 020f 	bic.w	r2, r2, #15
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f023 0303 	bic.w	r3, r3, #3
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
 8001d48:	e007      	b.n	8001d5a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4e:	f043 0210 	orr.w	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3724      	adds	r7, #36	; 0x24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	20000000 	.word	0x20000000
 8001d68:	053e2d63 	.word	0x053e2d63
 8001d6c:	50040000 	.word	0x50040000
 8001d70:	50040100 	.word	0x50040100
 8001d74:	50040200 	.word	0x50040200
 8001d78:	50040300 	.word	0x50040300
 8001d7c:	fff0c007 	.word	0xfff0c007

08001d80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d9c:	4882      	ldr	r0, [pc, #520]	; (8001fa8 <HAL_ADC_IRQHandler+0x228>)
 8001d9e:	f7ff fdf7 	bl	8001990 <LL_ADC_GetMultimode>
 8001da2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d017      	beq.n	8001dde <HAL_ADC_IRQHandler+0x5e>
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d012      	beq.n	8001dde <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fdbf 	bl	8002954 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_ADC_IRQHandler+0x72>
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8083 	beq.w	8001f04 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d07d      	beq.n	8001f04 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd17 	bl	8001858 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d062      	beq.n	8001ef6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_ADC_IRQHandler+0x22c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_IRQHandler+0xc0>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	e000      	b.n	8001e42 <HAL_ADC_IRQHandler+0xc2>
 8001e40:	4b5b      	ldr	r3, [pc, #364]	; (8001fb0 <HAL_ADC_IRQHandler+0x230>)
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d008      	beq.n	8001e5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d002      	beq.n	8001e5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d104      	bne.n	8001e66 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	e00c      	b.n	8001e80 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a50      	ldr	r2, [pc, #320]	; (8001fac <HAL_ADC_IRQHandler+0x22c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d002      	beq.n	8001e76 <HAL_ADC_IRQHandler+0xf6>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	e000      	b.n	8001e78 <HAL_ADC_IRQHandler+0xf8>
 8001e76:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_ADC_IRQHandler+0x230>)
 8001e78:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d135      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d12e      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fdf4 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d11a      	bne.n	8001ede <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 020c 	bic.w	r2, r2, #12
 8001eb6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d112      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
 8001edc:	e00b      	b.n	8001ef6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f95c 	bl	80021b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	220c      	movs	r2, #12
 8001f02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x198>
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 809f 	beq.w	8002062 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8099 	beq.w	8002062 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fcbf 	bl	80018d0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f52:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fc7d 	bl	8001858 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f5e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a11      	ldr	r2, [pc, #68]	; (8001fac <HAL_ADC_IRQHandler+0x22c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d002      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x1f0>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e000      	b.n	8001f72 <HAL_ADC_IRQHandler+0x1f2>
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_ADC_IRQHandler+0x230>)
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d008      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d002      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b07      	cmp	r3, #7
 8001f8a:	d104      	bne.n	8001f96 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	e013      	b.n	8001fbe <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_ADC_IRQHandler+0x22c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x234>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	e007      	b.n	8001fb6 <HAL_ADC_IRQHandler+0x236>
 8001fa6:	bf00      	nop
 8001fa8:	50040300 	.word	0x50040300
 8001fac:	50040100 	.word	0x50040100
 8001fb0:	50040000 	.word	0x50040000
 8001fb4:	4b7d      	ldr	r3, [pc, #500]	; (80021ac <HAL_ADC_IRQHandler+0x42c>)
 8001fb6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10c      	bne.n	8001fde <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d142      	bne.n	8002054 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d03f      	beq.n	8002054 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d13a      	bne.n	8002054 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d133      	bne.n	8002054 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d12e      	bne.n	8002054 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fd58 	bl	8001ab0 <LL_ADC_INJ_IsConversionOngoing>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11a      	bne.n	800203c <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002014:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d112      	bne.n	8002054 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
 800203a:	e00b      	b.n	8002054 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fc55 	bl	8002904 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2260      	movs	r2, #96	; 0x60
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	2b00      	cmp	r3, #0
 800206a:	d011      	beq.n	8002090 <HAL_ADC_IRQHandler+0x310>
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8a0 	bl	80021c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x340>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00d      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fc3b 	bl	800292c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x370>
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00d      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fc2d 	bl	8002940 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d036      	beq.n	8002168 <HAL_ADC_IRQHandler+0x3e8>
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d031      	beq.n	8002168 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800210c:	2301      	movs	r3, #1
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
 8002110:	e014      	b.n	800213c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002118:	4825      	ldr	r0, [pc, #148]	; (80021b0 <HAL_ADC_IRQHandler+0x430>)
 800211a:	f7ff fc47 	bl	80019ac <LL_ADC_GetMultiDMATransfer>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00b      	beq.n	800213c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002124:	2301      	movs	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	e008      	b.n	800213c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10e      	bne.n	8002160 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002146:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f043 0202 	orr.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f83e 	bl	80021dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2210      	movs	r2, #16
 8002166:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d018      	beq.n	80021a4 <HAL_ADC_IRQHandler+0x424>
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	f043 0208 	orr.w	r2, r3, #8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fbba 	bl	8002918 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	; 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	50040000 	.word	0x50040000
 80021b0:	50040300 	.word	0x50040300

080021b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0a6      	sub	sp, #152	; 0x98
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x22>
 800220e:	2302      	movs	r3, #2
 8002210:	e348      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x6b4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fc33 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 8329 	bne.w	800287e <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d824      	bhi.n	800227e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	3b02      	subs	r3, #2
 800223a:	2b03      	cmp	r3, #3
 800223c:	d81b      	bhi.n	8002276 <HAL_ADC_ConfigChannel+0x86>
 800223e:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <HAL_ADC_ConfigChannel+0x54>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	0800225d 	.word	0x0800225d
 800224c:	08002265 	.word	0x08002265
 8002250:	0800226d 	.word	0x0800226d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	220c      	movs	r2, #12
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	e011      	b.n	8002280 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2212      	movs	r2, #18
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	e00d      	b.n	8002280 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2218      	movs	r2, #24
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	e009      	b.n	8002280 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	e004      	b.n	8002280 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2206      	movs	r2, #6
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	e000      	b.n	8002280 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800227e:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	f7ff faf6 	bl	800187e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fbf7 	bl	8001a8a <LL_ADC_REG_IsConversionOngoing>
 800229c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fc03 	bl	8001ab0 <LL_ADC_INJ_IsConversionOngoing>
 80022aa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 8148 	bne.w	8002548 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 8143 	bne.w	8002548 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f7ff fb11 	bl	80018f6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	08db      	lsrs	r3, r3, #3
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d00a      	beq.n	800230c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002306:	f7ff fa59 	bl	80017bc <LL_ADC_SetOffset>
 800230a:	e11d      	b.n	8002548 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fa74 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10a      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x148>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fa69 	bl	8001800 <LL_ADC_GetOffsetChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	f003 021f 	and.w	r2, r3, #31
 8002336:	e012      	b.n	800235e <HAL_ADC_ConfigChannel+0x16e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fa5e 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x186>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	e00a      	b.n	800238c <HAL_ADC_ConfigChannel+0x19c>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	429a      	cmp	r2, r3
 800238e:	d106      	bne.n	800239e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fa45 	bl	8001828 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2101      	movs	r1, #1
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fa2b 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x1da>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2101      	movs	r1, #1
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fa20 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	e010      	b.n	80023ec <HAL_ADC_ConfigChannel+0x1fc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fa15 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x214>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	e00a      	b.n	800241a <HAL_ADC_ConfigChannel+0x22a>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	429a      	cmp	r2, r3
 800241c:	d106      	bne.n	800242c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2200      	movs	r2, #0
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f9fe 	bl	8001828 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2102      	movs	r1, #2
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f9e4 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x268>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2102      	movs	r1, #2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f9d9 	bl	8001800 <LL_ADC_GetOffsetChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	f003 021f 	and.w	r2, r3, #31
 8002456:	e010      	b.n	800247a <HAL_ADC_ConfigChannel+0x28a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f9ce 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x2a2>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	e00a      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x2b8>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d106      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f9b7 	bl	8001828 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2103      	movs	r1, #3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff f99d 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x2f6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2103      	movs	r1, #3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f992 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	0e9b      	lsrs	r3, r3, #26
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	e010      	b.n	8002508 <HAL_ADC_ConfigChannel+0x318>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2103      	movs	r1, #3
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f987 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x330>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	e00a      	b.n	8002536 <HAL_ADC_ConfigChannel+0x346>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800252e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	429a      	cmp	r2, r3
 8002538:	d106      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	2103      	movs	r1, #3
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f970 	bl	8001828 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fa89 	bl	8001a64 <LL_ADC_IsEnabled>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 810c 	bne.w	8002772 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	461a      	mov	r2, r3
 8002568:	f7ff f9ee 	bl	8001948 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4aad      	ldr	r2, [pc, #692]	; (8002828 <HAL_ADC_ConfigChannel+0x638>)
 8002572:	4293      	cmp	r3, r2
 8002574:	f040 80fd 	bne.w	8002772 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x3b0>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2b09      	cmp	r3, #9
 8002596:	bf94      	ite	ls
 8002598:	2301      	movls	r3, #1
 800259a:	2300      	movhi	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e012      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x3d6>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2b09      	cmp	r3, #9
 80025be:	bf94      	ite	ls
 80025c0:	2301      	movls	r3, #1
 80025c2:	2300      	movhi	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d064      	beq.n	8002694 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x3f6>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	3301      	adds	r3, #1
 80025de:	069b      	lsls	r3, r3, #26
 80025e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e4:	e00e      	b.n	8002604 <HAL_ADC_ConfigChannel+0x414>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	069b      	lsls	r3, r3, #26
 8002600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x434>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	e010      	b.n	8002646 <HAL_ADC_ConfigChannel+0x456>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	ea42 0103 	orr.w	r1, r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x47c>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	3301      	adds	r3, #1
 800265e:	f003 021f 	and.w	r2, r3, #31
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	051b      	lsls	r3, r3, #20
 800266a:	e011      	b.n	8002690 <HAL_ADC_ConfigChannel+0x4a0>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002690:	430b      	orrs	r3, r1
 8002692:	e069      	b.n	8002768 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x4c0>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0e9b      	lsrs	r3, r3, #26
 80026a6:	3301      	adds	r3, #1
 80026a8:	069b      	lsls	r3, r3, #26
 80026aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ae:	e00e      	b.n	80026ce <HAL_ADC_ConfigChannel+0x4de>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	61fb      	str	r3, [r7, #28]
  return result;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	069b      	lsls	r3, r3, #26
 80026ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x4fe>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	3301      	adds	r3, #1
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	e010      	b.n	8002710 <HAL_ADC_ConfigChannel+0x520>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	617b      	str	r3, [r7, #20]
  return result;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	ea42 0103 	orr.w	r1, r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10d      	bne.n	800273c <HAL_ADC_ConfigChannel+0x54c>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	3301      	adds	r3, #1
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	3b1e      	subs	r3, #30
 8002734:	051b      	lsls	r3, r3, #20
 8002736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273a:	e014      	b.n	8002766 <HAL_ADC_ConfigChannel+0x576>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	60fb      	str	r3, [r7, #12]
  return result;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	3b1e      	subs	r3, #30
 8002760:	051b      	lsls	r3, r3, #20
 8002762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002766:	430b      	orrs	r3, r1
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	6892      	ldr	r2, [r2, #8]
 800276c:	4619      	mov	r1, r3
 800276e:	f7ff f8c2 	bl	80018f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_ADC_ConfigChannel+0x63c>)
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 808c 	beq.w	8002898 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002780:	482b      	ldr	r0, [pc, #172]	; (8002830 <HAL_ADC_ConfigChannel+0x640>)
 8002782:	f7ff f80d 	bl	80017a0 <LL_ADC_GetCommonPathInternalCh>
 8002786:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a29      	ldr	r2, [pc, #164]	; (8002834 <HAL_ADC_ConfigChannel+0x644>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d12b      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x5fc>
 8002794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d125      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_ADC_ConfigChannel+0x648>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <HAL_ADC_ConfigChannel+0x5c4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_ADC_ConfigChannel+0x64c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d16e      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027bc:	4619      	mov	r1, r3
 80027be:	481c      	ldr	r0, [pc, #112]	; (8002830 <HAL_ADC_ConfigChannel+0x640>)
 80027c0:	f7fe ffdb 	bl	800177a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_ADC_ConfigChannel+0x650>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <HAL_ADC_ConfigChannel+0x654>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099a      	lsrs	r2, r3, #6
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f9      	bne.n	80027de <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ea:	e052      	b.n	8002892 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_ADC_ConfigChannel+0x658>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12a      	bne.n	800284c <HAL_ADC_ConfigChannel+0x65c>
 80027f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d124      	bne.n	800284c <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <HAL_ADC_ConfigChannel+0x648>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_ADC_ConfigChannel+0x626>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_ADC_ConfigChannel+0x64c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d13f      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800281a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281e:	4619      	mov	r1, r3
 8002820:	4803      	ldr	r0, [pc, #12]	; (8002830 <HAL_ADC_ConfigChannel+0x640>)
 8002822:	f7fe ffaa 	bl	800177a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002826:	e036      	b.n	8002896 <HAL_ADC_ConfigChannel+0x6a6>
 8002828:	407f0000 	.word	0x407f0000
 800282c:	80080000 	.word	0x80080000
 8002830:	50040300 	.word	0x50040300
 8002834:	c7520000 	.word	0xc7520000
 8002838:	50040000 	.word	0x50040000
 800283c:	50040200 	.word	0x50040200
 8002840:	20000000 	.word	0x20000000
 8002844:	053e2d63 	.word	0x053e2d63
 8002848:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a16      	ldr	r2, [pc, #88]	; (80028ac <HAL_ADC_ConfigChannel+0x6bc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d120      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d11a      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_ADC_ConfigChannel+0x6c0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d115      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800286c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002874:	4619      	mov	r1, r3
 8002876:	480f      	ldr	r0, [pc, #60]	; (80028b4 <HAL_ADC_ConfigChannel+0x6c4>)
 8002878:	f7fe ff7f 	bl	800177a <LL_ADC_SetCommonPathInternalCh>
 800287c:	e00c      	b.n	8002898 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002890:	e002      	b.n	8002898 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002896:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3798      	adds	r7, #152	; 0x98
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	80000001 	.word	0x80000001
 80028b0:	50040000 	.word	0x50040000
 80028b4:	50040300 	.word	0x50040300

080028b8 <LL_ADC_IsEnabled>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <LL_ADC_IsEnabled+0x18>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <LL_ADC_IsEnabled+0x1a>
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_REG_IsConversionOngoing>:
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b09f      	sub	sp, #124	; 0x7c
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002982:	2302      	movs	r3, #2
 8002984:	e08f      	b.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a47      	ldr	r2, [pc, #284]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d102      	bne.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	e001      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e072      	b.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff8b 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 80029c8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff85 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d154      	bne.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d151      	bne.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029e0:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02c      	beq.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029fe:	035b      	lsls	r3, r3, #13
 8002a00:	430b      	orrs	r3, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a08:	4829      	ldr	r0, [pc, #164]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a0a:	f7ff ff55 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	4828      	ldr	r0, [pc, #160]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a12:	f7ff ff51 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	431c      	orrs	r4, r3
 8002a1a:	4828      	ldr	r0, [pc, #160]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a1c:	f7ff ff4c 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4323      	orrs	r3, r4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d137      	bne.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a30:	f023 030f 	bic.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	6811      	ldr	r1, [r2, #0]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a42:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a44:	e028      	b.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a52:	4817      	ldr	r0, [pc, #92]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a54:	f7ff ff30 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	4816      	ldr	r0, [pc, #88]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a5c:	f7ff ff2c 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	431c      	orrs	r4, r3
 8002a64:	4815      	ldr	r0, [pc, #84]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a66:	f7ff ff27 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4323      	orrs	r3, r4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d112      	bne.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a7a:	f023 030f 	bic.w	r3, r3, #15
 8002a7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a80:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a82:	e009      	b.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a96:	e000      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aa2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	377c      	adds	r7, #124	; 0x7c
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd90      	pop	{r4, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	50040000 	.word	0x50040000
 8002ab4:	50040100 	.word	0x50040100
 8002ab8:	50040300 	.word	0x50040300
 8002abc:	50040200 	.word	0x50040200

08002ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af2:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	60d3      	str	r3, [r2, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <__NVIC_EnableIRQ+0x38>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c2c:	d301      	bcc.n	8002c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00f      	b.n	8002c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <SysTick_Config+0x40>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f7ff ff8e 	bl	8002b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SysTick_Config+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <SysTick_Config+0x40>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000e010 	.word	0xe000e010

08002c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff29 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c88:	f7ff ff3e 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff8e 	bl	8002bb4 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5d 	bl	8002b60 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff31 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa2 	bl	8002c1c <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf2:	e17f      	b.n	8002ff4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8171 	beq.w	8002fee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x38>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b12      	cmp	r3, #18
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d00b      	beq.n	8002db8 <HAL_GPIO_Init+0xd4>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d007      	beq.n	8002db8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dac:	2b11      	cmp	r3, #17
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b12      	cmp	r3, #18
 8002db6:	d130      	bne.n	8002e1a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dee:	2201      	movs	r2, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0201 	and.w	r2, r3, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d118      	bne.n	8002e58 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80ac 	beq.w	8002fee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <HAL_GPIO_Init+0x32c>)
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	4a5d      	ldr	r2, [pc, #372]	; (8003010 <HAL_GPIO_Init+0x32c>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	; (8003010 <HAL_GPIO_Init+0x32c>)
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eae:	4a59      	ldr	r2, [pc, #356]	; (8003014 <HAL_GPIO_Init+0x330>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ed8:	d025      	beq.n	8002f26 <HAL_GPIO_Init+0x242>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4e      	ldr	r2, [pc, #312]	; (8003018 <HAL_GPIO_Init+0x334>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01f      	beq.n	8002f22 <HAL_GPIO_Init+0x23e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4d      	ldr	r2, [pc, #308]	; (800301c <HAL_GPIO_Init+0x338>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d019      	beq.n	8002f1e <HAL_GPIO_Init+0x23a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4c      	ldr	r2, [pc, #304]	; (8003020 <HAL_GPIO_Init+0x33c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_GPIO_Init+0x236>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4b      	ldr	r2, [pc, #300]	; (8003024 <HAL_GPIO_Init+0x340>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00d      	beq.n	8002f16 <HAL_GPIO_Init+0x232>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4a      	ldr	r2, [pc, #296]	; (8003028 <HAL_GPIO_Init+0x344>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <HAL_GPIO_Init+0x22e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a49      	ldr	r2, [pc, #292]	; (800302c <HAL_GPIO_Init+0x348>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_GPIO_Init+0x22a>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e00c      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f0e:	2307      	movs	r3, #7
 8002f10:	e00a      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e008      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e004      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f26:	2300      	movs	r3, #0
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	f002 0203 	and.w	r2, r2, #3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	4093      	lsls	r3, r2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f38:	4936      	ldr	r1, [pc, #216]	; (8003014 <HAL_GPIO_Init+0x330>)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <HAL_GPIO_Init+0x34c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f6a:	4a31      	ldr	r2, [pc, #196]	; (8003030 <HAL_GPIO_Init+0x34c>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f70:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <HAL_GPIO_Init+0x34c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f94:	4a26      	ldr	r2, [pc, #152]	; (8003030 <HAL_GPIO_Init+0x34c>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f9a:	4b25      	ldr	r3, [pc, #148]	; (8003030 <HAL_GPIO_Init+0x34c>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_GPIO_Init+0x34c>)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_GPIO_Init+0x34c>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe8:	4a11      	ldr	r2, [pc, #68]	; (8003030 <HAL_GPIO_Init+0x34c>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f47f ae78 	bne.w	8002cf4 <HAL_GPIO_Init+0x10>
  }
}
 8003004:	bf00      	nop
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40021000 	.word	0x40021000
 8003014:	40010000 	.word	0x40010000
 8003018:	48000400 	.word	0x48000400
 800301c:	48000800 	.word	0x48000800
 8003020:	48000c00 	.word	0x48000c00
 8003024:	48001000 	.word	0x48001000
 8003028:	48001400 	.word	0x48001400
 800302c:	48001800 	.word	0x48001800
 8003030:	40010400 	.word	0x40010400

08003034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
 8003040:	4613      	mov	r3, r2
 8003042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003044:	787b      	ldrb	r3, [r7, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003050:	e002      	b.n	8003058 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800307c:	887a      	ldrh	r2, [r7, #2]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003082:	e002      	b.n	800308a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003084:	887a      	ldrh	r2, [r7, #2]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	619a      	str	r2, [r3, #24]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003098:	b08f      	sub	sp, #60	; 0x3c
 800309a:	af0a      	add	r7, sp, #40	; 0x28
 800309c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e054      	b.n	8003152 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f006 fd98 	bl	8009bf8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 ff2c 	bl	8007f44 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	687e      	ldr	r6, [r7, #4]
 80030f4:	466d      	mov	r5, sp
 80030f6:	f106 0410 	add.w	r4, r6, #16
 80030fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003106:	e885 0003 	stmia.w	r5, {r0, r1}
 800310a:	1d33      	adds	r3, r6, #4
 800310c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f004 feb5 	bl	8007e7e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f004 ff23 	bl	8007f66 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	687e      	ldr	r6, [r7, #4]
 8003128:	466d      	mov	r5, sp
 800312a:	f106 0410 	add.w	r4, r6, #16
 800312e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003136:	e894 0003 	ldmia.w	r4, {r0, r1}
 800313a:	e885 0003 	stmia.w	r5, {r0, r1}
 800313e:	1d33      	adds	r3, r6, #4
 8003140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	f005 f832 	bl	80081ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800315a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800315a:	b590      	push	{r4, r7, lr}
 800315c:	b089      	sub	sp, #36	; 0x24
 800315e:	af04      	add	r7, sp, #16
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	4608      	mov	r0, r1
 8003164:	4611      	mov	r1, r2
 8003166:	461a      	mov	r2, r3
 8003168:	4603      	mov	r3, r0
 800316a:	70fb      	strb	r3, [r7, #3]
 800316c:	460b      	mov	r3, r1
 800316e:	70bb      	strb	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_HCD_HC_Init+0x28>
 800317e:	2302      	movs	r3, #2
 8003180:	e07f      	b.n	8003282 <HAL_HCD_HC_Init+0x128>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	333d      	adds	r3, #61	; 0x3d
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	3338      	adds	r3, #56	; 0x38
 80031ae:	787a      	ldrb	r2, [r7, #1]
 80031b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	3340      	adds	r3, #64	; 0x40
 80031c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031c4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	3339      	adds	r3, #57	; 0x39
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	333f      	adds	r3, #63	; 0x3f
 80031ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80031ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	78bb      	ldrb	r3, [r7, #2]
 80031f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031f8:	b2d8      	uxtb	r0, r3
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	333a      	adds	r3, #58	; 0x3a
 8003208:	4602      	mov	r2, r0
 800320a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800320c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da0a      	bge.n	800322a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	333b      	adds	r3, #59	; 0x3b
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e009      	b.n	800323e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	333b      	adds	r3, #59	; 0x3b
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	333c      	adds	r3, #60	; 0x3c
 800324e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003252:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	787c      	ldrb	r4, [r7, #1]
 800325a:	78ba      	ldrb	r2, [r7, #2]
 800325c:	78f9      	ldrb	r1, [r7, #3]
 800325e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003260:	9302      	str	r3, [sp, #8]
 8003262:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	f897 3020 	ldrb.w	r3, [r7, #32]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4623      	mov	r3, r4
 8003270:	f005 f89e 	bl	80083b0 <USB_HC_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}

0800328a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_HCD_HC_Halt+0x1e>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e00f      	b.n	80032c8 <HAL_HCD_HC_Halt+0x3e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f005 fa7c 	bl	80087b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	4608      	mov	r0, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	461a      	mov	r2, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	70fb      	strb	r3, [r7, #3]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70bb      	strb	r3, [r7, #2]
 80032e6:	4613      	mov	r3, r2
 80032e8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	333b      	adds	r3, #59	; 0x3b
 80032fa:	78ba      	ldrb	r2, [r7, #2]
 80032fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	333f      	adds	r3, #63	; 0x3f
 800330e:	787a      	ldrb	r2, [r7, #1]
 8003310:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003312:	7c3b      	ldrb	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	3342      	adds	r3, #66	; 0x42
 8003328:	2203      	movs	r2, #3
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e009      	b.n	8003342 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	3342      	adds	r3, #66	; 0x42
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003342:	787b      	ldrb	r3, [r7, #1]
 8003344:	2b03      	cmp	r3, #3
 8003346:	f200 80d6 	bhi.w	80034f6 <HAL_HCD_HC_SubmitRequest+0x226>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <HAL_HCD_HC_SubmitRequest+0x80>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003361 	.word	0x08003361
 8003354:	080034e1 	.word	0x080034e1
 8003358:	080033cd 	.word	0x080033cd
 800335c:	08003457 	.word	0x08003457
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003360:	7c3b      	ldrb	r3, [r7, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	f040 80c9 	bne.w	80034fa <HAL_HCD_HC_SubmitRequest+0x22a>
 8003368:	78bb      	ldrb	r3, [r7, #2]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80c5 	bne.w	80034fa <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8003370:	8b3b      	ldrh	r3, [r7, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	3351      	adds	r3, #81	; 0x51
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	3351      	adds	r3, #81	; 0x51
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	3342      	adds	r3, #66	; 0x42
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033b4:	e0a1      	b.n	80034fa <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	3342      	adds	r3, #66	; 0x42
 80033c6:	2202      	movs	r2, #2
 80033c8:	701a      	strb	r2, [r3, #0]
      break;
 80033ca:	e096      	b.n	80034fa <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80033cc:	78bb      	ldrb	r3, [r7, #2]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d120      	bne.n	8003414 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	3351      	adds	r3, #81	; 0x51
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	3342      	adds	r3, #66	; 0x42
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033fc:	e07e      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	3342      	adds	r3, #66	; 0x42
 800340e:	2202      	movs	r2, #2
 8003410:	701a      	strb	r2, [r3, #0]
      break;
 8003412:	e073      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	3350      	adds	r3, #80	; 0x50
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	3342      	adds	r3, #66	; 0x42
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
      break;
 800343e:	e05d      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	3342      	adds	r3, #66	; 0x42
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]
      break;
 8003454:	e052      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003456:	78bb      	ldrb	r3, [r7, #2]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d120      	bne.n	800349e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	3351      	adds	r3, #81	; 0x51
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	3342      	adds	r3, #66	; 0x42
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003486:	e039      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	3342      	adds	r3, #66	; 0x42
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
      break;
 800349c:	e02e      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	3350      	adds	r3, #80	; 0x50
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3342      	adds	r3, #66	; 0x42
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
      break;
 80034c8:	e018      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	3342      	adds	r3, #66	; 0x42
 80034da:	2202      	movs	r2, #2
 80034dc:	701a      	strb	r2, [r3, #0]
      break;
 80034de:	e00d      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	3342      	adds	r3, #66	; 0x42
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
      break;
 80034f4:	e002      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80034fa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	3344      	adds	r3, #68	; 0x44
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	8b39      	ldrh	r1, [r7, #24]
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4403      	add	r3, r0
 8003520:	3348      	adds	r3, #72	; 0x48
 8003522:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	335c      	adds	r3, #92	; 0x5c
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	440b      	add	r3, r1
 8003546:	334c      	adds	r3, #76	; 0x4c
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	3339      	adds	r3, #57	; 0x39
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	335d      	adds	r3, #93	; 0x5d
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	3338      	adds	r3, #56	; 0x38
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f005 f803 	bl	8008594 <USB_HC_StartXfer>
 800358e:	4603      	mov	r3, r0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 fdb9 	bl	8008126 <USB_GetMode>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	f040 80f1 	bne.w	800379e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 fd9d 	bl	8008100 <USB_ReadInterrupts>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80e7 	beq.w	800379c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 fd94 	bl	8008100 <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035e2:	d104      	bne.n	80035ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f004 fd84 	bl	8008100 <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003602:	d104      	bne.n	800360e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800360c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f004 fd74 	bl	8008100 <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800361e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003622:	d104      	bne.n	800362e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800362c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fd64 	bl	8008100 <USB_ReadInterrupts>
 8003638:	4603      	mov	r3, r0
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d103      	bne.n	800364a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2202      	movs	r2, #2
 8003648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f004 fd56 	bl	8008100 <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800365a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800365e:	d117      	bne.n	8003690 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800366e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003672:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f006 fb41 	bl	8009cfc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2101      	movs	r1, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f004 fe11 	bl	80082a8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800368e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f004 fd33 	bl	8008100 <USB_ReadInterrupts>
 800369a:	4603      	mov	r3, r0
 800369c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a4:	d102      	bne.n	80036ac <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f001 f868 	bl	800477c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f004 fd25 	bl	8008100 <USB_ReadInterrupts>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d106      	bne.n	80036ce <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f006 faff 	bl	8009cc4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2208      	movs	r2, #8
 80036cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f004 fd14 	bl	8008100 <USB_ReadInterrupts>
 80036d8:	4603      	mov	r3, r0
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e2:	d138      	bne.n	8003756 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f005 f853 	bl	8008794 <USB_HC_ReadInterrupt>
 80036ee:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e025      	b.n	8003742 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d018      	beq.n	800373c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003720:	d106      	bne.n	8003730 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	4619      	mov	r1, r3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f8b3 	bl	8003894 <HCD_HC_IN_IRQHandler>
 800372e:	e005      	b.n	800373c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fc1f 	bl	8003f7a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	429a      	cmp	r2, r3
 800374a:	d3d4      	bcc.n	80036f6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f004 fcd0 	bl	8008100 <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b10      	cmp	r3, #16
 8003768:	d101      	bne.n	800376e <HAL_HCD_IRQHandler+0x1d6>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_HCD_IRQHandler+0x1d8>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d014      	beq.n	800379e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0210 	bic.w	r2, r2, #16
 8003782:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 ff4d 	bl	8004624 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699a      	ldr	r2, [r3, #24]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0210 	orr.w	r2, r2, #16
 8003798:	619a      	str	r2, [r3, #24]
 800379a:	e000      	b.n	800379e <HAL_HCD_IRQHandler+0x206>
      return;
 800379c:	bf00      	nop
    }
  }
}
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_HCD_Start+0x16>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e013      	b.n	80037e2 <HAL_HCD_Start+0x3e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 fbab 	bl	8007f22 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2101      	movs	r1, #1
 80037d2:	4618      	mov	r0, r3
 80037d4:	f004 fda2 	bl	800831c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_HCD_Stop+0x16>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e00d      	b.n	800381c <HAL_HCD_Stop+0x32>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f005 f8d1 	bl	80089b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	335c      	adds	r3, #92	; 0x5c
 8003840:	781b      	ldrb	r3, [r3, #0]
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	334c      	adds	r3, #76	; 0x4c
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f004 fd82 	bl	800838e <USB_GetCurrentFrame>
 800388a:	4603      	mov	r3, r0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d119      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	2304      	movs	r3, #4
 80038d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	60d3      	str	r3, [r2, #12]
 80038f6:	e095      	b.n	8003a24 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b20      	cmp	r3, #32
 800390c:	d109      	bne.n	8003922 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	461a      	mov	r2, r3
 800391c:	2320      	movs	r3, #32
 800391e:	6093      	str	r3, [r2, #8]
 8003920:	e080      	b.n	8003a24 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d134      	bne.n	80039a2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	440a      	add	r2, r1
 800394e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	335d      	adds	r3, #93	; 0x5d
 8003968:	2205      	movs	r2, #5
 800396a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	461a      	mov	r2, r3
 800397a:	2310      	movs	r3, #16
 800397c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	461a      	mov	r2, r3
 800398c:	2308      	movs	r3, #8
 800398e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f004 ff0b 	bl	80087b6 <USB_HC_Halt>
 80039a0:	e040      	b.n	8003a24 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b8:	d134      	bne.n	8003a24 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fee6 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2310      	movs	r3, #16
 80039fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	440b      	add	r3, r1
 8003a0a:	335d      	adds	r3, #93	; 0x5d
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a22:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3a:	d122      	bne.n	8003a82 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f004 fea5 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a7e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a80:	e277      	b.n	8003f72 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	f040 80a1 	bne.w	8003bdc <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	335d      	adds	r3, #93	; 0x5d
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	440b      	add	r3, r1
 8003abc:	3358      	adds	r3, #88	; 0x58
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	333f      	adds	r3, #63	; 0x3f
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	440b      	add	r3, r1
 8003af8:	333f      	adds	r3, #63	; 0x3f
 8003afa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d121      	bne.n	8003b44 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f004 fe43 	bl	80087b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2310      	movs	r3, #16
 8003b40:	6093      	str	r3, [r2, #8]
 8003b42:	e034      	b.n	8003bae <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	333f      	adds	r3, #63	; 0x3f
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d129      	bne.n	8003bae <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b78:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	440b      	add	r3, r1
 8003b88:	335c      	adds	r3, #92	; 0x5c
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	b2d8      	uxtb	r0, r3
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	335c      	adds	r3, #92	; 0x5c
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4601      	mov	r1, r0
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f006 f8b5 	bl	8009d18 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	440b      	add	r3, r1
 8003bbc:	3350      	adds	r3, #80	; 0x50
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f083 0301 	eor.w	r3, r3, #1
 8003bc4:	b2d8      	uxtb	r0, r3
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3350      	adds	r3, #80	; 0x50
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	701a      	strb	r2, [r3, #0]
}
 8003bda:	e1ca      	b.n	8003f72 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	f040 80f1 	bne.w	8003dd6 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c0e:	f023 0302 	bic.w	r3, r3, #2
 8003c12:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	335d      	adds	r3, #93	; 0x5d
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10a      	bne.n	8003c40 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	440b      	add	r3, r1
 8003c38:	335c      	adds	r3, #92	; 0x5c
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e0b0      	b.n	8003da2 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	440b      	add	r3, r1
 8003c4e:	335d      	adds	r3, #93	; 0x5d
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d10a      	bne.n	8003c6c <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	440b      	add	r3, r1
 8003c64:	335c      	adds	r3, #92	; 0x5c
 8003c66:	2205      	movs	r2, #5
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e09a      	b.n	8003da2 <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	335d      	adds	r3, #93	; 0x5d
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d00a      	beq.n	8003c98 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	440b      	add	r3, r1
 8003c90:	335d      	adds	r3, #93	; 0x5d
 8003c92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d156      	bne.n	8003d46 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3358      	adds	r3, #88	; 0x58
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	1c59      	adds	r1, r3, #1
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4403      	add	r3, r0
 8003cba:	3358      	adds	r3, #88	; 0x58
 8003cbc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	440b      	add	r3, r1
 8003ccc:	3358      	adds	r3, #88	; 0x58
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d914      	bls.n	8003cfe <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3358      	adds	r3, #88	; 0x58
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	440b      	add	r3, r1
 8003cf6:	335c      	adds	r3, #92	; 0x5c
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e009      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	335c      	adds	r3, #92	; 0x5c
 8003d0e:	2202      	movs	r2, #2
 8003d10:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d28:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d30:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e02d      	b.n	8003da2 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	335d      	adds	r3, #93	; 0x5d
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d122      	bne.n	8003da2 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	440b      	add	r3, r1
 8003d6a:	335c      	adds	r3, #92	; 0x5c
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d86:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d8e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dae:	461a      	mov	r2, r3
 8003db0:	2302      	movs	r3, #2
 8003db2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	b2d8      	uxtb	r0, r3
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	335c      	adds	r3, #92	; 0x5c
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4601      	mov	r1, r0
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f005 ffa2 	bl	8009d18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003dd4:	e0cd      	b.n	8003f72 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de8:	2b80      	cmp	r3, #128	; 0x80
 8003dea:	d13e      	bne.n	8003e6a <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e06:	f043 0302 	orr.w	r3, r3, #2
 8003e0a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	3358      	adds	r3, #88	; 0x58
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4403      	add	r3, r0
 8003e2e:	3358      	adds	r3, #88	; 0x58
 8003e30:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	440b      	add	r3, r1
 8003e40:	335d      	adds	r3, #93	; 0x5d
 8003e42:	2206      	movs	r2, #6
 8003e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fcb0 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	461a      	mov	r2, r3
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	6093      	str	r3, [r2, #8]
}
 8003e68:	e083      	b.n	8003f72 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d178      	bne.n	8003f72 <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	333f      	adds	r3, #63	; 0x3f
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d122      	bne.n	8003edc <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3358      	adds	r3, #88	; 0x58
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f004 fc6e 	bl	80087b6 <USB_HC_Halt>
 8003eda:	e041      	b.n	8003f60 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	440b      	add	r3, r1
 8003eea:	333f      	adds	r3, #63	; 0x3f
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	333f      	adds	r3, #63	; 0x3f
 8003f02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d12b      	bne.n	8003f60 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	3358      	adds	r3, #88	; 0x58
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	335d      	adds	r3, #93	; 0x5d
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f4a:	f043 0302 	orr.w	r3, r3, #2
 8003f4e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f004 fc2b 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2310      	movs	r3, #16
 8003f70:	6093      	str	r3, [r2, #8]
}
 8003f72:	bf00      	nop
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d119      	bne.n	8003fde <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2304      	movs	r3, #4
 8003fba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fd6:	f043 0302 	orr.w	r3, r3, #2
 8003fda:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003fdc:	e31e      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d141      	bne.n	8004078 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	461a      	mov	r2, r3
 8004002:	2320      	movs	r3, #32
 8004004:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	440b      	add	r3, r1
 8004014:	333d      	adds	r3, #61	; 0x3d
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	f040 82ff 	bne.w	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	440b      	add	r3, r1
 800402c:	333d      	adds	r3, #61	; 0x3d
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	335c      	adds	r3, #92	; 0x5c
 8004042:	2202      	movs	r2, #2
 8004044:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	440a      	add	r2, r1
 800405c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f004 fba0 	bl	80087b6 <USB_HC_Halt>
}
 8004076:	e2d1      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d13f      	bne.n	800410e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	440b      	add	r3, r1
 800409c:	335d      	adds	r3, #93	; 0x5d
 800409e:	2204      	movs	r2, #4
 80040a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	440b      	add	r3, r1
 80040b0:	333d      	adds	r3, #61	; 0x3d
 80040b2:	2201      	movs	r2, #1
 80040b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	440b      	add	r3, r1
 80040c4:	3358      	adds	r3, #88	; 0x58
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e4:	f043 0302 	orr.w	r3, r3, #2
 80040e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 fb5e 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	461a      	mov	r2, r3
 8004108:	2340      	movs	r3, #64	; 0x40
 800410a:	6093      	str	r3, [r2, #8]
}
 800410c:	e286      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004124:	d122      	bne.n	800416c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	440a      	add	r2, r1
 800413c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f004 fb30 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004162:	461a      	mov	r2, r3
 8004164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004168:	6093      	str	r3, [r2, #8]
}
 800416a:	e257      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d135      	bne.n	80041ee <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	3358      	adds	r3, #88	; 0x58
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 faf8 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	461a      	mov	r2, r3
 80041d4:	2301      	movs	r3, #1
 80041d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	335d      	adds	r3, #93	; 0x5d
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
}
 80041ec:	e216      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d12b      	bne.n	800425c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	461a      	mov	r2, r3
 8004212:	2308      	movs	r3, #8
 8004214:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4413      	add	r3, r2
 800421e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	440a      	add	r2, r1
 800422c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f004 fab8 	bl	80087b6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	440b      	add	r3, r1
 8004254:	335d      	adds	r3, #93	; 0x5d
 8004256:	2205      	movs	r2, #5
 8004258:	701a      	strb	r2, [r3, #0]
}
 800425a:	e1df      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b10      	cmp	r3, #16
 8004270:	d135      	bne.n	80042de <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	3358      	adds	r3, #88	; 0x58
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	440b      	add	r3, r1
 8004294:	335d      	adds	r3, #93	; 0x5d
 8004296:	2203      	movs	r2, #3
 8004298:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fa76 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d6:	461a      	mov	r2, r3
 80042d8:	2310      	movs	r3, #16
 80042da:	6093      	str	r3, [r2, #8]
}
 80042dc:	e19e      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d12b      	bne.n	800434c <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	440a      	add	r2, r1
 800430a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f004 fa49 	bl	80087b6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	440b      	add	r3, r1
 8004332:	335d      	adds	r3, #93	; 0x5d
 8004334:	2206      	movs	r2, #6
 8004336:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004344:	461a      	mov	r2, r3
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	6093      	str	r3, [r2, #8]
}
 800434a:	e167      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004362:	d135      	bne.n	80043d0 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	440a      	add	r2, r1
 800437a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800437e:	f043 0302 	orr.w	r3, r3, #2
 8004382:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	4611      	mov	r1, r2
 800438e:	4618      	mov	r0, r3
 8004390:	f004 fa11 	bl	80087b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a0:	461a      	mov	r2, r3
 80043a2:	2310      	movs	r3, #16
 80043a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b2:	461a      	mov	r2, r3
 80043b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	440b      	add	r3, r1
 80043c8:	335d      	adds	r3, #93	; 0x5d
 80043ca:	2208      	movs	r2, #8
 80043cc:	701a      	strb	r2, [r3, #0]
}
 80043ce:	e125      	b.n	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	f040 811a 	bne.w	800461c <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	0151      	lsls	r1, r2, #5
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	440a      	add	r2, r1
 80043fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004402:	f023 0302 	bic.w	r3, r3, #2
 8004406:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	335d      	adds	r3, #93	; 0x5d
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d137      	bne.n	800448e <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	440b      	add	r3, r1
 800442c:	335c      	adds	r3, #92	; 0x5c
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	333f      	adds	r3, #63	; 0x3f
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d00b      	beq.n	8004460 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	440b      	add	r3, r1
 8004456:	333f      	adds	r3, #63	; 0x3f
 8004458:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800445a:	2b03      	cmp	r3, #3
 800445c:	f040 80c5 	bne.w	80045ea <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	440b      	add	r3, r1
 800446e:	3351      	adds	r3, #81	; 0x51
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2d8      	uxtb	r0, r3
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	440b      	add	r3, r1
 8004486:	3351      	adds	r3, #81	; 0x51
 8004488:	4602      	mov	r2, r0
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e0ad      	b.n	80045ea <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	440b      	add	r3, r1
 800449c:	335d      	adds	r3, #93	; 0x5d
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d10a      	bne.n	80044ba <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	440b      	add	r3, r1
 80044b2:	335c      	adds	r3, #92	; 0x5c
 80044b4:	2202      	movs	r2, #2
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e097      	b.n	80045ea <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	440b      	add	r3, r1
 80044c8:	335d      	adds	r3, #93	; 0x5d
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d10a      	bne.n	80044e6 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	335c      	adds	r3, #92	; 0x5c
 80044e0:	2202      	movs	r2, #2
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e081      	b.n	80045ea <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	440b      	add	r3, r1
 80044f4:	335d      	adds	r3, #93	; 0x5d
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	d10a      	bne.n	8004512 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	440b      	add	r3, r1
 800450a:	335c      	adds	r3, #92	; 0x5c
 800450c:	2205      	movs	r2, #5
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e06b      	b.n	80045ea <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	440b      	add	r3, r1
 8004520:	335d      	adds	r3, #93	; 0x5d
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b06      	cmp	r3, #6
 8004526:	d00a      	beq.n	800453e <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	335d      	adds	r3, #93	; 0x5d
 8004538:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800453a:	2b08      	cmp	r3, #8
 800453c:	d155      	bne.n	80045ea <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	440b      	add	r3, r1
 800454c:	3358      	adds	r3, #88	; 0x58
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4403      	add	r3, r0
 8004560:	3358      	adds	r3, #88	; 0x58
 8004562:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	440b      	add	r3, r1
 8004572:	3358      	adds	r3, #88	; 0x58
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d914      	bls.n	80045a4 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	440b      	add	r3, r1
 8004588:	3358      	adds	r3, #88	; 0x58
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	440b      	add	r3, r1
 800459c:	335c      	adds	r3, #92	; 0x5c
 800459e:	2204      	movs	r2, #4
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e009      	b.n	80045b8 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	440b      	add	r3, r1
 80045b2:	335c      	adds	r3, #92	; 0x5c
 80045b4:	2202      	movs	r2, #2
 80045b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	461a      	mov	r2, r3
 80045f8:	2302      	movs	r3, #2
 80045fa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	b2d8      	uxtb	r0, r3
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	335c      	adds	r3, #92	; 0x5c
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	4601      	mov	r1, r0
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f005 fb7e 	bl	8009d18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800461c:	bf00      	nop
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	0c5b      	lsrs	r3, r3, #17
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004658:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d003      	beq.n	8004668 <HCD_RXQLVL_IRQHandler+0x44>
 8004660:	2b05      	cmp	r3, #5
 8004662:	f000 8082 	beq.w	800476a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004666:	e083      	b.n	8004770 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d07f      	beq.n	800476e <HCD_RXQLVL_IRQHandler+0x14a>
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	440b      	add	r3, r1
 800467c:	3344      	adds	r3, #68	; 0x44
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d074      	beq.n	800476e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	3344      	adds	r3, #68	; 0x44
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	b292      	uxth	r2, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	f003 fd05 	bl	80080ae <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	440b      	add	r3, r1
 80046b2:	3344      	adds	r3, #68	; 0x44
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	18d1      	adds	r1, r2, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4403      	add	r3, r0
 80046c8:	3344      	adds	r3, #68	; 0x44
 80046ca:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	440b      	add	r3, r1
 80046da:	334c      	adds	r3, #76	; 0x4c
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	18d1      	adds	r1, r2, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4403      	add	r3, r0
 80046f0:	334c      	adds	r3, #76	; 0x4c
 80046f2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HCD_RXQLVL_IRQHandler+0x154>)
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d031      	beq.n	800476e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004720:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004728:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	461a      	mov	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	440b      	add	r3, r1
 800474a:	3350      	adds	r3, #80	; 0x50
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f083 0301 	eor.w	r3, r3, #1
 8004752:	b2d8      	uxtb	r0, r3
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	440b      	add	r3, r1
 8004762:	3350      	adds	r3, #80	; 0x50
 8004764:	4602      	mov	r2, r0
 8004766:	701a      	strb	r2, [r3, #0]
      break;
 8004768:	e001      	b.n	800476e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800476e:	bf00      	nop
  }
}
 8004770:	bf00      	nop
 8004772:	3728      	adds	r7, #40	; 0x28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	1ff80000 	.word	0x1ff80000

0800477c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d113      	bne.n	80047dc <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10a      	bne.n	80047d4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80047cc:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f005 fa86 	bl	8009ce0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d147      	bne.n	8004876 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d129      	bne.n	800484c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d113      	bne.n	8004828 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004806:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800480a:	d106      	bne.n	800481a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2102      	movs	r1, #2
 8004812:	4618      	mov	r0, r3
 8004814:	f003 fd48 	bl	80082a8 <USB_InitFSLSPClkSel>
 8004818:	e011      	b.n	800483e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2101      	movs	r1, #1
 8004820:	4618      	mov	r0, r3
 8004822:	f003 fd41 	bl	80082a8 <USB_InitFSLSPClkSel>
 8004826:	e00a      	b.n	800483e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004836:	461a      	mov	r2, r3
 8004838:	f64e 2360 	movw	r3, #60000	; 0xea60
 800483c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f005 fa78 	bl	8009d34 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f005 fa4b 	bl	8009ce0 <HAL_HCD_Connect_Callback>
 800484a:	e014      	b.n	8004876 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f005 fa7f 	bl	8009d50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004860:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004864:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004874:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b20      	cmp	r3, #32
 800487e:	d103      	bne.n	8004888 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f043 0320 	orr.w	r3, r3, #32
 8004886:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e081      	b.n	80049b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fb5e 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d107      	bne.n	8004916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	e006      	b.n	8004924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d104      	bne.n	8004936 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004948:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004958:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	ea42 0103 	orr.w	r1, r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	021a      	lsls	r2, r3, #8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69d9      	ldr	r1, [r3, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d138      	bne.n	8004a42 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049da:	2302      	movs	r3, #2
 80049dc:	e032      	b.n	8004a44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2224      	movs	r2, #36	; 0x24
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a0c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d139      	bne.n	8004ada <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e033      	b.n	8004adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aa2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e000      	b.n	8004adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
  }
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0af      	b.n	8004c5a <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc faac 	bl	800106c <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e00a      	b.n	8004b48 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	2200      	movs	r2, #0
 8004b40:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	3301      	adds	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b0f      	cmp	r3, #15
 8004b4c:	d9f1      	bls.n	8004b32 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0204 	orr.w	r2, r2, #4
 8004b5c:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_LCD_Init+0x17c>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6851      	ldr	r1, [r2, #4]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6892      	ldr	r2, [r2, #8]
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b76:	4311      	orrs	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	69d2      	ldr	r2, [r2, #28]
 8004b82:	4311      	orrs	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6a12      	ldr	r2, [r2, #32]
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6992      	ldr	r2, [r2, #24]
 8004b8e:	4311      	orrs	r1, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f862 	bl	8004c68 <LCD_WaitForSynchro>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_LCD_Init+0xca>
  {
    return status;
 8004bae:	7cfb      	ldrb	r3, [r7, #19]
 8004bb0:	e053      	b.n	8004c5a <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004bea:	f7fc fd85 	bl	80016f8 <HAL_GetTick>
 8004bee:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004bf0:	e00c      	b.n	8004c0c <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004bf2:	f7fc fd81 	bl	80016f8 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c00:	d904      	bls.n	8004c0c <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2208      	movs	r2, #8
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e026      	b.n	8004c5a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d1eb      	bne.n	8004bf2 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004c1a:	f7fc fd6d 	bl	80016f8 <HAL_GetTick>
 8004c1e:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004c20:	e00c      	b.n	8004c3c <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004c22:	f7fc fd69 	bl	80016f8 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c30:	d904      	bls.n	8004c3c <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2210      	movs	r2, #16
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e00e      	b.n	8004c5a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b10      	cmp	r3, #16
 8004c48:	d1eb      	bne.n	8004c22 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	fc00000e 	.word	0xfc00000e

08004c68 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004c70:	f7fc fd42 	bl	80016f8 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004c76:	e00c      	b.n	8004c92 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004c78:	f7fc fd3e 	bl	80016f8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c86:	d904      	bls.n	8004c92 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e007      	b.n	8004ca2 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d1eb      	bne.n	8004c78 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cba:	6013      	str	r3, [r2, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40007000 	.word	0x40007000

08004ccc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40007000 	.word	0x40007000

08004ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf6:	d130      	bne.n	8004d5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cf8:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d04:	d038      	beq.n	8004d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d0e:	4a1e      	ldr	r2, [pc, #120]	; (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d16:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2232      	movs	r2, #50	; 0x32
 8004d1c:	fb02 f303 	mul.w	r3, r2, r3
 8004d20:	4a1b      	ldr	r2, [pc, #108]	; (8004d90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	0c9b      	lsrs	r3, r3, #18
 8004d28:	3301      	adds	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d2c:	e002      	b.n	8004d34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d34:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d40:	d102      	bne.n	8004d48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f2      	bne.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d54:	d110      	bne.n	8004d78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e00f      	b.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d66:	d007      	beq.n	8004d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d68:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d70:	4a05      	ldr	r2, [pc, #20]	; (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	431bde83 	.word	0x431bde83

08004d94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da2:	6053      	str	r3, [r2, #4]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40007000 	.word	0x40007000

08004db4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004dbc:	f7fc fc9c 	bl	80016f8 <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e06f      	b.n	8004eac <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_QSPI_Init+0x28>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e067      	b.n	8004eac <HAL_QSPI_Init+0xf8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fc f9d9 	bl	80011b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004dfe:	f241 3188 	movw	r1, #5000	; 0x1388
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f858 	bl	8004eb8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	021a      	lsls	r2, r3, #8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2120      	movs	r1, #32
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f850 	bl	8004ed4 <QSPI_WaitFlagStateUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004e38:	7afb      	ldrb	r3, [r7, #11]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d131      	bne.n	8004ea2 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e48:	f023 0310 	bic.w	r3, r3, #16
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6852      	ldr	r2, [r2, #4]
 8004e50:	0611      	lsls	r1, r2, #24
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68d2      	ldr	r2, [r2, #12]
 8004e56:	4311      	orrs	r1, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_QSPI_Init+0x100>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6912      	ldr	r2, [r2, #16]
 8004e6e:	0411      	lsls	r1, r2, #16
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6952      	ldr	r2, [r2, #20]
 8004e74:	4311      	orrs	r1, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6992      	ldr	r2, [r2, #24]
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	430b      	orrs	r3, r1
 8004e82:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	ffe0f8fe 	.word	0xffe0f8fe

08004eb8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004ee4:	e01a      	b.n	8004f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d016      	beq.n	8004f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eee:	f7fc fc03 	bl	80016f8 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2204      	movs	r2, #4
 8004f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e00e      	b.n	8004f3a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf14      	ite	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	2300      	moveq	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1d6      	bne.n	8004ee6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e39d      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f56:	4ba4      	ldr	r3, [pc, #656]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f60:	4ba1      	ldr	r3, [pc, #644]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80e1 	beq.w	800513a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_RCC_OscConfig+0x4a>
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	f040 8088 	bne.w	8005096 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	f040 8084 	bne.w	8005096 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f8e:	4b96      	ldr	r3, [pc, #600]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x62>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e375      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	4b8f      	ldr	r3, [pc, #572]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x7c>
 8004fb6:	4b8c      	ldr	r3, [pc, #560]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fbe:	e005      	b.n	8004fcc <HAL_RCC_OscConfig+0x88>
 8004fc0:	4b89      	ldr	r3, [pc, #548]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d223      	bcs.n	8005018 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fd09 	bl	80059ec <RCC_SetFlashLatencyFromMSIRange>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e356      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fe4:	4b80      	ldr	r3, [pc, #512]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a7f      	ldr	r2, [pc, #508]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004fea:	f043 0308 	orr.w	r3, r3, #8
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	4b7d      	ldr	r3, [pc, #500]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	497a      	ldr	r1, [pc, #488]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005002:	4b79      	ldr	r3, [pc, #484]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	4975      	ldr	r1, [pc, #468]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
 8005016:	e022      	b.n	800505e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005018:	4b73      	ldr	r3, [pc, #460]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a72      	ldr	r2, [pc, #456]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 800501e:	f043 0308 	orr.w	r3, r3, #8
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	4b70      	ldr	r3, [pc, #448]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	496d      	ldr	r1, [pc, #436]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005036:	4b6c      	ldr	r3, [pc, #432]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	4968      	ldr	r1, [pc, #416]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005046:	4313      	orrs	r3, r2
 8005048:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fccc 	bl	80059ec <RCC_SetFlashLatencyFromMSIRange>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e319      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800505e:	f000 fc03 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8005062:	4601      	mov	r1, r0
 8005064:	4b60      	ldr	r3, [pc, #384]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	4a5f      	ldr	r2, [pc, #380]	; (80051ec <HAL_RCC_OscConfig+0x2a8>)
 8005070:	5cd3      	ldrb	r3, [r2, r3]
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	fa21 f303 	lsr.w	r3, r1, r3
 800507a:	4a5d      	ldr	r2, [pc, #372]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800507e:	4b5d      	ldr	r3, [pc, #372]	; (80051f4 <HAL_RCC_OscConfig+0x2b0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fc faec 	bl	8001660 <HAL_InitTick>
 8005088:	4603      	mov	r3, r0
 800508a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d052      	beq.n	8005138 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	e2fd      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d032      	beq.n	8005104 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800509e:	4b52      	ldr	r3, [pc, #328]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a51      	ldr	r2, [pc, #324]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050aa:	f7fc fb25 	bl	80016f8 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050b2:	f7fc fb21 	bl	80016f8 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e2e6      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050c4:	4b48      	ldr	r3, [pc, #288]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d0:	4b45      	ldr	r3, [pc, #276]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a44      	ldr	r2, [pc, #272]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050d6:	f043 0308 	orr.w	r3, r3, #8
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b42      	ldr	r3, [pc, #264]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	493f      	ldr	r1, [pc, #252]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ee:	4b3e      	ldr	r3, [pc, #248]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	493a      	ldr	r1, [pc, #232]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	604b      	str	r3, [r1, #4]
 8005102:	e01a      	b.n	800513a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005104:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005110:	f7fc faf2 	bl	80016f8 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005118:	f7fc faee 	bl	80016f8 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e2b3      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800512a:	4b2f      	ldr	r3, [pc, #188]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x1d4>
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d074      	beq.n	8005230 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d005      	beq.n	8005158 <HAL_RCC_OscConfig+0x214>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d10e      	bne.n	8005170 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b03      	cmp	r3, #3
 8005156:	d10b      	bne.n	8005170 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005158:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d064      	beq.n	800522e <HAL_RCC_OscConfig+0x2ea>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d160      	bne.n	800522e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e290      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005178:	d106      	bne.n	8005188 <HAL_RCC_OscConfig+0x244>
 800517a:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e01d      	b.n	80051c4 <HAL_RCC_OscConfig+0x280>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0x268>
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 8005198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a11      	ldr	r2, [pc, #68]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e00b      	b.n	80051c4 <HAL_RCC_OscConfig+0x280>
 80051ac:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0d      	ldr	r2, [pc, #52]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <HAL_RCC_OscConfig+0x2a4>)
 80051be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01c      	beq.n	8005206 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fc fa94 	bl	80016f8 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d2:	e011      	b.n	80051f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fc fa90 	bl	80016f8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d90a      	bls.n	80051f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e255      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000
 80051ec:	0800a2d4 	.word	0x0800a2d4
 80051f0:	20000000 	.word	0x20000000
 80051f4:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051f8:	4bae      	ldr	r3, [pc, #696]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0e7      	beq.n	80051d4 <HAL_RCC_OscConfig+0x290>
 8005204:	e014      	b.n	8005230 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7fc fa77 	bl	80016f8 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800520e:	f7fc fa73 	bl	80016f8 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b64      	cmp	r3, #100	; 0x64
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e238      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005220:	4ba4      	ldr	r3, [pc, #656]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x2ca>
 800522c:	e000      	b.n	8005230 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d060      	beq.n	80052fe <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b04      	cmp	r3, #4
 8005240:	d005      	beq.n	800524e <HAL_RCC_OscConfig+0x30a>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b0c      	cmp	r3, #12
 8005246:	d119      	bne.n	800527c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d116      	bne.n	800527c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800524e:	4b99      	ldr	r3, [pc, #612]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_RCC_OscConfig+0x322>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e215      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005266:	4b93      	ldr	r3, [pc, #588]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	061b      	lsls	r3, r3, #24
 8005274:	498f      	ldr	r1, [pc, #572]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527a:	e040      	b.n	80052fe <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d023      	beq.n	80052cc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005284:	4b8b      	ldr	r3, [pc, #556]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a8a      	ldr	r2, [pc, #552]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 800528a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fc fa32 	bl	80016f8 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005298:	f7fc fa2e 	bl	80016f8 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1f3      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052aa:	4b82      	ldr	r3, [pc, #520]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b6:	4b7f      	ldr	r3, [pc, #508]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	497b      	ldr	r1, [pc, #492]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	604b      	str	r3, [r1, #4]
 80052ca:	e018      	b.n	80052fe <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052cc:	4b79      	ldr	r3, [pc, #484]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a78      	ldr	r2, [pc, #480]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80052d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fc fa0e 	bl	80016f8 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e0:	f7fc fa0a 	bl	80016f8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e1cf      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052f2:	4b70      	ldr	r3, [pc, #448]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d03c      	beq.n	8005384 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01c      	beq.n	800534c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005312:	4b68      	ldr	r3, [pc, #416]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005318:	4a66      	ldr	r2, [pc, #408]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005322:	f7fc f9e9 	bl	80016f8 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800532a:	f7fc f9e5 	bl	80016f8 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e1aa      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800533c:	4b5d      	ldr	r3, [pc, #372]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 800533e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0ef      	beq.n	800532a <HAL_RCC_OscConfig+0x3e6>
 800534a:	e01b      	b.n	8005384 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534c:	4b59      	ldr	r3, [pc, #356]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	4a58      	ldr	r2, [pc, #352]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fc f9cc 	bl	80016f8 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005364:	f7fc f9c8 	bl	80016f8 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e18d      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005376:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ef      	bne.n	8005364 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80a5 	beq.w	80054dc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005392:	2300      	movs	r3, #0
 8005394:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005396:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10d      	bne.n	80053be <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a2:	4b44      	ldr	r3, [pc, #272]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	4a43      	ldr	r2, [pc, #268]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80053a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ac:	6593      	str	r3, [r2, #88]	; 0x58
 80053ae:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ba:	2301      	movs	r3, #1
 80053bc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053be:	4b3e      	ldr	r3, [pc, #248]	; (80054b8 <HAL_RCC_OscConfig+0x574>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d118      	bne.n	80053fc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ca:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <HAL_RCC_OscConfig+0x574>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a3a      	ldr	r2, [pc, #232]	; (80054b8 <HAL_RCC_OscConfig+0x574>)
 80053d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053d6:	f7fc f98f 	bl	80016f8 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053de:	f7fc f98b 	bl	80016f8 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e150      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f0:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <HAL_RCC_OscConfig+0x574>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d108      	bne.n	8005416 <HAL_RCC_OscConfig+0x4d2>
 8005404:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005414:	e024      	b.n	8005460 <HAL_RCC_OscConfig+0x51c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b05      	cmp	r3, #5
 800541c:	d110      	bne.n	8005440 <HAL_RCC_OscConfig+0x4fc>
 800541e:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005426:	f043 0304 	orr.w	r3, r3, #4
 800542a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800542e:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800543e:	e00f      	b.n	8005460 <HAL_RCC_OscConfig+0x51c>
 8005440:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005450:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005458:	f023 0304 	bic.w	r3, r3, #4
 800545c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d016      	beq.n	8005496 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005468:	f7fc f946 	bl	80016f8 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546e:	e00a      	b.n	8005486 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005470:	f7fc f942 	bl	80016f8 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e105      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <HAL_RCC_OscConfig+0x570>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ed      	beq.n	8005470 <HAL_RCC_OscConfig+0x52c>
 8005494:	e019      	b.n	80054ca <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fc f92f 	bl	80016f8 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800549c:	e00e      	b.n	80054bc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fc f92b 	bl	80016f8 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d905      	bls.n	80054bc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e0ee      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054bc:	4b77      	ldr	r3, [pc, #476]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e9      	bne.n	800549e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ca:	7ffb      	ldrb	r3, [r7, #31]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d105      	bne.n	80054dc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d0:	4b72      	ldr	r3, [pc, #456]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	4a71      	ldr	r2, [pc, #452]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80054d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80d5 	beq.w	8005690 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	f000 808e 	beq.w	800560a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d15b      	bne.n	80055ae <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f6:	4b69      	ldr	r3, [pc, #420]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a68      	ldr	r2, [pc, #416]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80054fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fc f8f9 	bl	80016f8 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800550a:	f7fc f8f5 	bl	80016f8 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0ba      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551c:	4b5f      	ldr	r3, [pc, #380]	; (800569c <HAL_RCC_OscConfig+0x758>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f0      	bne.n	800550a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005528:	4b5c      	ldr	r3, [pc, #368]	; (800569c <HAL_RCC_OscConfig+0x758>)
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	4b5c      	ldr	r3, [pc, #368]	; (80056a0 <HAL_RCC_OscConfig+0x75c>)
 800552e:	4013      	ands	r3, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005538:	3a01      	subs	r2, #1
 800553a:	0112      	lsls	r2, r2, #4
 800553c:	4311      	orrs	r1, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005542:	0212      	lsls	r2, r2, #8
 8005544:	4311      	orrs	r1, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800554a:	0852      	lsrs	r2, r2, #1
 800554c:	3a01      	subs	r2, #1
 800554e:	0552      	lsls	r2, r2, #21
 8005550:	4311      	orrs	r1, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005556:	0852      	lsrs	r2, r2, #1
 8005558:	3a01      	subs	r2, #1
 800555a:	0652      	lsls	r2, r2, #25
 800555c:	4311      	orrs	r1, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005562:	0912      	lsrs	r2, r2, #4
 8005564:	0452      	lsls	r2, r2, #17
 8005566:	430a      	orrs	r2, r1
 8005568:	494c      	ldr	r1, [pc, #304]	; (800569c <HAL_RCC_OscConfig+0x758>)
 800556a:	4313      	orrs	r3, r2
 800556c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800556e:	4b4b      	ldr	r3, [pc, #300]	; (800569c <HAL_RCC_OscConfig+0x758>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4a      	ldr	r2, [pc, #296]	; (800569c <HAL_RCC_OscConfig+0x758>)
 8005574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005578:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800557a:	4b48      	ldr	r3, [pc, #288]	; (800569c <HAL_RCC_OscConfig+0x758>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	4a47      	ldr	r2, [pc, #284]	; (800569c <HAL_RCC_OscConfig+0x758>)
 8005580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005584:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fc f8b7 	bl	80016f8 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558e:	f7fc f8b3 	bl	80016f8 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e078      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a0:	4b3e      	ldr	r3, [pc, #248]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0x64a>
 80055ac:	e070      	b.n	8005690 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ae:	4b3b      	ldr	r3, [pc, #236]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a3a      	ldr	r2, [pc, #232]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80055ba:	4b38      	ldr	r3, [pc, #224]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d105      	bne.n	80055d2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80055c6:	4b35      	ldr	r3, [pc, #212]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	4a34      	ldr	r2, [pc, #208]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055cc:	f023 0303 	bic.w	r3, r3, #3
 80055d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055d2:	4b32      	ldr	r3, [pc, #200]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	4a31      	ldr	r2, [pc, #196]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fc f889 	bl	80016f8 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ea:	f7fc f885 	bl	80016f8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e04a      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055fc:	4b27      	ldr	r3, [pc, #156]	; (800569c <HAL_RCC_OscConfig+0x758>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f0      	bne.n	80055ea <HAL_RCC_OscConfig+0x6a6>
 8005608:	e042      	b.n	8005690 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e03d      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005616:	4b21      	ldr	r3, [pc, #132]	; (800569c <HAL_RCC_OscConfig+0x758>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 0203 	and.w	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	429a      	cmp	r2, r3
 8005628:	d130      	bne.n	800568c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	3b01      	subs	r3, #1
 8005636:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d127      	bne.n	800568c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005648:	429a      	cmp	r2, r3
 800564a:	d11f      	bne.n	800568c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005656:	2a07      	cmp	r2, #7
 8005658:	bf14      	ite	ne
 800565a:	2201      	movne	r2, #1
 800565c:	2200      	moveq	r2, #0
 800565e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005660:	4293      	cmp	r3, r2
 8005662:	d113      	bne.n	800568c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	3b01      	subs	r3, #1
 8005672:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d109      	bne.n	800568c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	3b01      	subs	r3, #1
 8005686:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d001      	beq.n	8005690 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000
 80056a0:	f99d808c 	.word	0xf99d808c

080056a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0c8      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b8:	4b66      	ldr	r3, [pc, #408]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d910      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b63      	ldr	r3, [pc, #396]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 0207 	bic.w	r2, r3, #7
 80056ce:	4961      	ldr	r1, [pc, #388]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b5f      	ldr	r3, [pc, #380]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0b0      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d04c      	beq.n	800578e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d107      	bne.n	800570c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056fc:	4b56      	ldr	r3, [pc, #344]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d121      	bne.n	800574c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e09e      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d107      	bne.n	8005724 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005714:	4b50      	ldr	r3, [pc, #320]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d115      	bne.n	800574c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e092      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800572c:	4b4a      	ldr	r3, [pc, #296]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e086      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800573c:	4b46      	ldr	r3, [pc, #280]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e07e      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800574c:	4b42      	ldr	r3, [pc, #264]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 0203 	bic.w	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	493f      	ldr	r1, [pc, #252]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fb ffcb 	bl	80016f8 <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005764:	e00a      	b.n	800577c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005766:	f7fb ffc7 	bl	80016f8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e066      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577c:	4b36      	ldr	r3, [pc, #216]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 020c 	and.w	r2, r3, #12
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	429a      	cmp	r2, r3
 800578c:	d1eb      	bne.n	8005766 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	492c      	ldr	r1, [pc, #176]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ac:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d210      	bcs.n	80057dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b26      	ldr	r3, [pc, #152]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 0207 	bic.w	r2, r3, #7
 80057c2:	4924      	ldr	r1, [pc, #144]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e036      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e8:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4918      	ldr	r1, [pc, #96]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005806:	4b14      	ldr	r3, [pc, #80]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4910      	ldr	r1, [pc, #64]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800581a:	f000 f825 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 800581e:	4601      	mov	r1, r0
 8005820:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	4a0c      	ldr	r2, [pc, #48]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	5cd3      	ldrb	r3, [r2, r3]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	fa21 f303 	lsr.w	r3, r1, r3
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fb ff0e 	bl	8001660 <HAL_InitTick>
 8005844:	4603      	mov	r3, r0
 8005846:	72fb      	strb	r3, [r7, #11]

  return status;
 8005848:	7afb      	ldrb	r3, [r7, #11]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40022000 	.word	0x40022000
 8005858:	40021000 	.word	0x40021000
 800585c:	0800a2d4 	.word	0x0800a2d4
 8005860:	20000000 	.word	0x20000000
 8005864:	20000004 	.word	0x20000004

08005868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005868:	b480      	push	{r7}
 800586a:	b089      	sub	sp, #36	; 0x24
 800586c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005876:	4b3d      	ldr	r3, [pc, #244]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005880:	4b3a      	ldr	r3, [pc, #232]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x34>
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	2b0c      	cmp	r3, #12
 8005894:	d121      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d11e      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800589c:	4b33      	ldr	r3, [pc, #204]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058a8:	4b30      	ldr	r3, [pc, #192]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 80058aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e005      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058b8:	4b2c      	ldr	r3, [pc, #176]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058c4:	4a2a      	ldr	r2, [pc, #168]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d102      	bne.n	80058e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058e0:	4b24      	ldr	r3, [pc, #144]	; (8005974 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e004      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058ec:	4b22      	ldr	r3, [pc, #136]	; (8005978 <HAL_RCC_GetSysClockFreq+0x110>)
 80058ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d133      	bne.n	800595e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d002      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0xa4>
 8005906:	2b03      	cmp	r3, #3
 8005908:	d003      	beq.n	8005912 <HAL_RCC_GetSysClockFreq+0xaa>
 800590a:	e005      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <HAL_RCC_GetSysClockFreq+0x10c>)
 800590e:	617b      	str	r3, [r7, #20]
      break;
 8005910:	e005      	b.n	800591e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005912:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_RCC_GetSysClockFreq+0x110>)
 8005914:	617b      	str	r3, [r7, #20]
      break;
 8005916:	e002      	b.n	800591e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	617b      	str	r3, [r7, #20]
      break;
 800591c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	3301      	adds	r3, #1
 800592a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	fb02 f203 	mul.w	r2, r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_GetSysClockFreq+0x104>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	0e5b      	lsrs	r3, r3, #25
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	3301      	adds	r3, #1
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800595e:	69bb      	ldr	r3, [r7, #24]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3724      	adds	r7, #36	; 0x24
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40021000 	.word	0x40021000
 8005970:	0800a2ec 	.word	0x0800a2ec
 8005974:	00f42400 	.word	0x00f42400
 8005978:	007a1200 	.word	0x007a1200

0800597c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_RCC_GetHCLKFreq+0x14>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000000 	.word	0x20000000

08005994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005998:	f7ff fff0 	bl	800597c <HAL_RCC_GetHCLKFreq>
 800599c:	4601      	mov	r1, r0
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	4a04      	ldr	r2, [pc, #16]	; (80059bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059aa:	5cd3      	ldrb	r3, [r2, r3]
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40021000 	.word	0x40021000
 80059bc:	0800a2e4 	.word	0x0800a2e4

080059c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059c4:	f7ff ffda 	bl	800597c <HAL_RCC_GetHCLKFreq>
 80059c8:	4601      	mov	r1, r0
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	0adb      	lsrs	r3, r3, #11
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059d6:	5cd3      	ldrb	r3, [r2, r3]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40021000 	.word	0x40021000
 80059e8:	0800a2e4 	.word	0x0800a2e4

080059ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059f8:	4b2a      	ldr	r3, [pc, #168]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a04:	f7ff f962 	bl	8004ccc <HAL_PWREx_GetVoltageRange>
 8005a08:	6178      	str	r0, [r7, #20]
 8005a0a:	e014      	b.n	8005a36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a0c:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	4a24      	ldr	r2, [pc, #144]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a16:	6593      	str	r3, [r2, #88]	; 0x58
 8005a18:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a24:	f7ff f952 	bl	8004ccc <HAL_PWREx_GetVoltageRange>
 8005a28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3c:	d10b      	bne.n	8005a56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d919      	bls.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2ba0      	cmp	r3, #160	; 0xa0
 8005a48:	d902      	bls.n	8005a50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	e013      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a50:	2301      	movs	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	e010      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d902      	bls.n	8005a62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	e00a      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b80      	cmp	r3, #128	; 0x80
 8005a66:	d102      	bne.n	8005a6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a68:	2302      	movs	r3, #2
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	e004      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b70      	cmp	r3, #112	; 0x70
 8005a72:	d101      	bne.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a74:	2301      	movs	r3, #1
 8005a76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f023 0207 	bic.w	r2, r3, #7
 8005a80:	4909      	ldr	r1, [pc, #36]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a88:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d001      	beq.n	8005a9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40022000 	.word	0x40022000

08005aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab8:	2300      	movs	r3, #0
 8005aba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d03f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad0:	d01c      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad6:	d802      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00e      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005adc:	e01f      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005ae4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ae8:	d01c      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005aea:	e018      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005aec:	4b85      	ldr	r3, [pc, #532]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4a84      	ldr	r2, [pc, #528]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005af8:	e015      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 ff41 	bl	8006988 <RCCEx_PLLSAI1_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b0a:	e00c      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3320      	adds	r3, #32
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 f828 	bl	8006b68 <RCCEx_PLLSAI2_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b1c:	e003      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	74fb      	strb	r3, [r7, #19]
      break;
 8005b22:	e000      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b2c:	4b75      	ldr	r3, [pc, #468]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3a:	4972      	ldr	r1, [pc, #456]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b42:	e001      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	7cfb      	ldrb	r3, [r7, #19]
 8005b46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d03f      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b5c:	d01c      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b62:	d802      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00e      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005b68:	e01f      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6e:	d003      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005b70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b74:	d01c      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005b76:	e018      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b78:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4a61      	ldr	r2, [pc, #388]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b84:	e015      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fefb 	bl	8006988 <RCCEx_PLLSAI1_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b96:	e00c      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3320      	adds	r3, #32
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 ffe2 	bl	8006b68 <RCCEx_PLLSAI2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ba8:	e003      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	74fb      	strb	r3, [r7, #19]
      break;
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10b      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bb8:	4b52      	ldr	r3, [pc, #328]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc6:	494f      	ldr	r1, [pc, #316]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bce:	e001      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80a0 	beq.w	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005be2:	2300      	movs	r3, #0
 8005be4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005be6:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfc:	4b41      	ldr	r3, [pc, #260]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c00:	4a40      	ldr	r2, [pc, #256]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c06:	6593      	str	r3, [r2, #88]	; 0x58
 8005c08:	4b3e      	ldr	r3, [pc, #248]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c10:	60bb      	str	r3, [r7, #8]
 8005c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c14:	2301      	movs	r3, #1
 8005c16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c18:	4b3b      	ldr	r3, [pc, #236]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3a      	ldr	r2, [pc, #232]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c24:	f7fb fd68 	bl	80016f8 <HAL_GetTick>
 8005c28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c2a:	e009      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2c:	f7fb fd64 	bl	80016f8 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d902      	bls.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	74fb      	strb	r3, [r7, #19]
        break;
 8005c3e:	e005      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c40:	4b31      	ldr	r3, [pc, #196]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ef      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005c4c:	7cfb      	ldrb	r3, [r7, #19]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d15c      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c52:	4b2c      	ldr	r3, [pc, #176]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01f      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d019      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c70:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c7c:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c82:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c92:	4a1c      	ldr	r2, [pc, #112]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d016      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cae:	f7fb fd23 	bl	80016f8 <HAL_GetTick>
 8005cb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb4:	e00b      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb6:	f7fb fd1f 	bl	80016f8 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d902      	bls.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	74fb      	strb	r3, [r7, #19]
            break;
 8005ccc:	e006      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ec      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005cdc:	7cfb      	ldrb	r3, [r7, #19]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce2:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf2:	4904      	ldr	r1, [pc, #16]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cfa:	e009      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cfc:	7cfb      	ldrb	r3, [r7, #19]
 8005cfe:	74bb      	strb	r3, [r7, #18]
 8005d00:	e006      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005d02:	bf00      	nop
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	7cfb      	ldrb	r3, [r7, #19]
 8005d0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d10:	7c7b      	ldrb	r3, [r7, #17]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d105      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d16:	4b9e      	ldr	r3, [pc, #632]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	4a9d      	ldr	r2, [pc, #628]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d2e:	4b98      	ldr	r3, [pc, #608]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f023 0203 	bic.w	r2, r3, #3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	4994      	ldr	r1, [pc, #592]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d50:	4b8f      	ldr	r3, [pc, #572]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f023 020c 	bic.w	r2, r3, #12
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	498c      	ldr	r1, [pc, #560]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d72:	4b87      	ldr	r3, [pc, #540]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	4983      	ldr	r1, [pc, #524]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d94:	4b7e      	ldr	r3, [pc, #504]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	497b      	ldr	r1, [pc, #492]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005db6:	4b76      	ldr	r3, [pc, #472]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	4972      	ldr	r1, [pc, #456]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dd8:	4b6d      	ldr	r3, [pc, #436]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de6:	496a      	ldr	r1, [pc, #424]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dfa:	4b65      	ldr	r3, [pc, #404]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	4961      	ldr	r1, [pc, #388]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e1c:	4b5c      	ldr	r3, [pc, #368]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	4959      	ldr	r1, [pc, #356]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e3e:	4b54      	ldr	r3, [pc, #336]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4c:	4950      	ldr	r1, [pc, #320]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e60:	4b4b      	ldr	r3, [pc, #300]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	4948      	ldr	r1, [pc, #288]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e82:	4b43      	ldr	r3, [pc, #268]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e90:	493f      	ldr	r1, [pc, #252]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d028      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea4:	4b3a      	ldr	r3, [pc, #232]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb2:	4937      	ldr	r1, [pc, #220]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec2:	d106      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec4:	4b32      	ldr	r3, [pc, #200]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4a31      	ldr	r2, [pc, #196]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ece:	60d3      	str	r3, [r2, #12]
 8005ed0:	e011      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eda:	d10c      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fd50 	bl	8006988 <RCCEx_PLLSAI1_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005eec:	7cfb      	ldrb	r3, [r7, #19]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005ef2:	7cfb      	ldrb	r3, [r7, #19]
 8005ef4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d028      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f02:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	491f      	ldr	r1, [pc, #124]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f20:	d106      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f22:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	4a1a      	ldr	r2, [pc, #104]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2c:	60d3      	str	r3, [r2, #12]
 8005f2e:	e011      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f38:	d10c      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fd21 	bl	8006988 <RCCEx_PLLSAI1_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005f50:	7cfb      	ldrb	r3, [r7, #19]
 8005f52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d02b      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6e:	4908      	ldr	r1, [pc, #32]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f7e:	d109      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f80:	4b03      	ldr	r3, [pc, #12]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a02      	ldr	r2, [pc, #8]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f8a:	60d3      	str	r3, [r2, #12]
 8005f8c:	e014      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005f8e:	bf00      	nop
 8005f90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fcef 	bl	8006988 <RCCEx_PLLSAI1_Config>
 8005faa:	4603      	mov	r3, r0
 8005fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fae:	7cfb      	ldrb	r3, [r7, #19]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005fb4:	7cfb      	ldrb	r3, [r7, #19]
 8005fb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d02f      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fc4:	4b2b      	ldr	r3, [pc, #172]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fd2:	4928      	ldr	r1, [pc, #160]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fe2:	d10d      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	2102      	movs	r1, #2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fccc 	bl	8006988 <RCCEx_PLLSAI1_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d014      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005ffa:	7cfb      	ldrb	r3, [r7, #19]
 8005ffc:	74bb      	strb	r3, [r7, #18]
 8005ffe:	e011      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006008:	d10c      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3320      	adds	r3, #32
 800600e:	2102      	movs	r1, #2
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fda9 	bl	8006b68 <RCCEx_PLLSAI2_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800601a:	7cfb      	ldrb	r3, [r7, #19]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006020:	7cfb      	ldrb	r3, [r7, #19]
 8006022:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006030:	4b10      	ldr	r3, [pc, #64]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603e:	490d      	ldr	r1, [pc, #52]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006062:	4904      	ldr	r1, [pc, #16]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800606a:	7cbb      	ldrb	r3, [r7, #18]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40021000 	.word	0x40021000

08006078 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800608a:	d137      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800608c:	4bb8      	ldr	r3, [pc, #736]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006096:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609e:	d014      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80060a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a4:	d01e      	beq.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060aa:	d001      	beq.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80060ac:	f000 bc53 	b.w	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060b0:	4baf      	ldr	r3, [pc, #700]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	f040 8446 	bne.w	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 80060c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c4:	61fb      	str	r3, [r7, #28]
      break;
 80060c6:	f000 bc41 	b.w	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80060ca:	4ba9      	ldr	r3, [pc, #676]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80060cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	f040 843b 	bne.w	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 80060da:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80060de:	61fb      	str	r3, [r7, #28]
      break;
 80060e0:	f000 bc36 	b.w	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060e4:	4ba2      	ldr	r3, [pc, #648]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f0:	f040 8430 	bne.w	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 80060f4:	4b9f      	ldr	r3, [pc, #636]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80060f6:	61fb      	str	r3, [r7, #28]
      break;
 80060f8:	f000 bc2c 	b.w	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060fc:	4b9c      	ldr	r3, [pc, #624]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d023      	beq.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800610c:	2b03      	cmp	r3, #3
 800610e:	d02e      	beq.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006110:	2b01      	cmp	r3, #1
 8006112:	d139      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006114:	4b96      	ldr	r3, [pc, #600]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b02      	cmp	r3, #2
 800611e:	d116      	bne.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006120:	4b93      	ldr	r3, [pc, #588]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800612c:	4b90      	ldr	r3, [pc, #576]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	091b      	lsrs	r3, r3, #4
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	e005      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8006138:	4b8d      	ldr	r3, [pc, #564]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800613a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	4a8c      	ldr	r2, [pc, #560]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800614c:	e01f      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
      break;
 8006152:	e01c      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006154:	4b86      	ldr	r3, [pc, #536]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800615c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006160:	d102      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8006162:	4b86      	ldr	r3, [pc, #536]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8006164:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006166:	e012      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
      break;
 800616c:	e00f      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800616e:	4b80      	ldr	r3, [pc, #512]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800617a:	d102      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 800617c:	4b80      	ldr	r3, [pc, #512]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800617e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006180:	e005      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	61bb      	str	r3, [r7, #24]
      break;
 8006186:	e002      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	61bb      	str	r3, [r7, #24]
      break;
 800618c:	bf00      	nop
    }

    switch(PeriphClk)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006194:	f000 8337 	beq.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8006198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619c:	d825      	bhi.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 800619e:	2b10      	cmp	r3, #16
 80061a0:	f000 81df 	beq.w	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d80f      	bhi.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	f000 8128 	beq.w	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d803      	bhi.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	f000 80ec 	beq.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80061b8:	e3cd      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	f000 8169 	beq.w	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	f000 819a 	beq.w	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 80061c6:	e3c6      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	f000 82b3 	beq.w	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d803      	bhi.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	f000 81fd 	beq.w	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 80061d8:	e3bd      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	f000 82cd 	beq.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80061e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e4:	f000 82ec 	beq.w	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 80061e8:	e3b5      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80061ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ee:	f000 822d 	beq.w	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80061f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f6:	d811      	bhi.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80061f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fc:	d021      	beq.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80061fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006202:	d804      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006208:	f000 833e 	beq.w	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 800620c:	e3a3      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d01d      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006218:	d021      	beq.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 800621a:	e39c      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800621c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006220:	f000 8277 	beq.w	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006228:	d804      	bhi.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622e:	f000 8371 	beq.w	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8006232:	e390      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8006234:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006238:	d011      	beq.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800623a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800623e:	d00e      	beq.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8006240:	e389      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006242:	69b9      	ldr	r1, [r7, #24]
 8006244:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006248:	f000 fd68 	bl	8006d1c <RCCEx_GetSAIxPeriphCLKFreq>
 800624c:	61f8      	str	r0, [r7, #28]
      break;
 800624e:	e382      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006250:	69b9      	ldr	r1, [r7, #24]
 8006252:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006256:	f000 fd61 	bl	8006d1c <RCCEx_GetSAIxPeriphCLKFreq>
 800625a:	61f8      	str	r0, [r7, #28]
      break;
 800625c:	e37b      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800625e:	4b44      	ldr	r3, [pc, #272]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006268:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006270:	d023      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8006272:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006276:	d003      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800627c:	d04a      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 800627e:	e086      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006280:	4b3b      	ldr	r3, [pc, #236]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b02      	cmp	r3, #2
 800628a:	d17b      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800628c:	4b38      	ldr	r3, [pc, #224]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006298:	4b35      	ldr	r3, [pc, #212]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	e005      	b.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80062a4:	4b32      	ldr	r3, [pc, #200]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	4a31      	ldr	r2, [pc, #196]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80062b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b6:	61fb      	str	r3, [r7, #28]
          break;
 80062b8:	e064      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80062ba:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062c6:	d15f      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80062c8:	4b29      	ldr	r3, [pc, #164]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d4:	d158      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062d6:	4b26      	ldr	r3, [pc, #152]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	fb02 f203 	mul.w	r2, r2, r3
 80062ea:	4b21      	ldr	r3, [pc, #132]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	3301      	adds	r3, #1
 80062f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80062fc:	4b1c      	ldr	r3, [pc, #112]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	0d5b      	lsrs	r3, r3, #21
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	3301      	adds	r3, #1
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	61fb      	str	r3, [r7, #28]
          break;
 8006312:	e039      	b.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006314:	4b16      	ldr	r3, [pc, #88]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006320:	d134      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006322:	4b13      	ldr	r3, [pc, #76]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800632a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632e:	d12d      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	fb02 f203 	mul.w	r2, r2, r3
 8006344:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	3301      	adds	r3, #1
 8006350:	fbb2 f3f3 	udiv	r3, r2, r3
 8006354:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	0d5b      	lsrs	r3, r3, #21
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	3301      	adds	r3, #1
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	61fb      	str	r3, [r7, #28]
          break;
 800636c:	e00e      	b.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800636e:	bf00      	nop
 8006370:	40021000 	.word	0x40021000
 8006374:	0003d090 	.word	0x0003d090
 8006378:	0800a2ec 	.word	0x0800a2ec
 800637c:	00f42400 	.word	0x00f42400
 8006380:	007a1200 	.word	0x007a1200
          break;
 8006384:	bf00      	nop
 8006386:	e2e6      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006388:	bf00      	nop
 800638a:	e2e4      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800638c:	bf00      	nop
        break;
 800638e:	e2e2      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006390:	4bac      	ldr	r3, [pc, #688]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d827      	bhi.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80063a2:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	080063c1 	.word	0x080063c1
 80063b0:	080063c9 	.word	0x080063c9
 80063b4:	080063dd 	.word	0x080063dd
          frequency = HAL_RCC_GetPCLK2Freq();
 80063b8:	f7ff fb02 	bl	80059c0 <HAL_RCC_GetPCLK2Freq>
 80063bc:	61f8      	str	r0, [r7, #28]
          break;
 80063be:	e01d      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 80063c0:	f7ff fa52 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 80063c4:	61f8      	str	r0, [r7, #28]
          break;
 80063c6:	e019      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063c8:	4b9e      	ldr	r3, [pc, #632]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d4:	d10f      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 80063d6:	4b9c      	ldr	r3, [pc, #624]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80063d8:	61fb      	str	r3, [r7, #28]
          break;
 80063da:	e00c      	b.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063dc:	4b99      	ldr	r3, [pc, #612]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d107      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 80063ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ee:	61fb      	str	r3, [r7, #28]
          break;
 80063f0:	e003      	b.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 80063f2:	bf00      	nop
 80063f4:	e2af      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80063f6:	bf00      	nop
 80063f8:	e2ad      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80063fa:	bf00      	nop
        break;
 80063fc:	e2ab      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80063fe:	4b91      	ldr	r3, [pc, #580]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	f003 030c 	and.w	r3, r3, #12
 8006408:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b0c      	cmp	r3, #12
 800640e:	d83a      	bhi.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	0800644d 	.word	0x0800644d
 800641c:	08006487 	.word	0x08006487
 8006420:	08006487 	.word	0x08006487
 8006424:	08006487 	.word	0x08006487
 8006428:	08006455 	.word	0x08006455
 800642c:	08006487 	.word	0x08006487
 8006430:	08006487 	.word	0x08006487
 8006434:	08006487 	.word	0x08006487
 8006438:	0800645d 	.word	0x0800645d
 800643c:	08006487 	.word	0x08006487
 8006440:	08006487 	.word	0x08006487
 8006444:	08006487 	.word	0x08006487
 8006448:	08006471 	.word	0x08006471
          frequency = HAL_RCC_GetPCLK1Freq();
 800644c:	f7ff faa2 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006450:	61f8      	str	r0, [r7, #28]
          break;
 8006452:	e01d      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8006454:	f7ff fa08 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8006458:	61f8      	str	r0, [r7, #28]
          break;
 800645a:	e019      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800645c:	4b79      	ldr	r3, [pc, #484]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006468:	d10f      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 800646a:	4b77      	ldr	r3, [pc, #476]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800646c:	61fb      	str	r3, [r7, #28]
          break;
 800646e:	e00c      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006470:	4b74      	ldr	r3, [pc, #464]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b02      	cmp	r3, #2
 800647c:	d107      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	61fb      	str	r3, [r7, #28]
          break;
 8006484:	e003      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8006486:	bf00      	nop
 8006488:	e265      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800648a:	bf00      	nop
 800648c:	e263      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800648e:	bf00      	nop
        break;
 8006490:	e261      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006492:	4b6c      	ldr	r3, [pc, #432]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006498:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800649c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d00d      	beq.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d802      	bhi.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 80064ac:	e024      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80064b2:	2b30      	cmp	r3, #48	; 0x30
 80064b4:	d012      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 80064b6:	e01f      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064b8:	f7ff fa6c 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 80064bc:	61f8      	str	r0, [r7, #28]
          break;
 80064be:	e01b      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 80064c0:	f7ff f9d2 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 80064c4:	61f8      	str	r0, [r7, #28]
          break;
 80064c6:	e017      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064c8:	4b5e      	ldr	r3, [pc, #376]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d4:	d10d      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 80064d6:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80064d8:	61fb      	str	r3, [r7, #28]
          break;
 80064da:	e00a      	b.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064dc:	4b59      	ldr	r3, [pc, #356]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d105      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ee:	61fb      	str	r3, [r7, #28]
          break;
 80064f0:	e001      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80064f2:	bf00      	nop
 80064f4:	e22f      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80064f6:	bf00      	nop
        break;
 80064f8:	e22d      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80064fa:	4b52      	ldr	r3, [pc, #328]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006504:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d00d      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	d802      	bhi.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8006514:	e024      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d00a      	beq.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800651a:	2bc0      	cmp	r3, #192	; 0xc0
 800651c:	d012      	beq.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 800651e:	e01f      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006520:	f7ff fa38 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006524:	61f8      	str	r0, [r7, #28]
          break;
 8006526:	e01b      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006528:	f7ff f99e 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 800652c:	61f8      	str	r0, [r7, #28]
          break;
 800652e:	e017      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006530:	4b44      	ldr	r3, [pc, #272]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653c:	d10d      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 800653e:	4b42      	ldr	r3, [pc, #264]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006540:	61fb      	str	r3, [r7, #28]
          break;
 8006542:	e00a      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006544:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	d105      	bne.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8006552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006556:	61fb      	str	r3, [r7, #28]
          break;
 8006558:	e001      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 800655a:	bf00      	nop
 800655c:	e1fb      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800655e:	bf00      	nop
        break;
 8006560:	e1f9      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006562:	4b38      	ldr	r3, [pc, #224]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006574:	d010      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657a:	d802      	bhi.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8006580:	e026      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8006582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006586:	d00b      	beq.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800658c:	d012      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 800658e:	e01f      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006590:	f7ff fa00 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006594:	61f8      	str	r0, [r7, #28]
          break;
 8006596:	e01b      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8006598:	f7ff f966 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 800659c:	61f8      	str	r0, [r7, #28]
          break;
 800659e:	e017      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065a0:	4b28      	ldr	r3, [pc, #160]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ac:	d10d      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 80065ae:	4b26      	ldr	r3, [pc, #152]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80065b0:	61fb      	str	r3, [r7, #28]
          break;
 80065b2:	e00a      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065b4:	4b23      	ldr	r3, [pc, #140]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d105      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 80065c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c6:	61fb      	str	r3, [r7, #28]
          break;
 80065c8:	e001      	b.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 80065ca:	bf00      	nop
 80065cc:	e1c3      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80065ce:	bf00      	nop
        break;
 80065d0:	e1c1      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065dc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e4:	d010      	beq.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80065e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ea:	d802      	bhi.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 80065f0:	e026      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 80065f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f6:	d00b      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80065f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065fc:	d012      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 80065fe:	e01f      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006600:	f7ff f9c8 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006604:	61f8      	str	r0, [r7, #28]
          break;
 8006606:	e01b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006608:	f7ff f92e 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 800660c:	61f8      	str	r0, [r7, #28]
          break;
 800660e:	e017      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006610:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661c:	d10d      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800661e:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006620:	61fb      	str	r3, [r7, #28]
          break;
 8006622:	e00a      	b.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006624:	4b07      	ldr	r3, [pc, #28]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d105      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8006632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006636:	61fb      	str	r3, [r7, #28]
          break;
 8006638:	e001      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800663a:	bf00      	nop
 800663c:	e18b      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800663e:	bf00      	nop
        break;
 8006640:	e189      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000
 8006648:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800664c:	4bae      	ldr	r3, [pc, #696]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006656:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665e:	d02f      	beq.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8006660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006664:	d003      	beq.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800666a:	d004      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 800666c:	e050      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 800666e:	f7ff f8fb 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8006672:	61f8      	str	r0, [r7, #28]
          break;
 8006674:	e04c      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8006676:	4ba4      	ldr	r3, [pc, #656]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d043      	beq.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006682:	4ba1      	ldr	r3, [pc, #644]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800668c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	fb02 f203 	mul.w	r2, r2, r3
 8006696:	4b9c      	ldr	r3, [pc, #624]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	3301      	adds	r3, #1
 80066a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80066a8:	4b97      	ldr	r3, [pc, #604]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	0e5b      	lsrs	r3, r3, #25
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	3301      	adds	r3, #1
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066bc:	61fb      	str	r3, [r7, #28]
          break;
 80066be:	e024      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80066c0:	4b91      	ldr	r3, [pc, #580]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d020      	beq.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80066cc:	4b8e      	ldr	r3, [pc, #568]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	0a1b      	lsrs	r3, r3, #8
 80066d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	fb02 f203 	mul.w	r2, r2, r3
 80066e0:	4b89      	ldr	r3, [pc, #548]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	3301      	adds	r3, #1
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80066f2:	4b85      	ldr	r3, [pc, #532]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	0e5b      	lsrs	r3, r3, #25
 80066f8:	f003 0303 	and.w	r3, r3, #3
 80066fc:	3301      	adds	r3, #1
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	fbb2 f3f3 	udiv	r3, r2, r3
 8006706:	61fb      	str	r3, [r7, #28]
          break;
 8006708:	e001      	b.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 800670a:	bf00      	nop
 800670c:	e123      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800670e:	bf00      	nop
        break;
 8006710:	e121      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006712:	4b7d      	ldr	r3, [pc, #500]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800671c:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006724:	f7ff f94c 	bl	80059c0 <HAL_RCC_GetPCLK2Freq>
 8006728:	61f8      	str	r0, [r7, #28]
        break;
 800672a:	e114      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 800672c:	f7ff f89c 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8006730:	61f8      	str	r0, [r7, #28]
        break;
 8006732:	e110      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006734:	4b74      	ldr	r3, [pc, #464]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800673e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006746:	d009      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d000      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8006752:	e011      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006754:	f7ff f91e 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006758:	61f8      	str	r0, [r7, #28]
          break;
 800675a:	e00d      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 800675c:	f7ff f884 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8006760:	61f8      	str	r0, [r7, #28]
          break;
 8006762:	e009      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006764:	4b68      	ldr	r3, [pc, #416]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006770:	d101      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8006772:	4b66      	ldr	r3, [pc, #408]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006774:	61fb      	str	r3, [r7, #28]
          break;
 8006776:	bf00      	nop
        break;
 8006778:	e0ed      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800677a:	4b63      	ldr	r3, [pc, #396]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006784:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800678c:	d009      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800678e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d000      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8006798:	e011      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 800679a:	f7ff f8fb 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 800679e:	61f8      	str	r0, [r7, #28]
          break;
 80067a0:	e00d      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 80067a2:	f7ff f861 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 80067a6:	61f8      	str	r0, [r7, #28]
          break;
 80067a8:	e009      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067aa:	4b57      	ldr	r3, [pc, #348]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b6:	d101      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 80067b8:	4b54      	ldr	r3, [pc, #336]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80067ba:	61fb      	str	r3, [r7, #28]
          break;
 80067bc:	bf00      	nop
        break;
 80067be:	e0ca      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80067c0:	4b51      	ldr	r3, [pc, #324]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067ca:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d2:	d009      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80067d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067d8:	d00a      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d000      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 80067de:	e011      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067e0:	f7ff f8d8 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 80067e4:	61f8      	str	r0, [r7, #28]
          break;
 80067e6:	e00d      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 80067e8:	f7ff f83e 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 80067ec:	61f8      	str	r0, [r7, #28]
          break;
 80067ee:	e009      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067f0:	4b45      	ldr	r3, [pc, #276]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fc:	d101      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 80067fe:	4b43      	ldr	r3, [pc, #268]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006800:	61fb      	str	r3, [r7, #28]
          break;
 8006802:	bf00      	nop
        break;
 8006804:	e0a7      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006806:	4b40      	ldr	r3, [pc, #256]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006810:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006818:	d010      	beq.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800681a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800681e:	d802      	bhi.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8006824:	e02f      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8006826:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800682a:	d012      	beq.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800682c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006830:	d019      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006832:	e028      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006834:	f7ff f8ae 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006838:	61f8      	str	r0, [r7, #28]
          break;
 800683a:	e024      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800683c:	4b32      	ldr	r3, [pc, #200]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800683e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b02      	cmp	r3, #2
 8006848:	d118      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 800684a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800684e:	61fb      	str	r3, [r7, #28]
          break;
 8006850:	e014      	b.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006852:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685e:	d10f      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8006860:	4b2a      	ldr	r3, [pc, #168]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006862:	61fb      	str	r3, [r7, #28]
          break;
 8006864:	e00c      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006866:	4b28      	ldr	r3, [pc, #160]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b02      	cmp	r3, #2
 8006872:	d107      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8006874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006878:	61fb      	str	r3, [r7, #28]
          break;
 800687a:	e003      	b.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 800687c:	bf00      	nop
 800687e:	e06a      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006880:	bf00      	nop
 8006882:	e068      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006884:	bf00      	nop
        break;
 8006886:	e066      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006888:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006892:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689a:	d010      	beq.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800689c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068a0:	d802      	bhi.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 80068a6:	e034      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 80068a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ac:	d012      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80068ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068b2:	d019      	beq.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 80068b4:	e02d      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068b6:	f7ff f86d 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 80068ba:	61f8      	str	r0, [r7, #28]
          break;
 80068bc:	e029      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80068be:	4b12      	ldr	r3, [pc, #72]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80068c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d118      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 80068cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068d0:	61fb      	str	r3, [r7, #28]
          break;
 80068d2:	e014      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068d4:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e0:	d10f      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 80068e2:	4b0a      	ldr	r3, [pc, #40]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80068e4:	61fb      	str	r3, [r7, #28]
          break;
 80068e6:	e00c      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068e8:	4b07      	ldr	r3, [pc, #28]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d10c      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 80068f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068fa:	61fb      	str	r3, [r7, #28]
          break;
 80068fc:	e008      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 80068fe:	bf00      	nop
 8006900:	e029      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006902:	bf00      	nop
 8006904:	e027      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000
 800690c:	00f42400 	.word	0x00f42400
          break;
 8006910:	bf00      	nop
        break;
 8006912:	e020      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006914:	4b12      	ldr	r3, [pc, #72]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800691e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692a:	d004      	beq.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 800692c:	e00d      	b.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800692e:	f7ff f831 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006932:	61f8      	str	r0, [r7, #28]
          break;
 8006934:	e009      	b.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006942:	d101      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8006944:	4b07      	ldr	r3, [pc, #28]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8006946:	61fb      	str	r3, [r7, #28]
          break;
 8006948:	bf00      	nop
        break;
 800694a:	e004      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 800694c:	bf00      	nop
 800694e:	e002      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006950:	bf00      	nop
 8006952:	e000      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006954:	bf00      	nop
    }
  }

  return(frequency);
 8006956:	69fb      	ldr	r3, [r7, #28]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40021000 	.word	0x40021000
 8006964:	00f42400 	.word	0x00f42400

08006968 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a04      	ldr	r2, [pc, #16]	; (8006984 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006972:	f043 0304 	orr.w	r3, r3, #4
 8006976:	6013      	str	r3, [r2, #0]
}
 8006978:	bf00      	nop
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40021000 	.word	0x40021000

08006988 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006996:	4b73      	ldr	r3, [pc, #460]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d018      	beq.n	80069d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069a2:	4b70      	ldr	r3, [pc, #448]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0203 	and.w	r2, r3, #3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d10d      	bne.n	80069ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
       ||
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80069ba:	4b6a      	ldr	r3, [pc, #424]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	091b      	lsrs	r3, r3, #4
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
       ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d044      	beq.n	8006a58 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
 80069d2:	e041      	b.n	8006a58 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d00c      	beq.n	80069f6 <RCCEx_PLLSAI1_Config+0x6e>
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d013      	beq.n	8006a08 <RCCEx_PLLSAI1_Config+0x80>
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d120      	bne.n	8006a26 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069e4:	4b5f      	ldr	r3, [pc, #380]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d11d      	bne.n	8006a2c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069f4:	e01a      	b.n	8006a2c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069f6:	4b5b      	ldr	r3, [pc, #364]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d116      	bne.n	8006a30 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a06:	e013      	b.n	8006a30 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a08:	4b56      	ldr	r3, [pc, #344]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10f      	bne.n	8006a34 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a14:	4b53      	ldr	r3, [pc, #332]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d109      	bne.n	8006a34 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a24:	e006      	b.n	8006a34 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2a:	e004      	b.n	8006a36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a2c:	bf00      	nop
 8006a2e:	e002      	b.n	8006a36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a30:	bf00      	nop
 8006a32:	e000      	b.n	8006a36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a34:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10d      	bne.n	8006a58 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a3c:	4b49      	ldr	r3, [pc, #292]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6819      	ldr	r1, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	430b      	orrs	r3, r1
 8006a52:	4944      	ldr	r1, [pc, #272]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d17d      	bne.n	8006b5a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a5e:	4b41      	ldr	r3, [pc, #260]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a40      	ldr	r2, [pc, #256]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6a:	f7fa fe45 	bl	80016f8 <HAL_GetTick>
 8006a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a70:	e009      	b.n	8006a86 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a72:	f7fa fe41 	bl	80016f8 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d902      	bls.n	8006a86 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	73fb      	strb	r3, [r7, #15]
        break;
 8006a84:	e005      	b.n	8006a92 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a86:	4b37      	ldr	r3, [pc, #220]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1ef      	bne.n	8006a72 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d160      	bne.n	8006b5a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d111      	bne.n	8006ac2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a9e:	4b31      	ldr	r3, [pc, #196]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6892      	ldr	r2, [r2, #8]
 8006aae:	0211      	lsls	r1, r2, #8
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68d2      	ldr	r2, [r2, #12]
 8006ab4:	0912      	lsrs	r2, r2, #4
 8006ab6:	0452      	lsls	r2, r2, #17
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	492a      	ldr	r1, [pc, #168]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	610b      	str	r3, [r1, #16]
 8006ac0:	e027      	b.n	8006b12 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d112      	bne.n	8006aee <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ac8:	4b26      	ldr	r3, [pc, #152]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006ad0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6892      	ldr	r2, [r2, #8]
 8006ad8:	0211      	lsls	r1, r2, #8
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6912      	ldr	r2, [r2, #16]
 8006ade:	0852      	lsrs	r2, r2, #1
 8006ae0:	3a01      	subs	r2, #1
 8006ae2:	0552      	lsls	r2, r2, #21
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	491f      	ldr	r1, [pc, #124]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	610b      	str	r3, [r1, #16]
 8006aec:	e011      	b.n	8006b12 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006aee:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006af6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6892      	ldr	r2, [r2, #8]
 8006afe:	0211      	lsls	r1, r2, #8
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6952      	ldr	r2, [r2, #20]
 8006b04:	0852      	lsrs	r2, r2, #1
 8006b06:	3a01      	subs	r2, #1
 8006b08:	0652      	lsls	r2, r2, #25
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	4915      	ldr	r1, [pc, #84]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b12:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1e:	f7fa fdeb 	bl	80016f8 <HAL_GetTick>
 8006b22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b24:	e009      	b.n	8006b3a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b26:	f7fa fde7 	bl	80016f8 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d902      	bls.n	8006b3a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	73fb      	strb	r3, [r7, #15]
          break;
 8006b38:	e005      	b.n	8006b46 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0ef      	beq.n	8006b26 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	4903      	ldr	r1, [pc, #12]	; (8006b64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40021000 	.word	0x40021000

08006b68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b76:	4b68      	ldr	r3, [pc, #416]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b82:	4b65      	ldr	r3, [pc, #404]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f003 0203 	and.w	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d10d      	bne.n	8006bae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
       ||
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006b9a:	4b5f      	ldr	r3, [pc, #380]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	091b      	lsrs	r3, r3, #4
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
       ||
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d044      	beq.n	8006c38 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	73fb      	strb	r3, [r7, #15]
 8006bb2:	e041      	b.n	8006c38 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d00c      	beq.n	8006bd6 <RCCEx_PLLSAI2_Config+0x6e>
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d013      	beq.n	8006be8 <RCCEx_PLLSAI2_Config+0x80>
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d120      	bne.n	8006c06 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bc4:	4b54      	ldr	r3, [pc, #336]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d11d      	bne.n	8006c0c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bd4:	e01a      	b.n	8006c0c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bd6:	4b50      	ldr	r3, [pc, #320]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d116      	bne.n	8006c10 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006be6:	e013      	b.n	8006c10 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006be8:	4b4b      	ldr	r3, [pc, #300]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10f      	bne.n	8006c14 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bf4:	4b48      	ldr	r3, [pc, #288]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c04:	e006      	b.n	8006c14 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	73fb      	strb	r3, [r7, #15]
      break;
 8006c0a:	e004      	b.n	8006c16 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006c14:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10d      	bne.n	8006c38 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c1c:	4b3e      	ldr	r3, [pc, #248]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6819      	ldr	r1, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	430b      	orrs	r3, r1
 8006c32:	4939      	ldr	r1, [pc, #228]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d167      	bne.n	8006d0e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006c3e:	4b36      	ldr	r3, [pc, #216]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a35      	ldr	r2, [pc, #212]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c4a:	f7fa fd55 	bl	80016f8 <HAL_GetTick>
 8006c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c50:	e009      	b.n	8006c66 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c52:	f7fa fd51 	bl	80016f8 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d902      	bls.n	8006c66 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
        break;
 8006c64:	e005      	b.n	8006c72 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c66:	4b2c      	ldr	r3, [pc, #176]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1ef      	bne.n	8006c52 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d14a      	bne.n	8006d0e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d111      	bne.n	8006ca2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c7e:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6892      	ldr	r2, [r2, #8]
 8006c8e:	0211      	lsls	r1, r2, #8
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	68d2      	ldr	r2, [r2, #12]
 8006c94:	0912      	lsrs	r2, r2, #4
 8006c96:	0452      	lsls	r2, r2, #17
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	491f      	ldr	r1, [pc, #124]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	614b      	str	r3, [r1, #20]
 8006ca0:	e011      	b.n	8006cc6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ca2:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006caa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6892      	ldr	r2, [r2, #8]
 8006cb2:	0211      	lsls	r1, r2, #8
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6912      	ldr	r2, [r2, #16]
 8006cb8:	0852      	lsrs	r2, r2, #1
 8006cba:	3a01      	subs	r2, #1
 8006cbc:	0652      	lsls	r2, r2, #25
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	4915      	ldr	r1, [pc, #84]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a13      	ldr	r2, [pc, #76]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd2:	f7fa fd11 	bl	80016f8 <HAL_GetTick>
 8006cd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006cd8:	e009      	b.n	8006cee <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cda:	f7fa fd0d 	bl	80016f8 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d902      	bls.n	8006cee <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	73fb      	strb	r3, [r7, #15]
          break;
 8006cec:	e005      	b.n	8006cfa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0ef      	beq.n	8006cda <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	4903      	ldr	r1, [pc, #12]	; (8006d18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40021000 	.word	0x40021000

08006d1c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b089      	sub	sp, #36	; 0x24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d38:	d10c      	bne.n	8006d54 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006d3a:	4b62      	ldr	r3, [pc, #392]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d44:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d4c:	d112      	bne.n	8006d74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d4e:	4b5e      	ldr	r3, [pc, #376]	; (8006ec8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006d50:	61fb      	str	r3, [r7, #28]
 8006d52:	e00f      	b.n	8006d74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5a:	d10b      	bne.n	8006d74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006d5c:	4b59      	ldr	r3, [pc, #356]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d62:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006d66:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d6e:	d101      	bne.n	8006d74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006d70:	4b55      	ldr	r3, [pc, #340]	; (8006ec8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006d72:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 809c 	bne.w	8006eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d86:	d003      	beq.n	8006d90 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d8e:	d12d      	bne.n	8006dec <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006d90:	4b4c      	ldr	r3, [pc, #304]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 808b 	beq.w	8006eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d9e:	4b49      	ldr	r3, [pc, #292]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	3301      	adds	r3, #1
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006db2:	4b44      	ldr	r3, [pc, #272]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006dc4:	4b3f      	ldr	r3, [pc, #252]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8006dd0:	2311      	movs	r3, #17
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	e001      	b.n	8006dda <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 8006dd6:	2307      	movs	r3, #7
 8006dd8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	fb02 f203 	mul.w	r2, r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006dea:	e063      	b.n	8006eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d12c      	bne.n	8006e4c <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d05a      	beq.n	8006eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006dfe:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	091b      	lsrs	r3, r3, #4
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	3301      	adds	r3, #1
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e12:	4b2c      	ldr	r3, [pc, #176]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e1c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006e24:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 8006e30:	2311      	movs	r3, #17
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e001      	b.n	8006e3a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 8006e36:	2307      	movs	r3, #7
 8006e38:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	fb02 f203 	mul.w	r2, r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	e033      	b.n	8006eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e52:	d003      	beq.n	8006e5c <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e5a:	d12b      	bne.n	8006eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006e5c:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d025      	beq.n	8006eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e68:	4b16      	ldr	r3, [pc, #88]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	3301      	adds	r3, #1
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006e7c:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	0a1b      	lsrs	r3, r3, #8
 8006e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e86:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8006e9a:	2311      	movs	r3, #17
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e001      	b.n	8006ea4 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8006ea0:	2307      	movs	r3, #7
 8006ea2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	fb02 f203 	mul.w	r2, r2, r3
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb2:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3724      	adds	r7, #36	; 0x24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	001fff68 	.word	0x001fff68

08006ecc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e14a      	b.n	8007174 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fa fa4e 	bl	8001394 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f94d 	bl	8007198 <SAI_Disable>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e135      	b.n	8007174 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d007      	beq.n	8006f28 <HAL_SAI_Init+0x5c>
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d302      	bcc.n	8006f22 <HAL_SAI_Init+0x56>
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d006      	beq.n	8006f2e <HAL_SAI_Init+0x62>
 8006f20:	e008      	b.n	8006f34 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61fb      	str	r3, [r7, #28]
      break;
 8006f26:	e008      	b.n	8006f3a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006f28:	2310      	movs	r3, #16
 8006f2a:	61fb      	str	r3, [r7, #28]
      break;
 8006f2c:	e005      	b.n	8006f3a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006f2e:	2320      	movs	r3, #32
 8006f30:	61fb      	str	r3, [r7, #28]
      break;
 8006f32:	e002      	b.n	8006f3a <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61fb      	str	r3, [r7, #28]
      break;
 8006f38:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d81d      	bhi.n	8006f7e <HAL_SAI_Init+0xb2>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <HAL_SAI_Init+0x7c>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006f5f 	.word	0x08006f5f
 8006f50:	08006f67 	.word	0x08006f67
 8006f54:	08006f6f 	.word	0x08006f6f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]
      break;
 8006f5c:	e012      	b.n	8006f84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f62:	617b      	str	r3, [r7, #20]
      break;
 8006f64:	e00e      	b.n	8006f84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f6a:	617b      	str	r3, [r7, #20]
      break;
 8006f6c:	e00a      	b.n	8006f84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f72:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	61fb      	str	r3, [r7, #28]
      break;
 8006f7c:	e002      	b.n	8006f84 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]
      break;
 8006f82:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a7c      	ldr	r2, [pc, #496]	; (800717c <HAL_SAI_Init+0x2b0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_SAI_Init+0xcc>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a7b      	ldr	r2, [pc, #492]	; (8007180 <HAL_SAI_Init+0x2b4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d103      	bne.n	8006fa0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006f98:	4a7a      	ldr	r2, [pc, #488]	; (8007184 <HAL_SAI_Init+0x2b8>)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e002      	b.n	8006fa6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006fa0:	4a79      	ldr	r2, [pc, #484]	; (8007188 <HAL_SAI_Init+0x2bc>)
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d038      	beq.n	8007020 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a72      	ldr	r2, [pc, #456]	; (800717c <HAL_SAI_Init+0x2b0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_SAI_Init+0xf6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a70      	ldr	r2, [pc, #448]	; (8007180 <HAL_SAI_Init+0x2b4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d105      	bne.n	8006fce <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006fc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006fc6:	f7ff f857 	bl	8006078 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fca:	6138      	str	r0, [r7, #16]
 8006fcc:	e004      	b.n	8006fd8 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006fce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006fd2:	f7ff f851 	bl	8006078 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fd6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	025b      	lsls	r3, r3, #9
 8006fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fee:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a66      	ldr	r2, [pc, #408]	; (800718c <HAL_SAI_Init+0x2c0>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	08da      	lsrs	r2, r3, #3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	4b62      	ldr	r3, [pc, #392]	; (800718c <HAL_SAI_Init+0x2c0>)
 8007002:	fba3 2301 	umull	r2, r3, r3, r1
 8007006:	08da      	lsrs	r2, r3, #3
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	1aca      	subs	r2, r1, r3
 8007012:	2a08      	cmp	r2, #8
 8007014:	d904      	bls.n	8007020 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <HAL_SAI_Init+0x164>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d109      	bne.n	8007044 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_SAI_Init+0x170>
 8007038:	2300      	movs	r3, #0
 800703a:	e001      	b.n	8007040 <HAL_SAI_Init+0x174>
 800703c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	e008      	b.n	8007056 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d102      	bne.n	8007052 <HAL_SAI_Init+0x186>
 800704c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007050:	e000      	b.n	8007054 <HAL_SAI_Init+0x188>
 8007052:	2300      	movs	r3, #0
 8007054:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6819      	ldr	r1, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b4b      	ldr	r3, [pc, #300]	; (8007190 <HAL_SAI_Init+0x2c4>)
 8007062:	400b      	ands	r3, r1
 8007064:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6819      	ldr	r1, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800707a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	431a      	orrs	r2, r3
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800708e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800709a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	051b      	lsls	r3, r3, #20
 80070a2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80070ba:	f023 030f 	bic.w	r3, r3, #15
 80070be:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6859      	ldr	r1, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	431a      	orrs	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6899      	ldr	r1, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	4b2a      	ldr	r3, [pc, #168]	; (8007194 <HAL_SAI_Init+0x2c8>)
 80070ea:	400b      	ands	r3, r1
 80070ec:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6899      	ldr	r1, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070fe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8007104:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800710a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007110:	3b01      	subs	r3, #1
 8007112:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007114:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68d9      	ldr	r1, [r3, #12]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	f24f 0320 	movw	r3, #61472	; 0xf020
 800712c:	400b      	ands	r3, r1
 800712e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68d9      	ldr	r1, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007144:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007146:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714c:	3b01      	subs	r3, #1
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3720      	adds	r7, #32
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	40015404 	.word	0x40015404
 8007180:	40015424 	.word	0x40015424
 8007184:	40015400 	.word	0x40015400
 8007188:	40015800 	.word	0x40015800
 800718c:	cccccccd 	.word	0xcccccccd
 8007190:	ff05c010 	.word	0xff05c010
 8007194:	fff88000 	.word	0xfff88000

08007198 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007198:	b490      	push	{r4, r7}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80071a0:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <SAI_Disable+0x60>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a15      	ldr	r2, [pc, #84]	; (80071fc <SAI_Disable+0x64>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	0b1b      	lsrs	r3, r3, #12
 80071ac:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071c0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80071c2:	2c00      	cmp	r4, #0
 80071c4:	d10a      	bne.n	80071dc <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	73fb      	strb	r3, [r7, #15]
      break;
 80071da:	e007      	b.n	80071ec <SAI_Disable+0x54>
    }
    count--;
 80071dc:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1ea      	bne.n	80071c2 <SAI_Disable+0x2a>

  return status;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc90      	pop	{r4, r7}
 80071f6:	4770      	bx	lr
 80071f8:	20000000 	.word	0x20000000
 80071fc:	95cbec1b 	.word	0x95cbec1b

08007200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e07c      	b.n	800730c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7fa f803 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007248:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007252:	d902      	bls.n	800725a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	e002      	b.n	8007260 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800725a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800725e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007268:	d007      	beq.n	800727a <HAL_SPI_Init+0x7a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007272:	d002      	beq.n	800727a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800728a:	d903      	bls.n	8007294 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
 8007292:	e002      	b.n	800729a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	ea42 0103 	orr.w	r1, r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	f003 0204 	and.w	r2, r3, #4
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	ea42 0103 	orr.w	r1, r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e01d      	b.n	8007362 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7f9 ffc0 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f000 f834 	bl	80073c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <HAL_TIM_Base_Start_IT+0x50>)
 800738c:	4013      	ands	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b06      	cmp	r3, #6
 8007394:	d00b      	beq.n	80073ae <HAL_TIM_Base_Start_IT+0x42>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800739c:	d007      	beq.n	80073ae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0201 	orr.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	00010007 	.word	0x00010007

080073c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a40      	ldr	r2, [pc, #256]	; (80074d4 <TIM_Base_SetConfig+0x114>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d013      	beq.n	8007400 <TIM_Base_SetConfig+0x40>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073de:	d00f      	beq.n	8007400 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a3d      	ldr	r2, [pc, #244]	; (80074d8 <TIM_Base_SetConfig+0x118>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00b      	beq.n	8007400 <TIM_Base_SetConfig+0x40>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a3c      	ldr	r2, [pc, #240]	; (80074dc <TIM_Base_SetConfig+0x11c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d007      	beq.n	8007400 <TIM_Base_SetConfig+0x40>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a3b      	ldr	r2, [pc, #236]	; (80074e0 <TIM_Base_SetConfig+0x120>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_Base_SetConfig+0x40>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a3a      	ldr	r2, [pc, #232]	; (80074e4 <TIM_Base_SetConfig+0x124>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d108      	bne.n	8007412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a2f      	ldr	r2, [pc, #188]	; (80074d4 <TIM_Base_SetConfig+0x114>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d01f      	beq.n	800745a <TIM_Base_SetConfig+0x9a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007420:	d01b      	beq.n	800745a <TIM_Base_SetConfig+0x9a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a2c      	ldr	r2, [pc, #176]	; (80074d8 <TIM_Base_SetConfig+0x118>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d017      	beq.n	800745a <TIM_Base_SetConfig+0x9a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a2b      	ldr	r2, [pc, #172]	; (80074dc <TIM_Base_SetConfig+0x11c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d013      	beq.n	800745a <TIM_Base_SetConfig+0x9a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a2a      	ldr	r2, [pc, #168]	; (80074e0 <TIM_Base_SetConfig+0x120>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00f      	beq.n	800745a <TIM_Base_SetConfig+0x9a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a29      	ldr	r2, [pc, #164]	; (80074e4 <TIM_Base_SetConfig+0x124>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00b      	beq.n	800745a <TIM_Base_SetConfig+0x9a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a28      	ldr	r2, [pc, #160]	; (80074e8 <TIM_Base_SetConfig+0x128>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <TIM_Base_SetConfig+0x9a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a27      	ldr	r2, [pc, #156]	; (80074ec <TIM_Base_SetConfig+0x12c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <TIM_Base_SetConfig+0x9a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a26      	ldr	r2, [pc, #152]	; (80074f0 <TIM_Base_SetConfig+0x130>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d108      	bne.n	800746c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a10      	ldr	r2, [pc, #64]	; (80074d4 <TIM_Base_SetConfig+0x114>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00f      	beq.n	80074b8 <TIM_Base_SetConfig+0xf8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a12      	ldr	r2, [pc, #72]	; (80074e4 <TIM_Base_SetConfig+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00b      	beq.n	80074b8 <TIM_Base_SetConfig+0xf8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a11      	ldr	r2, [pc, #68]	; (80074e8 <TIM_Base_SetConfig+0x128>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0xf8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a10      	ldr	r2, [pc, #64]	; (80074ec <TIM_Base_SetConfig+0x12c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0xf8>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a0f      	ldr	r2, [pc, #60]	; (80074f0 <TIM_Base_SetConfig+0x130>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d103      	bne.n	80074c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	615a      	str	r2, [r3, #20]
}
 80074c6:	bf00      	nop
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40012c00 	.word	0x40012c00
 80074d8:	40000400 	.word	0x40000400
 80074dc:	40000800 	.word	0x40000800
 80074e0:	40000c00 	.word	0x40000c00
 80074e4:	40013400 	.word	0x40013400
 80074e8:	40014000 	.word	0x40014000
 80074ec:	40014400 	.word	0x40014400
 80074f0:	40014800 	.word	0x40014800

080074f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e040      	b.n	8007588 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7f9 fef8 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2224      	movs	r2, #36	; 0x24
 8007520:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f82c 	bl	8007590 <UART_SetConfig>
 8007538:	4603      	mov	r3, r0
 800753a:	2b01      	cmp	r3, #1
 800753c:	d101      	bne.n	8007542 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e022      	b.n	8007588 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fb68 	bl	8007c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800755e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800756e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fbef 	bl	8007d64 <UART_CheckIdleState>
 8007586:	4603      	mov	r3, r0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007590:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007594:	b088      	sub	sp, #32
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800759a:	2300      	movs	r3, #0
 800759c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	4bac      	ldr	r3, [pc, #688]	; (8007878 <UART_SetConfig+0x2e8>)
 80075c6:	4013      	ands	r3, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	69f9      	ldr	r1, [r7, #28]
 80075ce:	430b      	orrs	r3, r1
 80075d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4aa2      	ldr	r2, [pc, #648]	; (800787c <UART_SetConfig+0x2ec>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	4313      	orrs	r3, r2
 8007600:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	430a      	orrs	r2, r1
 8007614:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a99      	ldr	r2, [pc, #612]	; (8007880 <UART_SetConfig+0x2f0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d121      	bne.n	8007664 <UART_SetConfig+0xd4>
 8007620:	4b98      	ldr	r3, [pc, #608]	; (8007884 <UART_SetConfig+0x2f4>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	2b03      	cmp	r3, #3
 800762c:	d816      	bhi.n	800765c <UART_SetConfig+0xcc>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <UART_SetConfig+0xa4>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007645 	.word	0x08007645
 8007638:	08007651 	.word	0x08007651
 800763c:	0800764b 	.word	0x0800764b
 8007640:	08007657 	.word	0x08007657
 8007644:	2301      	movs	r3, #1
 8007646:	76fb      	strb	r3, [r7, #27]
 8007648:	e0e8      	b.n	800781c <UART_SetConfig+0x28c>
 800764a:	2302      	movs	r3, #2
 800764c:	76fb      	strb	r3, [r7, #27]
 800764e:	e0e5      	b.n	800781c <UART_SetConfig+0x28c>
 8007650:	2304      	movs	r3, #4
 8007652:	76fb      	strb	r3, [r7, #27]
 8007654:	e0e2      	b.n	800781c <UART_SetConfig+0x28c>
 8007656:	2308      	movs	r3, #8
 8007658:	76fb      	strb	r3, [r7, #27]
 800765a:	e0df      	b.n	800781c <UART_SetConfig+0x28c>
 800765c:	2310      	movs	r3, #16
 800765e:	76fb      	strb	r3, [r7, #27]
 8007660:	bf00      	nop
 8007662:	e0db      	b.n	800781c <UART_SetConfig+0x28c>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a87      	ldr	r2, [pc, #540]	; (8007888 <UART_SetConfig+0x2f8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d134      	bne.n	80076d8 <UART_SetConfig+0x148>
 800766e:	4b85      	ldr	r3, [pc, #532]	; (8007884 <UART_SetConfig+0x2f4>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	f003 030c 	and.w	r3, r3, #12
 8007678:	2b0c      	cmp	r3, #12
 800767a:	d829      	bhi.n	80076d0 <UART_SetConfig+0x140>
 800767c:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <UART_SetConfig+0xf4>)
 800767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007682:	bf00      	nop
 8007684:	080076b9 	.word	0x080076b9
 8007688:	080076d1 	.word	0x080076d1
 800768c:	080076d1 	.word	0x080076d1
 8007690:	080076d1 	.word	0x080076d1
 8007694:	080076c5 	.word	0x080076c5
 8007698:	080076d1 	.word	0x080076d1
 800769c:	080076d1 	.word	0x080076d1
 80076a0:	080076d1 	.word	0x080076d1
 80076a4:	080076bf 	.word	0x080076bf
 80076a8:	080076d1 	.word	0x080076d1
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d1 	.word	0x080076d1
 80076b4:	080076cb 	.word	0x080076cb
 80076b8:	2300      	movs	r3, #0
 80076ba:	76fb      	strb	r3, [r7, #27]
 80076bc:	e0ae      	b.n	800781c <UART_SetConfig+0x28c>
 80076be:	2302      	movs	r3, #2
 80076c0:	76fb      	strb	r3, [r7, #27]
 80076c2:	e0ab      	b.n	800781c <UART_SetConfig+0x28c>
 80076c4:	2304      	movs	r3, #4
 80076c6:	76fb      	strb	r3, [r7, #27]
 80076c8:	e0a8      	b.n	800781c <UART_SetConfig+0x28c>
 80076ca:	2308      	movs	r3, #8
 80076cc:	76fb      	strb	r3, [r7, #27]
 80076ce:	e0a5      	b.n	800781c <UART_SetConfig+0x28c>
 80076d0:	2310      	movs	r3, #16
 80076d2:	76fb      	strb	r3, [r7, #27]
 80076d4:	bf00      	nop
 80076d6:	e0a1      	b.n	800781c <UART_SetConfig+0x28c>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a6b      	ldr	r2, [pc, #428]	; (800788c <UART_SetConfig+0x2fc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d120      	bne.n	8007724 <UART_SetConfig+0x194>
 80076e2:	4b68      	ldr	r3, [pc, #416]	; (8007884 <UART_SetConfig+0x2f4>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d00f      	beq.n	8007710 <UART_SetConfig+0x180>
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	d802      	bhi.n	80076fa <UART_SetConfig+0x16a>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <UART_SetConfig+0x174>
 80076f8:	e010      	b.n	800771c <UART_SetConfig+0x18c>
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d005      	beq.n	800770a <UART_SetConfig+0x17a>
 80076fe:	2b30      	cmp	r3, #48	; 0x30
 8007700:	d009      	beq.n	8007716 <UART_SetConfig+0x186>
 8007702:	e00b      	b.n	800771c <UART_SetConfig+0x18c>
 8007704:	2300      	movs	r3, #0
 8007706:	76fb      	strb	r3, [r7, #27]
 8007708:	e088      	b.n	800781c <UART_SetConfig+0x28c>
 800770a:	2302      	movs	r3, #2
 800770c:	76fb      	strb	r3, [r7, #27]
 800770e:	e085      	b.n	800781c <UART_SetConfig+0x28c>
 8007710:	2304      	movs	r3, #4
 8007712:	76fb      	strb	r3, [r7, #27]
 8007714:	e082      	b.n	800781c <UART_SetConfig+0x28c>
 8007716:	2308      	movs	r3, #8
 8007718:	76fb      	strb	r3, [r7, #27]
 800771a:	e07f      	b.n	800781c <UART_SetConfig+0x28c>
 800771c:	2310      	movs	r3, #16
 800771e:	76fb      	strb	r3, [r7, #27]
 8007720:	bf00      	nop
 8007722:	e07b      	b.n	800781c <UART_SetConfig+0x28c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a59      	ldr	r2, [pc, #356]	; (8007890 <UART_SetConfig+0x300>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d120      	bne.n	8007770 <UART_SetConfig+0x1e0>
 800772e:	4b55      	ldr	r3, [pc, #340]	; (8007884 <UART_SetConfig+0x2f4>)
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007734:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007738:	2b40      	cmp	r3, #64	; 0x40
 800773a:	d00f      	beq.n	800775c <UART_SetConfig+0x1cc>
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	d802      	bhi.n	8007746 <UART_SetConfig+0x1b6>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <UART_SetConfig+0x1c0>
 8007744:	e010      	b.n	8007768 <UART_SetConfig+0x1d8>
 8007746:	2b80      	cmp	r3, #128	; 0x80
 8007748:	d005      	beq.n	8007756 <UART_SetConfig+0x1c6>
 800774a:	2bc0      	cmp	r3, #192	; 0xc0
 800774c:	d009      	beq.n	8007762 <UART_SetConfig+0x1d2>
 800774e:	e00b      	b.n	8007768 <UART_SetConfig+0x1d8>
 8007750:	2300      	movs	r3, #0
 8007752:	76fb      	strb	r3, [r7, #27]
 8007754:	e062      	b.n	800781c <UART_SetConfig+0x28c>
 8007756:	2302      	movs	r3, #2
 8007758:	76fb      	strb	r3, [r7, #27]
 800775a:	e05f      	b.n	800781c <UART_SetConfig+0x28c>
 800775c:	2304      	movs	r3, #4
 800775e:	76fb      	strb	r3, [r7, #27]
 8007760:	e05c      	b.n	800781c <UART_SetConfig+0x28c>
 8007762:	2308      	movs	r3, #8
 8007764:	76fb      	strb	r3, [r7, #27]
 8007766:	e059      	b.n	800781c <UART_SetConfig+0x28c>
 8007768:	2310      	movs	r3, #16
 800776a:	76fb      	strb	r3, [r7, #27]
 800776c:	bf00      	nop
 800776e:	e055      	b.n	800781c <UART_SetConfig+0x28c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a47      	ldr	r2, [pc, #284]	; (8007894 <UART_SetConfig+0x304>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d124      	bne.n	80077c4 <UART_SetConfig+0x234>
 800777a:	4b42      	ldr	r3, [pc, #264]	; (8007884 <UART_SetConfig+0x2f4>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007788:	d012      	beq.n	80077b0 <UART_SetConfig+0x220>
 800778a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778e:	d802      	bhi.n	8007796 <UART_SetConfig+0x206>
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <UART_SetConfig+0x214>
 8007794:	e012      	b.n	80077bc <UART_SetConfig+0x22c>
 8007796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779a:	d006      	beq.n	80077aa <UART_SetConfig+0x21a>
 800779c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a0:	d009      	beq.n	80077b6 <UART_SetConfig+0x226>
 80077a2:	e00b      	b.n	80077bc <UART_SetConfig+0x22c>
 80077a4:	2300      	movs	r3, #0
 80077a6:	76fb      	strb	r3, [r7, #27]
 80077a8:	e038      	b.n	800781c <UART_SetConfig+0x28c>
 80077aa:	2302      	movs	r3, #2
 80077ac:	76fb      	strb	r3, [r7, #27]
 80077ae:	e035      	b.n	800781c <UART_SetConfig+0x28c>
 80077b0:	2304      	movs	r3, #4
 80077b2:	76fb      	strb	r3, [r7, #27]
 80077b4:	e032      	b.n	800781c <UART_SetConfig+0x28c>
 80077b6:	2308      	movs	r3, #8
 80077b8:	76fb      	strb	r3, [r7, #27]
 80077ba:	e02f      	b.n	800781c <UART_SetConfig+0x28c>
 80077bc:	2310      	movs	r3, #16
 80077be:	76fb      	strb	r3, [r7, #27]
 80077c0:	bf00      	nop
 80077c2:	e02b      	b.n	800781c <UART_SetConfig+0x28c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a2c      	ldr	r2, [pc, #176]	; (800787c <UART_SetConfig+0x2ec>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d124      	bne.n	8007818 <UART_SetConfig+0x288>
 80077ce:	4b2d      	ldr	r3, [pc, #180]	; (8007884 <UART_SetConfig+0x2f4>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077dc:	d012      	beq.n	8007804 <UART_SetConfig+0x274>
 80077de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e2:	d802      	bhi.n	80077ea <UART_SetConfig+0x25a>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <UART_SetConfig+0x268>
 80077e8:	e012      	b.n	8007810 <UART_SetConfig+0x280>
 80077ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ee:	d006      	beq.n	80077fe <UART_SetConfig+0x26e>
 80077f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077f4:	d009      	beq.n	800780a <UART_SetConfig+0x27a>
 80077f6:	e00b      	b.n	8007810 <UART_SetConfig+0x280>
 80077f8:	2300      	movs	r3, #0
 80077fa:	76fb      	strb	r3, [r7, #27]
 80077fc:	e00e      	b.n	800781c <UART_SetConfig+0x28c>
 80077fe:	2302      	movs	r3, #2
 8007800:	76fb      	strb	r3, [r7, #27]
 8007802:	e00b      	b.n	800781c <UART_SetConfig+0x28c>
 8007804:	2304      	movs	r3, #4
 8007806:	76fb      	strb	r3, [r7, #27]
 8007808:	e008      	b.n	800781c <UART_SetConfig+0x28c>
 800780a:	2308      	movs	r3, #8
 800780c:	76fb      	strb	r3, [r7, #27]
 800780e:	e005      	b.n	800781c <UART_SetConfig+0x28c>
 8007810:	2310      	movs	r3, #16
 8007812:	76fb      	strb	r3, [r7, #27]
 8007814:	bf00      	nop
 8007816:	e001      	b.n	800781c <UART_SetConfig+0x28c>
 8007818:	2310      	movs	r3, #16
 800781a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a16      	ldr	r2, [pc, #88]	; (800787c <UART_SetConfig+0x2ec>)
 8007822:	4293      	cmp	r3, r2
 8007824:	f040 80fa 	bne.w	8007a1c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007828:	7efb      	ldrb	r3, [r7, #27]
 800782a:	2b08      	cmp	r3, #8
 800782c:	d836      	bhi.n	800789c <UART_SetConfig+0x30c>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <UART_SetConfig+0x2a4>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007859 	.word	0x08007859
 8007838:	0800789d 	.word	0x0800789d
 800783c:	08007861 	.word	0x08007861
 8007840:	0800789d 	.word	0x0800789d
 8007844:	08007867 	.word	0x08007867
 8007848:	0800789d 	.word	0x0800789d
 800784c:	0800789d 	.word	0x0800789d
 8007850:	0800789d 	.word	0x0800789d
 8007854:	0800786f 	.word	0x0800786f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007858:	f7fe f89c 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 800785c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800785e:	e020      	b.n	80078a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007860:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <UART_SetConfig+0x308>)
 8007862:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007864:	e01d      	b.n	80078a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007866:	f7fd ffff 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 800786a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800786c:	e019      	b.n	80078a2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800786e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007872:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007874:	e015      	b.n	80078a2 <UART_SetConfig+0x312>
 8007876:	bf00      	nop
 8007878:	efff69f3 	.word	0xefff69f3
 800787c:	40008000 	.word	0x40008000
 8007880:	40013800 	.word	0x40013800
 8007884:	40021000 	.word	0x40021000
 8007888:	40004400 	.word	0x40004400
 800788c:	40004800 	.word	0x40004800
 8007890:	40004c00 	.word	0x40004c00
 8007894:	40005000 	.word	0x40005000
 8007898:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	74fb      	strb	r3, [r7, #19]
        break;
 80078a0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 81ac 	beq.w	8007c02 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	4413      	add	r3, r2
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d305      	bcc.n	80078c6 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d902      	bls.n	80078cc <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	74fb      	strb	r3, [r7, #19]
 80078ca:	e19a      	b.n	8007c02 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80078cc:	7efb      	ldrb	r3, [r7, #27]
 80078ce:	2b08      	cmp	r3, #8
 80078d0:	f200 8091 	bhi.w	80079f6 <UART_SetConfig+0x466>
 80078d4:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <UART_SetConfig+0x34c>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	08007901 	.word	0x08007901
 80078e0:	080079f7 	.word	0x080079f7
 80078e4:	0800794d 	.word	0x0800794d
 80078e8:	080079f7 	.word	0x080079f7
 80078ec:	08007981 	.word	0x08007981
 80078f0:	080079f7 	.word	0x080079f7
 80078f4:	080079f7 	.word	0x080079f7
 80078f8:	080079f7 	.word	0x080079f7
 80078fc:	080079cd 	.word	0x080079cd
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007900:	f7fe f848 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8007904:	4603      	mov	r3, r0
 8007906:	4619      	mov	r1, r3
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	0214      	lsls	r4, r2, #8
 8007916:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800791a:	020b      	lsls	r3, r1, #8
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6852      	ldr	r2, [r2, #4]
 8007920:	0852      	lsrs	r2, r2, #1
 8007922:	4611      	mov	r1, r2
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	eb13 0b01 	adds.w	fp, r3, r1
 800792c:	eb44 0c02 	adc.w	ip, r4, r2
 8007930:	4658      	mov	r0, fp
 8007932:	4661      	mov	r1, ip
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f04f 0400 	mov.w	r4, #0
 800793c:	461a      	mov	r2, r3
 800793e:	4623      	mov	r3, r4
 8007940:	f7f8 fc42 	bl	80001c8 <__aeabi_uldivmod>
 8007944:	4603      	mov	r3, r0
 8007946:	460c      	mov	r4, r1
 8007948:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800794a:	e057      	b.n	80079fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	f04f 0400 	mov.w	r4, #0
 8007956:	49b1      	ldr	r1, [pc, #708]	; (8007c1c <UART_SetConfig+0x68c>)
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	eb13 0b01 	adds.w	fp, r3, r1
 8007960:	eb44 0c02 	adc.w	ip, r4, r2
 8007964:	4658      	mov	r0, fp
 8007966:	4661      	mov	r1, ip
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	461a      	mov	r2, r3
 8007972:	4623      	mov	r3, r4
 8007974:	f7f8 fc28 	bl	80001c8 <__aeabi_uldivmod>
 8007978:	4603      	mov	r3, r0
 800797a:	460c      	mov	r4, r1
 800797c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800797e:	e03d      	b.n	80079fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007980:	f7fd ff72 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8007984:	4603      	mov	r3, r0
 8007986:	4619      	mov	r1, r3
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	f04f 0300 	mov.w	r3, #0
 8007990:	f04f 0400 	mov.w	r4, #0
 8007994:	0214      	lsls	r4, r2, #8
 8007996:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800799a:	020b      	lsls	r3, r1, #8
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6852      	ldr	r2, [r2, #4]
 80079a0:	0852      	lsrs	r2, r2, #1
 80079a2:	4611      	mov	r1, r2
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	eb13 0b01 	adds.w	fp, r3, r1
 80079ac:	eb44 0c02 	adc.w	ip, r4, r2
 80079b0:	4658      	mov	r0, fp
 80079b2:	4661      	mov	r1, ip
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f04f 0400 	mov.w	r4, #0
 80079bc:	461a      	mov	r2, r3
 80079be:	4623      	mov	r3, r4
 80079c0:	f7f8 fc02 	bl	80001c8 <__aeabi_uldivmod>
 80079c4:	4603      	mov	r3, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80079ca:	e017      	b.n	80079fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	f04f 0400 	mov.w	r4, #0
 80079d6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80079da:	f144 0100 	adc.w	r1, r4, #0
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f04f 0400 	mov.w	r4, #0
 80079e6:	461a      	mov	r2, r3
 80079e8:	4623      	mov	r3, r4
 80079ea:	f7f8 fbed 	bl	80001c8 <__aeabi_uldivmod>
 80079ee:	4603      	mov	r3, r0
 80079f0:	460c      	mov	r4, r1
 80079f2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80079f4:	e002      	b.n	80079fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	74fb      	strb	r3, [r7, #19]
            break;
 80079fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a02:	d308      	bcc.n	8007a16 <UART_SetConfig+0x486>
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0a:	d204      	bcs.n	8007a16 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	60da      	str	r2, [r3, #12]
 8007a14:	e0f5      	b.n	8007c02 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	74fb      	strb	r3, [r7, #19]
 8007a1a:	e0f2      	b.n	8007c02 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a24:	d17f      	bne.n	8007b26 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8007a26:	7efb      	ldrb	r3, [r7, #27]
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d85c      	bhi.n	8007ae6 <UART_SetConfig+0x556>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x4a4>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a77 	.word	0x08007a77
 8007a3c:	08007a95 	.word	0x08007a95
 8007a40:	08007ae7 	.word	0x08007ae7
 8007a44:	08007ab1 	.word	0x08007ab1
 8007a48:	08007ae7 	.word	0x08007ae7
 8007a4c:	08007ae7 	.word	0x08007ae7
 8007a50:	08007ae7 	.word	0x08007ae7
 8007a54:	08007acf 	.word	0x08007acf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007a58:	f7fd ff9c 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	005a      	lsls	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	441a      	add	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a74:	e03a      	b.n	8007aec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007a76:	f7fd ffa3 	bl	80059c0 <HAL_RCC_GetPCLK2Freq>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	005a      	lsls	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a92:	e02b      	b.n	8007aec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007a9e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6852      	ldr	r2, [r2, #4]
 8007aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007aae:	e01d      	b.n	8007aec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007ab0:	f7fd feda 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	005a      	lsls	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	085b      	lsrs	r3, r3, #1
 8007abe:	441a      	add	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007acc:	e00e      	b.n	8007aec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ae4:	e002      	b.n	8007aec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	74fb      	strb	r3, [r7, #19]
        break;
 8007aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2b0f      	cmp	r3, #15
 8007af0:	d916      	bls.n	8007b20 <UART_SetConfig+0x590>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af8:	d212      	bcs.n	8007b20 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	f023 030f 	bic.w	r3, r3, #15
 8007b02:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	085b      	lsrs	r3, r3, #1
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	897b      	ldrh	r3, [r7, #10]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	897a      	ldrh	r2, [r7, #10]
 8007b1c:	60da      	str	r2, [r3, #12]
 8007b1e:	e070      	b.n	8007c02 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	74fb      	strb	r3, [r7, #19]
 8007b24:	e06d      	b.n	8007c02 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8007b26:	7efb      	ldrb	r3, [r7, #27]
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d859      	bhi.n	8007be0 <UART_SetConfig+0x650>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <UART_SetConfig+0x5a4>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b59 	.word	0x08007b59
 8007b38:	08007b75 	.word	0x08007b75
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007be1 	.word	0x08007be1
 8007b44:	08007bad 	.word	0x08007bad
 8007b48:	08007be1 	.word	0x08007be1
 8007b4c:	08007be1 	.word	0x08007be1
 8007b50:	08007be1 	.word	0x08007be1
 8007b54:	08007bc9 	.word	0x08007bc9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007b58:	f7fd ff1c 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007b72:	e038      	b.n	8007be6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007b74:	f7fd ff24 	bl	80059c0 <HAL_RCC_GetPCLK2Freq>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	085b      	lsrs	r3, r3, #1
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007b8e:	e02a      	b.n	8007be6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007b9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6852      	ldr	r2, [r2, #4]
 8007ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007baa:	e01c      	b.n	8007be6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007bac:	f7fd fe5c 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	085b      	lsrs	r3, r3, #1
 8007bb8:	441a      	add	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007bc6:	e00e      	b.n	8007be6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	085b      	lsrs	r3, r3, #1
 8007bce:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007bde:	e002      	b.n	8007be6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	74fb      	strb	r3, [r7, #19]
        break;
 8007be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b0f      	cmp	r3, #15
 8007bea:	d908      	bls.n	8007bfe <UART_SetConfig+0x66e>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf2:	d204      	bcs.n	8007bfe <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	60da      	str	r2, [r3, #12]
 8007bfc:	e001      	b.n	8007c02 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c0e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007c1a:	bf00      	nop
 8007c1c:	f4240000 	.word	0xf4240000

08007c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	f003 0310 	and.w	r3, r3, #16
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01a      	beq.n	8007d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1e:	d10a      	bne.n	8007d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007d72:	f7f9 fcc1 	bl	80016f8 <HAL_GetTick>
 8007d76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	d10e      	bne.n	8007da4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f82a 	bl	8007dee <UART_WaitOnFlagUntilTimeout>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e020      	b.n	8007de6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d10e      	bne.n	8007dd0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f814 	bl	8007dee <UART_WaitOnFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e00a      	b.n	8007de6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	603b      	str	r3, [r7, #0]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dfe:	e02a      	b.n	8007e56 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e06:	d026      	beq.n	8007e56 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e08:	f7f9 fc76 	bl	80016f8 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d302      	bcc.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x30>
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d11b      	bne.n	8007e56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2220      	movs	r2, #32
 8007e42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e00f      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69da      	ldr	r2, [r3, #28]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	bf0c      	ite	eq
 8007e66:	2301      	moveq	r3, #1
 8007e68:	2300      	movne	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d0c5      	beq.n	8007e00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e7e:	b084      	sub	sp, #16
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	f107 001c 	add.w	r0, r7, #28
 8007e8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d122      	bne.n	8007edc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d105      	bne.n	8007ed0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f937 	bl	8008144 <USB_CoreReset>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
 8007eda:	e01a      	b.n	8007f12 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f92b 	bl	8008144 <USB_CoreReset>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	639a      	str	r2, [r3, #56]	; 0x38
 8007f04:	e005      	b.n	8007f12 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f1e:	b004      	add	sp, #16
 8007f20:	4770      	bx	lr

08007f22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f043 0201 	orr.w	r2, r3, #1
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f023 0201 	bic.w	r2, r3, #1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f7e:	78fb      	ldrb	r3, [r7, #3]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d106      	bne.n	8007f92 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60da      	str	r2, [r3, #12]
 8007f90:	e00b      	b.n	8007faa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	60da      	str	r2, [r3, #12]
 8007fa4:	e001      	b.n	8007faa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e003      	b.n	8007fb2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007faa:	2032      	movs	r0, #50	; 0x32
 8007fac:	f7f9 fbb0 	bl	8001710 <HAL_Delay>

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	019b      	lsls	r3, r3, #6
 8007fce:	f043 0220 	orr.w	r2, r3, #32
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a09      	ldr	r2, [pc, #36]	; (8008004 <USB_FlushTxFifo+0x48>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d901      	bls.n	8007fe8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e006      	b.n	8007ff6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d0f0      	beq.n	8007fd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	00030d40 	.word	0x00030d40

08008008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2210      	movs	r2, #16
 8008018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a09      	ldr	r2, [pc, #36]	; (8008048 <USB_FlushRxFifo+0x40>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d901      	bls.n	800802c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e006      	b.n	800803a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b10      	cmp	r3, #16
 8008036:	d0f0      	beq.n	800801a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	00030d40 	.word	0x00030d40

0800804c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800804c:	b480      	push	{r7}
 800804e:	b089      	sub	sp, #36	; 0x24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	4611      	mov	r1, r2
 8008058:	461a      	mov	r2, r3
 800805a:	460b      	mov	r3, r1
 800805c:	71fb      	strb	r3, [r7, #7]
 800805e:	4613      	mov	r3, r2
 8008060:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800806a:	88bb      	ldrh	r3, [r7, #4]
 800806c:	3303      	adds	r3, #3
 800806e:	089b      	lsrs	r3, r3, #2
 8008070:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008072:	2300      	movs	r3, #0
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	e00f      	b.n	8008098 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	031a      	lsls	r2, r3, #12
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	4413      	add	r3, r2
 8008080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008084:	461a      	mov	r2, r3
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	3304      	adds	r3, #4
 8008090:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	3301      	adds	r3, #1
 8008096:	61bb      	str	r3, [r7, #24]
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	429a      	cmp	r2, r3
 800809e:	d3eb      	bcc.n	8008078 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3724      	adds	r7, #36	; 0x24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b089      	sub	sp, #36	; 0x24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	4613      	mov	r3, r2
 80080ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	3303      	adds	r3, #3
 80080c8:	089b      	lsrs	r3, r3, #2
 80080ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e00b      	b.n	80080ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	3304      	adds	r3, #4
 80080e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	3301      	adds	r3, #1
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d3ef      	bcc.n	80080d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80080f2:	69fb      	ldr	r3, [r7, #28]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3724      	adds	r7, #36	; 0x24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4013      	ands	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008118:	68fb      	ldr	r3, [r7, #12]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f003 0301 	and.w	r3, r3, #1
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <USB_CoreReset+0x64>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d901      	bls.n	8008162 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e01b      	b.n	800819a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	daf2      	bge.n	8008150 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f043 0201 	orr.w	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3301      	adds	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4a09      	ldr	r2, [pc, #36]	; (80081a8 <USB_CoreReset+0x64>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d901      	bls.n	800818c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e006      	b.n	800819a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b01      	cmp	r3, #1
 8008196:	d0f0      	beq.n	800817a <USB_CoreReset+0x36>

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	00030d40 	.word	0x00030d40

080081ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081ac:	b084      	sub	sp, #16
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	f107 001c 	add.w	r0, r7, #28
 80081ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081c8:	461a      	mov	r2, r3
 80081ca:	2300      	movs	r3, #0
 80081cc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081f4:	f023 0304 	bic.w	r3, r3, #4
 80081f8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80081fa:	2110      	movs	r1, #16
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7ff fedd 	bl	8007fbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff ff00 	bl	8008008 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	e015      	b.n	800823a <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	4413      	add	r3, r2
 8008216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821a:	461a      	mov	r2, r3
 800821c:	f04f 33ff 	mov.w	r3, #4294967295
 8008220:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822e:	461a      	mov	r2, r3
 8008230:	2300      	movs	r3, #0
 8008232:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3301      	adds	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	429a      	cmp	r2, r3
 8008240:	d3e5      	bcc.n	800820e <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008242:	2101      	movs	r1, #1
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f869 	bl	800831c <USB_DriveVbus>

  HAL_Delay(200U);
 800824a:	20c8      	movs	r0, #200	; 0xc8
 800824c:	f7f9 fa60 	bl	8001710 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f04f 32ff 	mov.w	r2, #4294967295
 800825c:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2280      	movs	r2, #128	; 0x80
 8008262:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a0d      	ldr	r2, [pc, #52]	; (800829c <USB_HostInit+0xf0>)
 8008268:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a0c      	ldr	r2, [pc, #48]	; (80082a0 <USB_HostInit+0xf4>)
 800826e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f043 0210 	orr.w	r2, r3, #16
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <USB_HostInit+0xf8>)
 8008284:	4313      	orrs	r3, r2
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008296:	b004      	add	sp, #16
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	00600080 	.word	0x00600080
 80082a0:	004000e0 	.word	0x004000e0
 80082a4:	a3200008 	.word	0xa3200008

080082a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	68f9      	ldr	r1, [r7, #12]
 80082dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80082e0:	4313      	orrs	r3, r2
 80082e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d107      	bne.n	80082fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082f0:	461a      	mov	r2, r3
 80082f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80082f6:	6053      	str	r3, [r2, #4]
 80082f8:	e009      	b.n	800830e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d106      	bne.n	800830e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008306:	461a      	mov	r2, r3
 8008308:	f241 7370 	movw	r3, #6000	; 0x1770
 800830c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008340:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d109      	bne.n	8008360 <USB_DriveVbus+0x44>
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d106      	bne.n	8008360 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800835a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800835e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836a:	d109      	bne.n	8008380 <USB_DriveVbus+0x64>
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800837a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800837e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800838e:	b480      	push	{r7}
 8008390:	b085      	sub	sp, #20
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	b29b      	uxth	r3, r3
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	4608      	mov	r0, r1
 80083ba:	4611      	mov	r1, r2
 80083bc:	461a      	mov	r2, r3
 80083be:	4603      	mov	r3, r0
 80083c0:	70fb      	strb	r3, [r7, #3]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70bb      	strb	r3, [r7, #2]
 80083c6:	4613      	mov	r3, r2
 80083c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083de:	461a      	mov	r2, r3
 80083e0:	f04f 33ff 	mov.w	r3, #4294967295
 80083e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d867      	bhi.n	80084be <USB_HC_Init+0x10e>
 80083ee:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <USB_HC_Init+0x44>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	08008405 	.word	0x08008405
 80083f8:	08008481 	.word	0x08008481
 80083fc:	08008405 	.word	0x08008405
 8008400:	08008443 	.word	0x08008443
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4413      	add	r3, r2
 800840c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008410:	461a      	mov	r2, r3
 8008412:	f240 439d 	movw	r3, #1181	; 0x49d
 8008416:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008418:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800841c:	2b00      	cmp	r3, #0
 800841e:	da51      	bge.n	80084c4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4413      	add	r3, r2
 8008428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	78fa      	ldrb	r2, [r7, #3]
 8008430:	0151      	lsls	r1, r2, #5
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	440a      	add	r2, r1
 8008436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800843a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800843e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008440:	e040      	b.n	80084c4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	4413      	add	r3, r2
 800844a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844e:	461a      	mov	r2, r3
 8008450:	f240 639d 	movw	r3, #1693	; 0x69d
 8008454:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008456:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800845a:	2b00      	cmp	r3, #0
 800845c:	da34      	bge.n	80084c8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	4413      	add	r3, r2
 8008466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	78fa      	ldrb	r2, [r7, #3]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	440a      	add	r2, r1
 8008474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800847c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800847e:	e023      	b.n	80084c8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4413      	add	r3, r2
 8008488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848c:	461a      	mov	r2, r3
 800848e:	f240 2325 	movw	r3, #549	; 0x225
 8008492:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008494:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008498:	2b00      	cmp	r3, #0
 800849a:	da17      	bge.n	80084cc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	78fa      	ldrb	r2, [r7, #3]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084b6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80084ba:	60d3      	str	r3, [r2, #12]
      }
      break;
 80084bc:	e006      	b.n	80084cc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	75fb      	strb	r3, [r7, #23]
      break;
 80084c2:	e004      	b.n	80084ce <USB_HC_Init+0x11e>
      break;
 80084c4:	bf00      	nop
 80084c6:	e002      	b.n	80084ce <USB_HC_Init+0x11e>
      break;
 80084c8:	bf00      	nop
 80084ca:	e000      	b.n	80084ce <USB_HC_Init+0x11e>
      break;
 80084cc:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	f003 030f 	and.w	r3, r3, #15
 80084dc:	2101      	movs	r1, #1
 80084de:	fa01 f303 	lsl.w	r3, r1, r3
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084e8:	4313      	orrs	r3, r2
 80084ea:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80084f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da03      	bge.n	8008508 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	e001      	b.n	800850c <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800850c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008510:	2b02      	cmp	r3, #2
 8008512:	d103      	bne.n	800851c <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e001      	b.n	8008520 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008520:	787b      	ldrb	r3, [r7, #1]
 8008522:	059b      	lsls	r3, r3, #22
 8008524:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008528:	78bb      	ldrb	r3, [r7, #2]
 800852a:	02db      	lsls	r3, r3, #11
 800852c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008530:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008532:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008536:	049b      	lsls	r3, r3, #18
 8008538:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800853c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800853e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008540:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008544:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	0159      	lsls	r1, r3, #5
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	440b      	add	r3, r1
 8008552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008556:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800855c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800855e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008562:	2b03      	cmp	r3, #3
 8008564:	d10f      	bne.n	8008586 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	78fa      	ldrb	r2, [r7, #3]
 8008576:	0151      	lsls	r1, r2, #5
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	440a      	add	r2, r1
 800857c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008584:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008586:	7dfb      	ldrb	r3, [r7, #23]
}
 8008588:	4618      	mov	r0, r3
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	785b      	ldrb	r3, [r3, #1]
 80085a6:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80085a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085ac:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d018      	beq.n	80085e8 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	8912      	ldrh	r2, [r2, #8]
 80085be:	4413      	add	r3, r2
 80085c0:	3b01      	subs	r3, #1
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	8912      	ldrh	r2, [r2, #8]
 80085c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ca:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80085cc:	8bfa      	ldrh	r2, [r7, #30]
 80085ce:	8a7b      	ldrh	r3, [r7, #18]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d90b      	bls.n	80085ec <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80085d4:	8a7b      	ldrh	r3, [r7, #18]
 80085d6:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80085d8:	8bfb      	ldrh	r3, [r7, #30]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	8912      	ldrh	r2, [r2, #8]
 80085de:	fb02 f203 	mul.w	r2, r2, r3
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	611a      	str	r2, [r3, #16]
 80085e6:	e001      	b.n	80085ec <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80085e8:	2301      	movs	r3, #1
 80085ea:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	78db      	ldrb	r3, [r3, #3]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d006      	beq.n	8008602 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80085f4:	8bfb      	ldrh	r3, [r7, #30]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	8912      	ldrh	r2, [r2, #8]
 80085fa:	fb02 f203 	mul.w	r2, r2, r3
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800860a:	8bfb      	ldrh	r3, [r7, #30]
 800860c:	04d9      	lsls	r1, r3, #19
 800860e:	4b5f      	ldr	r3, [pc, #380]	; (800878c <USB_HC_StartXfer+0x1f8>)
 8008610:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008612:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	7a9b      	ldrb	r3, [r3, #10]
 8008618:	075b      	lsls	r3, r3, #29
 800861a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800861e:	6979      	ldr	r1, [r7, #20]
 8008620:	0148      	lsls	r0, r1, #5
 8008622:	69b9      	ldr	r1, [r7, #24]
 8008624:	4401      	add	r1, r0
 8008626:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800862a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800862c:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	bf0c      	ite	eq
 800863e:	2301      	moveq	r3, #1
 8008640:	2300      	movne	r3, #0
 8008642:	b2db      	uxtb	r3, r3
 8008644:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	4413      	add	r3, r2
 800864e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	440a      	add	r2, r1
 800865c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008660:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008664:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	4413      	add	r3, r2
 800866e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	7c7b      	ldrb	r3, [r7, #17]
 8008676:	075b      	lsls	r3, r3, #29
 8008678:	6979      	ldr	r1, [r7, #20]
 800867a:	0148      	lsls	r0, r1, #5
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	4401      	add	r1, r0
 8008680:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008684:	4313      	orrs	r3, r2
 8008686:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	4413      	add	r3, r2
 8008690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a3e      	ldr	r2, [pc, #248]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 8008698:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800869a:	4b3d      	ldr	r3, [pc, #244]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086a2:	4a3b      	ldr	r2, [pc, #236]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 80086a4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	78db      	ldrb	r3, [r3, #3]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d006      	beq.n	80086bc <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80086ae:	4b38      	ldr	r3, [pc, #224]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b6:	4a36      	ldr	r2, [pc, #216]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	e005      	b.n	80086c8 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80086bc:	4b34      	ldr	r3, [pc, #208]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086c4:	4a32      	ldr	r2, [pc, #200]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 80086c6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086c8:	4b31      	ldr	r3, [pc, #196]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086d0:	4a2f      	ldr	r2, [pc, #188]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 80086d2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e0:	461a      	mov	r2, r3
 80086e2:	4b2b      	ldr	r3, [pc, #172]	; (8008790 <USB_HC_StartXfer+0x1fc>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	78db      	ldrb	r3, [r3, #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d148      	bne.n	8008782 <USB_HC_StartXfer+0x1ee>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d044      	beq.n	8008782 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	79db      	ldrb	r3, [r3, #7]
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d831      	bhi.n	8008764 <USB_HC_StartXfer+0x1d0>
 8008700:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <USB_HC_StartXfer+0x174>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	08008719 	.word	0x08008719
 800870c:	0800873d 	.word	0x0800873d
 8008710:	08008719 	.word	0x08008719
 8008714:	0800873d 	.word	0x0800873d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	3303      	adds	r3, #3
 800871e:	089b      	lsrs	r3, r3, #2
 8008720:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008722:	89fa      	ldrh	r2, [r7, #14]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	b29b      	uxth	r3, r3
 800872a:	429a      	cmp	r2, r3
 800872c:	d91c      	bls.n	8008768 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	f043 0220 	orr.w	r2, r3, #32
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	619a      	str	r2, [r3, #24]
          }
          break;
 800873a:	e015      	b.n	8008768 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	3303      	adds	r3, #3
 8008742:	089b      	lsrs	r3, r3, #2
 8008744:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008746:	89fa      	ldrh	r2, [r7, #14]
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	b29b      	uxth	r3, r3
 8008752:	429a      	cmp	r2, r3
 8008754:	d90a      	bls.n	800876c <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	619a      	str	r2, [r3, #24]
          }
          break;
 8008762:	e003      	b.n	800876c <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <USB_HC_StartXfer+0x1da>
          break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <USB_HC_StartXfer+0x1da>
          break;
 800876c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68d9      	ldr	r1, [r3, #12]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	785a      	ldrb	r2, [r3, #1]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	b29b      	uxth	r3, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff fc65 	bl	800804c <USB_WritePacket>
    }

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	1ff80000 	.word	0x1ff80000
 8008790:	200000b4 	.word	0x200000b4

08008794 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	b29b      	uxth	r3, r3
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b087      	sub	sp, #28
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	0c9b      	lsrs	r3, r3, #18
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <USB_HC_Halt+0x3a>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d16c      	bne.n	80088ca <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	440a      	add	r2, r1
 8008806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800880a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800880e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d143      	bne.n	80088a4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	440a      	add	r2, r1
 8008832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800883a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	4413      	add	r3, r2
 8008844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	0151      	lsls	r1, r2, #5
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	440a      	add	r2, r1
 8008852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800885a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	4413      	add	r3, r2
 8008864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	440a      	add	r2, r1
 8008872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800887a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	3301      	adds	r3, #1
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008888:	d81d      	bhi.n	80088c6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	4413      	add	r3, r2
 8008892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800889c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088a0:	d0ec      	beq.n	800887c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088a2:	e080      	b.n	80089a6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088c2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088c4:	e06f      	b.n	80089a6 <USB_HC_Halt+0x1f0>
          break;
 80088c6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088c8:	e06d      	b.n	80089a6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	0151      	lsls	r1, r2, #5
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	440a      	add	r2, r1
 80088e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088e8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d143      	bne.n	8008982 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	4413      	add	r3, r2
 8008902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	440a      	add	r2, r1
 8008910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008918:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	4413      	add	r3, r2
 8008922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	440a      	add	r2, r1
 8008930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008938:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	440a      	add	r2, r1
 8008950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008954:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008958:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	3301      	adds	r3, #1
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008966:	d81d      	bhi.n	80089a4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4413      	add	r3, r2
 8008970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800897a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800897e:	d0ec      	beq.n	800895a <USB_HC_Halt+0x1a4>
 8008980:	e011      	b.n	80089a6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	4413      	add	r3, r2
 800898a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	0151      	lsls	r1, r2, #5
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	440a      	add	r2, r1
 8008998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800899c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	e000      	b.n	80089a6 <USB_HC_Halt+0x1f0>
          break;
 80089a4:	bf00      	nop
    }
  }

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff fabd 	bl	8007f44 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80089ca:	2110      	movs	r1, #16
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff faf5 	bl	8007fbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff fb18 	bl	8008008 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80089d8:	2300      	movs	r3, #0
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	e01f      	b.n	8008a1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a12:	461a      	mov	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	613b      	str	r3, [r7, #16]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b0f      	cmp	r3, #15
 8008a22:	d9dc      	bls.n	80089de <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008a24:	2300      	movs	r3, #0
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	e034      	b.n	8008a94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5e:	461a      	mov	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	3301      	adds	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a70:	d80c      	bhi.n	8008a8c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a88:	d0ec      	beq.n	8008a64 <USB_StopHost+0xb0>
 8008a8a:	e000      	b.n	8008a8e <USB_StopHost+0xda>
        break;
 8008a8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	3301      	adds	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d9c7      	bls.n	8008a2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff fa36 	bl	8007f22 <USB_EnableGlobalInt>

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8008ac0:	b590      	push	{r4, r7, lr}
 8008ac2:	b089      	sub	sp, #36	; 0x24
 8008ac4:	af04      	add	r7, sp, #16
 8008ac6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8008acc:	2301      	movs	r3, #1
 8008ace:	2202      	movs	r2, #2
 8008ad0:	2102      	movs	r1, #2
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fc3a 	bl	800934c <USBH_FindInterface>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2bff      	cmp	r3, #255	; 0xff
 8008ae0:	f000 812a 	beq.w	8008d38 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fc13 	bl	8009314 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8008af4:	2050      	movs	r0, #80	; 0x50
 8008af6:	f001 fb0d 	bl	800a114 <malloc>
 8008afa:	4603      	mov	r3, r0
 8008afc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	211a      	movs	r1, #26
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	4413      	add	r3, r2
 8008b14:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	b25b      	sxtb	r3, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	da15      	bge.n	8008b4c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	211a      	movs	r1, #26
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008b30:	781a      	ldrb	r2, [r3, #0]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	211a      	movs	r1, #26
 8008b3c:	fb01 f303 	mul.w	r3, r1, r3
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008b46:	881a      	ldrh	r2, [r3, #0]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 ff9f 	bl	8009a96 <USBH_AllocPipe>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	7819      	ldrb	r1, [r3, #0]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	7858      	ldrb	r0, [r3, #1]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	8952      	ldrh	r2, [r2, #10]
 8008b78:	9202      	str	r2, [sp, #8]
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	9201      	str	r2, [sp, #4]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	4623      	mov	r3, r4
 8008b82:	4602      	mov	r2, r0
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 ff57 	bl	8009a38 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fa18 	bl	8009fc8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8008b98:	2300      	movs	r3, #0
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	210a      	movs	r1, #10
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fbd4 	bl	800934c <USBH_FindInterface>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	2bff      	cmp	r3, #255	; 0xff
 8008bac:	f000 80c4 	beq.w	8008d38 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	211a      	movs	r1, #26
 8008bb6:	fb01 f303 	mul.w	r3, r1, r3
 8008bba:	4413      	add	r3, r2
 8008bbc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	b25b      	sxtb	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	da16      	bge.n	8008bf6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	211a      	movs	r1, #26
 8008bce:	fb01 f303 	mul.w	r3, r1, r3
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	211a      	movs	r1, #26
 8008be4:	fb01 f303 	mul.w	r3, r1, r3
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008bee:	881a      	ldrh	r2, [r3, #0]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	835a      	strh	r2, [r3, #26]
 8008bf4:	e015      	b.n	8008c22 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	211a      	movs	r1, #26
 8008bfc:	fb01 f303 	mul.w	r3, r1, r3
 8008c00:	4413      	add	r3, r2
 8008c02:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	211a      	movs	r1, #26
 8008c12:	fb01 f303 	mul.w	r3, r1, r3
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008c1c:	881a      	ldrh	r2, [r3, #0]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	211a      	movs	r1, #26
 8008c28:	fb01 f303 	mul.w	r3, r1, r3
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	b25b      	sxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da16      	bge.n	8008c68 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	211a      	movs	r1, #26
 8008c40:	fb01 f303 	mul.w	r3, r1, r3
 8008c44:	4413      	add	r3, r2
 8008c46:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	211a      	movs	r1, #26
 8008c56:	fb01 f303 	mul.w	r3, r1, r3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008c60:	881a      	ldrh	r2, [r3, #0]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	835a      	strh	r2, [r3, #26]
 8008c66:	e015      	b.n	8008c94 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	211a      	movs	r1, #26
 8008c6e:	fb01 f303 	mul.w	r3, r1, r3
 8008c72:	4413      	add	r3, r2
 8008c74:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008c78:	781a      	ldrb	r2, [r3, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	211a      	movs	r1, #26
 8008c84:	fb01 f303 	mul.w	r3, r1, r3
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008c8e:	881a      	ldrh	r2, [r3, #0]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	7b9b      	ldrb	r3, [r3, #14]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fefb 	bl	8009a96 <USBH_AllocPipe>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	7bdb      	ldrb	r3, [r3, #15]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fef1 	bl	8009a96 <USBH_AllocPipe>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	7b59      	ldrb	r1, [r3, #13]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	7b98      	ldrb	r0, [r3, #14]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	8b12      	ldrh	r2, [r2, #24]
 8008cd4:	9202      	str	r2, [sp, #8]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	9201      	str	r2, [sp, #4]
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	4623      	mov	r3, r4
 8008cde:	4602      	mov	r2, r0
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fea9 	bl	8009a38 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	7b19      	ldrb	r1, [r3, #12]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	7bd8      	ldrb	r0, [r3, #15]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	8b52      	ldrh	r2, [r2, #26]
 8008cfe:	9202      	str	r2, [sp, #8]
 8008d00:	2202      	movs	r2, #2
 8008d02:	9201      	str	r2, [sp, #4]
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	4623      	mov	r3, r4
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fe94 	bl	8009a38 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	7b5b      	ldrb	r3, [r3, #13]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f951 	bl	8009fc8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	7b1b      	ldrb	r3, [r3, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 f94a 	bl	8009fc8 <USBH_LL_SetToggle>
      status = USBH_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd90      	pop	{r4, r7, pc}

08008d42 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00e      	beq.n	8008d7a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fe87 	bl	8009a76 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 feaf 	bl	8009ad2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	7b1b      	ldrb	r3, [r3, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00e      	beq.n	8008da0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	7b1b      	ldrb	r3, [r3, #12]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fe74 	bl	8009a76 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	7b1b      	ldrb	r3, [r3, #12]
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fe9c 	bl	8009ad2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	7b5b      	ldrb	r3, [r3, #13]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00e      	beq.n	8008dc6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	7b5b      	ldrb	r3, [r3, #13]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fe61 	bl	8009a76 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	7b5b      	ldrb	r3, [r3, #13]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fe89 	bl	8009ad2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 f9a2 	bl	800a124 <free>
    phost->pActiveClass->pData = 0U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008de6:	2200      	movs	r2, #0
 8008de8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	3340      	adds	r3, #64	; 0x40
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f8b2 	bl	8008f7a <GetLineCoding>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008e26:	2102      	movs	r1, #2
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	4798      	blx	r3
  }
  return status;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
	...

08008e38 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d877      	bhi.n	8008f4c <USBH_CDC_Process+0x114>
 8008e5c:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <USBH_CDC_Process+0x2c>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e79 	.word	0x08008e79
 8008e68:	08008e7f 	.word	0x08008e7f
 8008e6c:	08008eaf 	.word	0x08008eaf
 8008e70:	08008f23 	.word	0x08008f23
 8008e74:	08008f31 	.word	0x08008f31
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e7c:	e06d      	b.n	8008f5a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f897 	bl	8008fb8 <SetLineCoding>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008e9c:	e058      	b.n	8008f50 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d055      	beq.n	8008f50 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008eac:	e050      	b.n	8008f50 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	3340      	adds	r3, #64	; 0x40
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f860 	bl	8008f7a <GetLineCoding>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d126      	bne.n	8008f12 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed6:	791b      	ldrb	r3, [r3, #4]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d13b      	bne.n	8008f54 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d133      	bne.n	8008f54 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ef6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d12b      	bne.n	8008f54 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f04:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d124      	bne.n	8008f54 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f95a 	bl	80091c4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8008f10:	e020      	b.n	8008f54 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d01d      	beq.n	8008f54 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2204      	movs	r2, #4
 8008f1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8008f20:	e018      	b.n	8008f54 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f867 	bl	8008ff6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f8dc 	bl	80090e6 <CDC_ProcessReception>
    break;
 8008f2e:	e014      	b.n	8008f5a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8008f30:	2100      	movs	r1, #0
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fb08 	bl	8009548 <USBH_ClrFeature>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8008f4a:	e005      	b.n	8008f58 <USBH_CDC_Process+0x120>

  default:
    break;
 8008f4c:	bf00      	nop
 8008f4e:	e004      	b.n	8008f5a <USBH_CDC_Process+0x122>
    break;
 8008f50:	bf00      	nop
 8008f52:	e002      	b.n	8008f5a <USBH_CDC_Process+0x122>
    break;
 8008f54:	bf00      	nop
 8008f56:	e000      	b.n	8008f5a <USBH_CDC_Process+0x122>
    break;
 8008f58:	bf00      	nop

  }

  return status;
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	22a1      	movs	r2, #161	; 0xa1
 8008f88:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2221      	movs	r2, #33	; 0x21
 8008f8e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2207      	movs	r2, #7
 8008fa0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2207      	movs	r2, #7
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 faf1 	bl	8009590 <USBH_CtlReq>
 8008fae:	4603      	mov	r3, r0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2221      	movs	r2, #33	; 0x21
 8008fc6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2207      	movs	r2, #7
 8008fde:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2207      	movs	r2, #7
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fad2 	bl	8009590 <USBH_CtlReq>
 8008fec:	4603      	mov	r3, r0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b086      	sub	sp, #24
 8008ffa:	af02      	add	r7, sp, #8
 8008ffc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009008:	2300      	movs	r3, #0
 800900a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009012:	2b01      	cmp	r3, #1
 8009014:	d002      	beq.n	800901c <CDC_ProcessTransmission+0x26>
 8009016:	2b02      	cmp	r3, #2
 8009018:	d025      	beq.n	8009066 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800901a:	e060      	b.n	80090de <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	8b12      	ldrh	r2, [r2, #24]
 8009024:	4293      	cmp	r3, r2
 8009026:	d90c      	bls.n	8009042 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	69d9      	ldr	r1, [r3, #28]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8b1a      	ldrh	r2, [r3, #24]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	7b58      	ldrb	r0, [r3, #13]
 8009034:	2301      	movs	r3, #1
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	4603      	mov	r3, r0
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fcb9 	bl	80099b2 <USBH_BulkSendData>
 8009040:	e00c      	b.n	800905c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800904a:	b29a      	uxth	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	7b58      	ldrb	r0, [r3, #13]
 8009050:	2301      	movs	r3, #1
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	4603      	mov	r3, r0
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fcab 	bl	80099b2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8009064:	e03b      	b.n	80090de <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	7b5b      	ldrb	r3, [r3, #13]
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 ff81 	bl	8009f74 <USBH_LL_GetURBState>
 8009072:	4603      	mov	r3, r0
 8009074:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d128      	bne.n	80090ce <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	8b12      	ldrh	r2, [r2, #24]
 8009084:	4293      	cmp	r3, r2
 8009086:	d90e      	bls.n	80090a6 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	8b12      	ldrh	r2, [r2, #24]
 8009090:	1a9a      	subs	r2, r3, r2
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	8b12      	ldrh	r2, [r2, #24]
 800909e:	441a      	add	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	61da      	str	r2, [r3, #28]
 80090a4:	e002      	b.n	80090ac <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80090bc:	e00e      	b.n	80090dc <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f868 	bl	800919c <USBH_CDC_TransmitCallback>
    break;
 80090cc:	e006      	b.n	80090dc <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d103      	bne.n	80090dc <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80090dc:	bf00      	nop
  }
}
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009102:	2b03      	cmp	r3, #3
 8009104:	d002      	beq.n	800910c <CDC_ProcessReception+0x26>
 8009106:	2b04      	cmp	r3, #4
 8009108:	d00e      	beq.n	8009128 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800910a:	e043      	b.n	8009194 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	6a19      	ldr	r1, [r3, #32]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	8b5a      	ldrh	r2, [r3, #26]
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	7b1b      	ldrb	r3, [r3, #12]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fc6f 	bl	80099fc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2204      	movs	r2, #4
 8009122:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8009126:	e035      	b.n	8009194 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	7b1b      	ldrb	r3, [r3, #12]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 ff20 	bl	8009f74 <USBH_LL_GetURBState>
 8009134:	4603      	mov	r3, r0
 8009136:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8009138:	7cfb      	ldrb	r3, [r7, #19]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d129      	bne.n	8009192 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	7b1b      	ldrb	r3, [r3, #12]
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fe83 	bl	8009e50 <USBH_LL_GetLastXferSize>
 800914a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	429a      	cmp	r2, r3
 8009154:	d016      	beq.n	8009184 <CDC_ProcessReception+0x9e>
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	8b5b      	ldrh	r3, [r3, #26]
 800915a:	461a      	mov	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4293      	cmp	r3, r2
 8009160:	d910      	bls.n	8009184 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	1ad2      	subs	r2, r2, r3
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	6a1a      	ldr	r2, [r3, #32]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	441a      	add	r2, r3
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2203      	movs	r2, #3
 800917e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8009182:	e006      	b.n	8009192 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f80f 	bl	80091b0 <USBH_CDC_ReceiveCallback>
    break;
 8009192:	bf00      	nop
  }
}
 8009194:	bf00      	nop
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]

}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]

}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]

}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80091ec:	2302      	movs	r3, #2
 80091ee:	e019      	b.n	8009224 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	79fa      	ldrb	r2, [r7, #7]
 80091f4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f80f 	bl	800922c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fda5 	bl	8009d6c <USBH_LL_Init>

  return USBH_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009238:	e008      	b.n	800924c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	32e0      	adds	r2, #224	; 0xe0
 8009240:	2100      	movs	r1, #0
 8009242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b0e      	cmp	r3, #14
 8009250:	d9f3      	bls.n	800923a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	e009      	b.n	800926c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009272:	d3f1      	bcc.n	8009258 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2240      	movs	r2, #64	; 0x40
 8009298:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d017      	beq.n	8009302 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10f      	bne.n	80092fc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092e2:	1c59      	adds	r1, r3, #1
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	33dc      	adds	r3, #220	; 0xdc
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
 80092fa:	e004      	b.n	8009306 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092fc:	2302      	movs	r3, #2
 80092fe:	73fb      	strb	r3, [r7, #15]
 8009300:	e001      	b.n	8009306 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009302:	2302      	movs	r3, #2
 8009304:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009306:	7bfb      	ldrb	r3, [r7, #15]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	429a      	cmp	r2, r3
 800932e:	d204      	bcs.n	800933a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8009338:	e001      	b.n	800933e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800933a:	2302      	movs	r3, #2
 800933c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800933e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	461a      	mov	r2, r3
 800935a:	4603      	mov	r3, r0
 800935c:	70fb      	strb	r3, [r7, #3]
 800935e:	460b      	mov	r3, r1
 8009360:	70bb      	strb	r3, [r7, #2]
 8009362:	4613      	mov	r3, r2
 8009364:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800936a:	2300      	movs	r3, #0
 800936c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009374:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009376:	e025      	b.n	80093c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	221a      	movs	r2, #26
 800937c:	fb02 f303 	mul.w	r3, r2, r3
 8009380:	3308      	adds	r3, #8
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4413      	add	r3, r2
 8009386:	3302      	adds	r3, #2
 8009388:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	795b      	ldrb	r3, [r3, #5]
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	429a      	cmp	r2, r3
 8009392:	d002      	beq.n	800939a <USBH_FindInterface+0x4e>
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	2bff      	cmp	r3, #255	; 0xff
 8009398:	d111      	bne.n	80093be <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800939e:	78ba      	ldrb	r2, [r7, #2]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d002      	beq.n	80093aa <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80093a4:	78bb      	ldrb	r3, [r7, #2]
 80093a6:	2bff      	cmp	r3, #255	; 0xff
 80093a8:	d109      	bne.n	80093be <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80093ae:	787a      	ldrb	r2, [r7, #1]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d002      	beq.n	80093ba <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093b4:	787b      	ldrb	r3, [r7, #1]
 80093b6:	2bff      	cmp	r3, #255	; 0xff
 80093b8:	d101      	bne.n	80093be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	e006      	b.n	80093cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	3301      	adds	r3, #1
 80093c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d9d6      	bls.n	8009378 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80093ca:	23ff      	movs	r3, #255	; 0xff
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fcff 	bl	8009de4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80093e6:	2101      	movs	r1, #1
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fdd6 	bl	8009f9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f804 	bl	800943a <USBH_HandleSof>
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b0b      	cmp	r3, #11
 800944a:	d10a      	bne.n	8009462 <USBH_HandleSof+0x28>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4798      	blx	r3
  }
}
 8009462:	bf00      	nop
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800947a:	bf00      	nop
}
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009496:	bf00      	nop
}
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10f      	bne.n	80094d4 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00e      	beq.n	80094e4 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094cc:	2104      	movs	r1, #4
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4798      	blx	r3
 80094d2:	e007      	b.n	80094e4 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d102      	bne.n	80094e4 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fc8f 	bl	8009e1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	791b      	ldrb	r3, [r3, #4]
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fae5 	bl	8009ad2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	795b      	ldrb	r3, [r3, #5]
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fadf 	bl	8009ad2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009522:	2b00      	cmp	r3, #0
 8009524:	d005      	beq.n	8009532 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800952c:	2105      	movs	r1, #5
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fc56 	bl	8009de4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2203      	movs	r2, #3
 800953c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	789b      	ldrb	r3, [r3, #2]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d10f      	bne.n	800957c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800957c:	2200      	movs	r2, #0
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f805 	bl	8009590 <USBH_CtlReq>
 8009586:	4603      	mov	r3, r0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	4613      	mov	r3, r2
 800959c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	789b      	ldrb	r3, [r3, #2]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d002      	beq.n	80095b0 <USBH_CtlReq+0x20>
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d00f      	beq.n	80095ce <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80095ae:	e034      	b.n	800961a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	88fa      	ldrh	r2, [r7, #6]
 80095ba:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2201      	movs	r2, #1
 80095c0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2202      	movs	r2, #2
 80095c6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80095c8:	2301      	movs	r3, #1
 80095ca:	75fb      	strb	r3, [r7, #23]
    break;
 80095cc:	e025      	b.n	800961a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f000 f828 	bl	8009624 <USBH_HandleControl>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d108      	bne.n	80095f0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2201      	movs	r2, #1
 80095e2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]
    break;
 80095ee:	e013      	b.n	8009618 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d108      	bne.n	8009608 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009602:	2303      	movs	r3, #3
 8009604:	75fb      	strb	r3, [r7, #23]
    break;
 8009606:	e007      	b.n	8009618 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d104      	bne.n	8009618 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2201      	movs	r2, #1
 8009612:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009614:	2302      	movs	r3, #2
 8009616:	75fb      	strb	r3, [r7, #23]
    break;
 8009618:	bf00      	nop
  }
  return status;
 800961a:	7dfb      	ldrb	r3, [r7, #23]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af02      	add	r7, sp, #8
 800962a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800962c:	2301      	movs	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009630:	2300      	movs	r3, #0
 8009632:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7e1b      	ldrb	r3, [r3, #24]
 8009638:	3b01      	subs	r3, #1
 800963a:	2b0a      	cmp	r3, #10
 800963c:	f200 814c 	bhi.w	80098d8 <USBH_HandleControl+0x2b4>
 8009640:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <USBH_HandleControl+0x24>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	08009675 	.word	0x08009675
 800964c:	0800968f 	.word	0x0800968f
 8009650:	080096f9 	.word	0x080096f9
 8009654:	0800971f 	.word	0x0800971f
 8009658:	08009757 	.word	0x08009757
 800965c:	08009783 	.word	0x08009783
 8009660:	080097d5 	.word	0x080097d5
 8009664:	080097f7 	.word	0x080097f7
 8009668:	08009833 	.word	0x08009833
 800966c:	0800985b 	.word	0x0800985b
 8009670:	08009899 	.word	0x08009899
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f103 0110 	add.w	r1, r3, #16
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	795b      	ldrb	r3, [r3, #5]
 800967e:	461a      	mov	r2, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f939 	bl	80098f8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	761a      	strb	r2, [r3, #24]
    break;
 800968c:	e12f      	b.n	80098ee <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	795b      	ldrb	r3, [r3, #5]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc6d 	bl	8009f74 <USBH_LL_GetURBState>
 800969a:	4603      	mov	r3, r0
 800969c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d11e      	bne.n	80096e2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	7c1b      	ldrb	r3, [r3, #16]
 80096a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096ac:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	8adb      	ldrh	r3, [r3, #22]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80096b6:	7b7b      	ldrb	r3, [r7, #13]
 80096b8:	2b80      	cmp	r3, #128	; 0x80
 80096ba:	d103      	bne.n	80096c4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2203      	movs	r2, #3
 80096c0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80096c2:	e10b      	b.n	80098dc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2205      	movs	r2, #5
 80096c8:	761a      	strb	r2, [r3, #24]
    break;
 80096ca:	e107      	b.n	80098dc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80096cc:	7b7b      	ldrb	r3, [r7, #13]
 80096ce:	2b80      	cmp	r3, #128	; 0x80
 80096d0:	d103      	bne.n	80096da <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2209      	movs	r2, #9
 80096d6:	761a      	strb	r2, [r3, #24]
    break;
 80096d8:	e100      	b.n	80098dc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2207      	movs	r2, #7
 80096de:	761a      	strb	r2, [r3, #24]
    break;
 80096e0:	e0fc      	b.n	80098dc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	d003      	beq.n	80096f0 <USBH_HandleControl+0xcc>
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	f040 80f6 	bne.w	80098dc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	220b      	movs	r2, #11
 80096f4:	761a      	strb	r2, [r3, #24]
    break;
 80096f6:	e0f1      	b.n	80098dc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80096fe:	b29a      	uxth	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6899      	ldr	r1, [r3, #8]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	899a      	ldrh	r2, [r3, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	791b      	ldrb	r3, [r3, #4]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f930 	bl	8009976 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2204      	movs	r2, #4
 800971a:	761a      	strb	r2, [r3, #24]
    break;
 800971c:	e0e7      	b.n	80098ee <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	791b      	ldrb	r3, [r3, #4]
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc25 	bl	8009f74 <USBH_LL_GetURBState>
 800972a:	4603      	mov	r3, r0
 800972c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d102      	bne.n	800973a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2209      	movs	r2, #9
 8009738:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	2b05      	cmp	r3, #5
 800973e:	d102      	bne.n	8009746 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8009740:	2303      	movs	r3, #3
 8009742:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009744:	e0cc      	b.n	80098e0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8009746:	7bbb      	ldrb	r3, [r7, #14]
 8009748:	2b04      	cmp	r3, #4
 800974a:	f040 80c9 	bne.w	80098e0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	220b      	movs	r2, #11
 8009752:	761a      	strb	r2, [r3, #24]
    break;
 8009754:	e0c4      	b.n	80098e0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6899      	ldr	r1, [r3, #8]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	899a      	ldrh	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	7958      	ldrb	r0, [r3, #5]
 8009762:	2301      	movs	r3, #1
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	4603      	mov	r3, r0
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f8df 	bl	800992c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009774:	b29a      	uxth	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2206      	movs	r2, #6
 800977e:	761a      	strb	r2, [r3, #24]
    break;
 8009780:	e0b5      	b.n	80098ee <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	795b      	ldrb	r3, [r3, #5]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fbf3 	bl	8009f74 <USBH_LL_GetURBState>
 800978e:	4603      	mov	r3, r0
 8009790:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d103      	bne.n	80097a0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2207      	movs	r2, #7
 800979c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800979e:	e0a1      	b.n	80098e4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	d105      	bne.n	80097b2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	220c      	movs	r2, #12
 80097aa:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80097ac:	2303      	movs	r3, #3
 80097ae:	73fb      	strb	r3, [r7, #15]
    break;
 80097b0:	e098      	b.n	80098e4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d103      	bne.n	80097c0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2205      	movs	r2, #5
 80097bc:	761a      	strb	r2, [r3, #24]
    break;
 80097be:	e091      	b.n	80098e4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	f040 808e 	bne.w	80098e4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	220b      	movs	r2, #11
 80097cc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80097ce:	2302      	movs	r3, #2
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e087      	b.n	80098e4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	791b      	ldrb	r3, [r3, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	2100      	movs	r1, #0
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f8ca 	bl	8009976 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2208      	movs	r2, #8
 80097f2:	761a      	strb	r2, [r3, #24]

    break;
 80097f4:	e07b      	b.n	80098ee <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	791b      	ldrb	r3, [r3, #4]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fbb9 	bl	8009f74 <USBH_LL_GetURBState>
 8009802:	4603      	mov	r3, r0
 8009804:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d105      	bne.n	8009818 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	220d      	movs	r2, #13
 8009810:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009816:	e067      	b.n	80098e8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	2b04      	cmp	r3, #4
 800981c:	d103      	bne.n	8009826 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	220b      	movs	r2, #11
 8009822:	761a      	strb	r2, [r3, #24]
    break;
 8009824:	e060      	b.n	80098e8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	2b05      	cmp	r3, #5
 800982a:	d15d      	bne.n	80098e8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800982c:	2303      	movs	r3, #3
 800982e:	73fb      	strb	r3, [r7, #15]
    break;
 8009830:	e05a      	b.n	80098e8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	795a      	ldrb	r2, [r3, #5]
 8009836:	2301      	movs	r3, #1
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4613      	mov	r3, r2
 800983c:	2200      	movs	r2, #0
 800983e:	2100      	movs	r1, #0
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f873 	bl	800992c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800984c:	b29a      	uxth	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	220a      	movs	r2, #10
 8009856:	761a      	strb	r2, [r3, #24]
    break;
 8009858:	e049      	b.n	80098ee <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	795b      	ldrb	r3, [r3, #5]
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fb87 	bl	8009f74 <USBH_LL_GetURBState>
 8009866:	4603      	mov	r3, r0
 8009868:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d105      	bne.n	800987c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	220d      	movs	r2, #13
 8009878:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800987a:	e037      	b.n	80098ec <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	2b02      	cmp	r3, #2
 8009880:	d103      	bne.n	800988a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2209      	movs	r2, #9
 8009886:	761a      	strb	r2, [r3, #24]
    break;
 8009888:	e030      	b.n	80098ec <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	2b04      	cmp	r3, #4
 800988e:	d12d      	bne.n	80098ec <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	220b      	movs	r2, #11
 8009894:	761a      	strb	r2, [r3, #24]
    break;
 8009896:	e029      	b.n	80098ec <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7e5b      	ldrb	r3, [r3, #25]
 800989c:	3301      	adds	r3, #1
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	765a      	strb	r2, [r3, #25]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7e5b      	ldrb	r3, [r3, #25]
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d809      	bhi.n	80098c0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fab4 	bl	8009e1a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80098be:	e016      	b.n	80098ee <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098c6:	2106      	movs	r1, #6
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80098d2:	2302      	movs	r3, #2
 80098d4:	73fb      	strb	r3, [r7, #15]
    break;
 80098d6:	e00a      	b.n	80098ee <USBH_HandleControl+0x2ca>

  default:
    break;
 80098d8:	bf00      	nop
 80098da:	e008      	b.n	80098ee <USBH_HandleControl+0x2ca>
    break;
 80098dc:	bf00      	nop
 80098de:	e006      	b.n	80098ee <USBH_HandleControl+0x2ca>
    break;
 80098e0:	bf00      	nop
 80098e2:	e004      	b.n	80098ee <USBH_HandleControl+0x2ca>
    break;
 80098e4:	bf00      	nop
 80098e6:	e002      	b.n	80098ee <USBH_HandleControl+0x2ca>
    break;
 80098e8:	bf00      	nop
 80098ea:	e000      	b.n	80098ee <USBH_HandleControl+0x2ca>
    break;
 80098ec:	bf00      	nop
  }
  return status;
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af04      	add	r7, sp, #16
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	4613      	mov	r3, r2
 8009904:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009906:	79f9      	ldrb	r1, [r7, #7]
 8009908:	2300      	movs	r3, #0
 800990a:	9303      	str	r3, [sp, #12]
 800990c:	2308      	movs	r3, #8
 800990e:	9302      	str	r3, [sp, #8]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	2300      	movs	r3, #0
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	2300      	movs	r3, #0
 800991a:	2200      	movs	r2, #0
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 faf8 	bl	8009f12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af04      	add	r7, sp, #16
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	4611      	mov	r1, r2
 8009938:	461a      	mov	r2, r3
 800993a:	460b      	mov	r3, r1
 800993c:	80fb      	strh	r3, [r7, #6]
 800993e:	4613      	mov	r3, r2
 8009940:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009950:	7979      	ldrb	r1, [r7, #5]
 8009952:	7e3b      	ldrb	r3, [r7, #24]
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	9302      	str	r3, [sp, #8]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	2301      	movs	r3, #1
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	2300      	movs	r3, #0
 8009964:	2200      	movs	r2, #0
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 fad3 	bl	8009f12 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b088      	sub	sp, #32
 800997a:	af04      	add	r7, sp, #16
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	4611      	mov	r1, r2
 8009982:	461a      	mov	r2, r3
 8009984:	460b      	mov	r3, r1
 8009986:	80fb      	strh	r3, [r7, #6]
 8009988:	4613      	mov	r3, r2
 800998a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800998c:	7979      	ldrb	r1, [r7, #5]
 800998e:	2300      	movs	r3, #0
 8009990:	9303      	str	r3, [sp, #12]
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	9302      	str	r3, [sp, #8]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	9301      	str	r3, [sp, #4]
 800999a:	2301      	movs	r3, #1
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	2300      	movs	r3, #0
 80099a0:	2201      	movs	r2, #1
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 fab5 	bl	8009f12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099a8:	2300      	movs	r3, #0

}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b088      	sub	sp, #32
 80099b6:	af04      	add	r7, sp, #16
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	4611      	mov	r1, r2
 80099be:	461a      	mov	r2, r3
 80099c0:	460b      	mov	r3, r1
 80099c2:	80fb      	strh	r3, [r7, #6]
 80099c4:	4613      	mov	r3, r2
 80099c6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099d6:	7979      	ldrb	r1, [r7, #5]
 80099d8:	7e3b      	ldrb	r3, [r7, #24]
 80099da:	9303      	str	r3, [sp, #12]
 80099dc:	88fb      	ldrh	r3, [r7, #6]
 80099de:	9302      	str	r3, [sp, #8]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	2301      	movs	r3, #1
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	2302      	movs	r3, #2
 80099ea:	2200      	movs	r2, #0
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 fa90 	bl	8009f12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af04      	add	r7, sp, #16
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	4611      	mov	r1, r2
 8009a08:	461a      	mov	r2, r3
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	80fb      	strh	r3, [r7, #6]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009a12:	7979      	ldrb	r1, [r7, #5]
 8009a14:	2300      	movs	r3, #0
 8009a16:	9303      	str	r3, [sp, #12]
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	9302      	str	r3, [sp, #8]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	2301      	movs	r3, #1
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	2302      	movs	r3, #2
 8009a26:	2201      	movs	r2, #1
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fa72 	bl	8009f12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af04      	add	r7, sp, #16
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	4608      	mov	r0, r1
 8009a42:	4611      	mov	r1, r2
 8009a44:	461a      	mov	r2, r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	70fb      	strb	r3, [r7, #3]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70bb      	strb	r3, [r7, #2]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8009a52:	7878      	ldrb	r0, [r7, #1]
 8009a54:	78ba      	ldrb	r2, [r7, #2]
 8009a56:	78f9      	ldrb	r1, [r7, #3]
 8009a58:	8b3b      	ldrh	r3, [r7, #24]
 8009a5a:	9302      	str	r3, [sp, #8]
 8009a5c:	7d3b      	ldrb	r3, [r7, #20]
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	7c3b      	ldrb	r3, [r7, #16]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	4603      	mov	r3, r0
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa05 	bl	8009e76 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8009a6c:	2300      	movs	r3, #0

}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8009a82:	78fb      	ldrb	r3, [r7, #3]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa24 	bl	8009ed4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a8c:	2300      	movs	r3, #0

}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f831 	bl	8009b0a <USBH_GetFreePipe>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009aac:	89fb      	ldrh	r3, [r7, #14]
 8009aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d007      	beq.n	8009ac6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	89fa      	ldrh	r2, [r7, #14]
 8009aba:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	32e0      	adds	r2, #224	; 0xe0
 8009ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8009ac6:	89fb      	ldrh	r3, [r7, #14]
 8009ac8:	b2db      	uxtb	r3, r3
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	2b0a      	cmp	r3, #10
 8009ae2:	d80b      	bhi.n	8009afc <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	32e0      	adds	r2, #224	; 0xe0
 8009aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aee:	78fa      	ldrb	r2, [r7, #3]
 8009af0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	32e0      	adds	r2, #224	; 0xe0
 8009af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b085      	sub	sp, #20
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
 8009b1a:	e00e      	b.n	8009b3a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009b1c:	7bfa      	ldrb	r2, [r7, #15]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	32e0      	adds	r2, #224	; 0xe0
 8009b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d102      	bne.n	8009b34 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	e007      	b.n	8009b44 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	3301      	adds	r3, #1
 8009b38:	73fb      	strb	r3, [r7, #15]
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	2b0a      	cmp	r3, #10
 8009b3e:	d9ed      	bls.n	8009b1c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8009b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009b54:	2201      	movs	r2, #1
 8009b56:	490e      	ldr	r1, [pc, #56]	; (8009b90 <MX_USB_HOST_Init+0x40>)
 8009b58:	480e      	ldr	r0, [pc, #56]	; (8009b94 <MX_USB_HOST_Init+0x44>)
 8009b5a:	f7ff fb3d 	bl	80091d8 <USBH_Init>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b64:	f7f7 f982 	bl	8000e6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b68:	490b      	ldr	r1, [pc, #44]	; (8009b98 <MX_USB_HOST_Init+0x48>)
 8009b6a:	480a      	ldr	r0, [pc, #40]	; (8009b94 <MX_USB_HOST_Init+0x44>)
 8009b6c:	f7ff fba7 	bl	80092be <USBH_RegisterClass>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b76:	f7f7 f979 	bl	8000e6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009b7a:	4806      	ldr	r0, [pc, #24]	; (8009b94 <MX_USB_HOST_Init+0x44>)
 8009b7c:	f7ff fc2c 	bl	80093d8 <USBH_Start>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009b86:	f7f7 f971 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009b8a:	bf00      	nop
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	08009b9d 	.word	0x08009b9d
 8009b94:	200004b0 	.word	0x200004b0
 8009b98:	2000000c 	.word	0x2000000c

08009b9c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d819      	bhi.n	8009be4 <USBH_UserProcess+0x48>
 8009bb0:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <USBH_UserProcess+0x1c>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009be5 	.word	0x08009be5
 8009bbc:	08009bd5 	.word	0x08009bd5
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009bdd 	.word	0x08009bdd
 8009bc8:	08009bcd 	.word	0x08009bcd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009bcc:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <USBH_UserProcess+0x58>)
 8009bce:	2203      	movs	r2, #3
 8009bd0:	701a      	strb	r2, [r3, #0]
  break;
 8009bd2:	e008      	b.n	8009be6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009bd4:	4b07      	ldr	r3, [pc, #28]	; (8009bf4 <USBH_UserProcess+0x58>)
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	701a      	strb	r2, [r3, #0]
  break;
 8009bda:	e004      	b.n	8009be6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <USBH_UserProcess+0x58>)
 8009bde:	2201      	movs	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
  break;
 8009be2:	e000      	b.n	8009be6 <USBH_UserProcess+0x4a>

  default:
  break;
 8009be4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	200000b8 	.word	0x200000b8

08009bf8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08a      	sub	sp, #40	; 0x28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c00:	f107 0314 	add.w	r3, r7, #20
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	605a      	str	r2, [r3, #4]
 8009c0a:	609a      	str	r2, [r3, #8]
 8009c0c:	60da      	str	r2, [r3, #12]
 8009c0e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c18:	d14e      	bne.n	8009cb8 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c1a:	4b29      	ldr	r3, [pc, #164]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1e:	4a28      	ldr	r2, [pc, #160]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c26:	4b26      	ldr	r3, [pc, #152]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	613b      	str	r3, [r7, #16]
 8009c30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c38:	2302      	movs	r3, #2
 8009c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c40:	2303      	movs	r3, #3
 8009c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c44:	230a      	movs	r3, #10
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c48:	f107 0314 	add.w	r3, r7, #20
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c52:	f7f9 f847 	bl	8002ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c5a:	4a19      	ldr	r2, [pc, #100]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c6e:	4b14      	ldr	r3, [pc, #80]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d114      	bne.n	8009ca4 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c7a:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7e:	4a10      	ldr	r2, [pc, #64]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c84:	6593      	str	r3, [r2, #88]	; 0x58
 8009c86:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c8e:	60bb      	str	r3, [r7, #8]
 8009c90:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009c92:	f7fb f87f 	bl	8004d94 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c96:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9a:	4a09      	ldr	r2, [pc, #36]	; (8009cc0 <HAL_HCD_MspInit+0xc8>)
 8009c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8009ca2:	e001      	b.n	8009ca8 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009ca4:	f7fb f876 	bl	8004d94 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2100      	movs	r1, #0
 8009cac:	2043      	movs	r0, #67	; 0x43
 8009cae:	f7f8 ffe2 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009cb2:	2043      	movs	r0, #67	; 0x43
 8009cb4:	f7f8 fffb 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cb8:	bf00      	nop
 8009cba:	3728      	adds	r7, #40	; 0x28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	40021000 	.word	0x40021000

08009cc4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7ff fb9f 	bl	8009416 <USBH_LL_IncTimer>
}
 8009cd8:	bf00      	nop
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fbd7 	bl	80094a2 <USBH_LL_Connect>
}
 8009cf4:	bf00      	nop
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff fbef 	bl	80094ee <USBH_LL_Disconnect>
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
 8009d24:	4613      	mov	r3, r2
 8009d26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff fb91 	bl	800946a <USBH_LL_PortEnabled>
} 
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff fb91 	bl	8009486 <USBH_LL_PortDisabled>
} 
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d12a      	bne.n	8009dd4 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009d7e:	4a18      	ldr	r2, [pc, #96]	; (8009de0 <USBH_LL_Init+0x74>)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a15      	ldr	r2, [pc, #84]	; (8009de0 <USBH_LL_Init+0x74>)
 8009d8a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d8e:	4b14      	ldr	r3, [pc, #80]	; (8009de0 <USBH_LL_Init+0x74>)
 8009d90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009d96:	4b12      	ldr	r3, [pc, #72]	; (8009de0 <USBH_LL_Init+0x74>)
 8009d98:	2208      	movs	r2, #8
 8009d9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d9c:	4b10      	ldr	r3, [pc, #64]	; (8009de0 <USBH_LL_Init+0x74>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009da2:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <USBH_LL_Init+0x74>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009da8:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <USBH_LL_Init+0x74>)
 8009daa:	2202      	movs	r2, #2
 8009dac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009dae:	4b0c      	ldr	r3, [pc, #48]	; (8009de0 <USBH_LL_Init+0x74>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009db4:	480a      	ldr	r0, [pc, #40]	; (8009de0 <USBH_LL_Init+0x74>)
 8009db6:	f7f9 f96e 	bl	8003096 <HAL_HCD_Init>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009dc0:	f7f7 f854 	bl	8000e6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009dc4:	4806      	ldr	r0, [pc, #24]	; (8009de0 <USBH_LL_Init+0x74>)
 8009dc6:	f7f9 fd57 	bl	8003878 <HAL_HCD_GetCurrentFrame>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7ff fb12 	bl	80093f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	2000087c 	.word	0x2000087c

08009de4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7f9 fcd2 	bl	80037a4 <HAL_HCD_Start>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 f912 	bl	800a030 <USBH_Get_USB_Status>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7f9 fcda 	bl	80037ea <HAL_HCD_Stop>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 f8f7 	bl	800a030 <USBH_Get_USB_Status>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e62:	78fa      	ldrb	r2, [r7, #3]
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7f9 fcf1 	bl	800384e <HAL_HCD_HC_GetXferCount>
 8009e6c:	4603      	mov	r3, r0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e76:	b590      	push	{r4, r7, lr}
 8009e78:	b089      	sub	sp, #36	; 0x24
 8009e7a:	af04      	add	r7, sp, #16
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	4608      	mov	r0, r1
 8009e80:	4611      	mov	r1, r2
 8009e82:	461a      	mov	r2, r3
 8009e84:	4603      	mov	r3, r0
 8009e86:	70fb      	strb	r3, [r7, #3]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	70bb      	strb	r3, [r7, #2]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009e9e:	787c      	ldrb	r4, [r7, #1]
 8009ea0:	78ba      	ldrb	r2, [r7, #2]
 8009ea2:	78f9      	ldrb	r1, [r7, #3]
 8009ea4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ea6:	9302      	str	r3, [sp, #8]
 8009ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	4623      	mov	r3, r4
 8009eb6:	f7f9 f950 	bl	800315a <HAL_HCD_HC_Init>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 f8b5 	bl	800a030 <USBH_Get_USB_Status>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd90      	pop	{r4, r7, pc}

08009ed4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eee:	78fa      	ldrb	r2, [r7, #3]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f9 f9c9 	bl	800328a <HAL_HCD_HC_Halt>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 f896 	bl	800a030 <USBH_Get_USB_Status>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009f12:	b590      	push	{r4, r7, lr}
 8009f14:	b089      	sub	sp, #36	; 0x24
 8009f16:	af04      	add	r7, sp, #16
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4603      	mov	r3, r0
 8009f22:	70fb      	strb	r3, [r7, #3]
 8009f24:	460b      	mov	r3, r1
 8009f26:	70bb      	strb	r3, [r7, #2]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009f3a:	787c      	ldrb	r4, [r7, #1]
 8009f3c:	78ba      	ldrb	r2, [r7, #2]
 8009f3e:	78f9      	ldrb	r1, [r7, #3]
 8009f40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f48:	9302      	str	r3, [sp, #8]
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	4623      	mov	r3, r4
 8009f56:	f7f9 f9bb 	bl	80032d0 <HAL_HCD_HC_SubmitRequest>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 f865 	bl	800a030 <USBH_Get_USB_Status>
 8009f66:	4603      	mov	r3, r0
 8009f68:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd90      	pop	{r4, r7, pc}

08009f74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7f9 fc4a 	bl	8003824 <HAL_HCD_HC_GetURBState>
 8009f90:	4603      	mov	r3, r0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d103      	bne.n	8009fb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 f868 	bl	800a088 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009fb8:	20c8      	movs	r0, #200	; 0xc8
 8009fba:	f7f7 fba9 	bl	8001710 <HAL_Delay>
  return USBH_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	68f9      	ldr	r1, [r7, #12]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	00db      	lsls	r3, r3, #3
 8009fec:	440b      	add	r3, r1
 8009fee:	333b      	adds	r3, #59	; 0x3b
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	68f9      	ldr	r1, [r7, #12]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	440b      	add	r3, r1
 800a004:	3350      	adds	r3, #80	; 0x50
 800a006:	78ba      	ldrb	r2, [r7, #2]
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	e009      	b.n	800a020 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	4613      	mov	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	440b      	add	r3, r1
 800a01a:	3351      	adds	r3, #81	; 0x51
 800a01c:	78ba      	ldrb	r2, [r7, #2]
 800a01e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a03e:	79fb      	ldrb	r3, [r7, #7]
 800a040:	2b03      	cmp	r3, #3
 800a042:	d817      	bhi.n	800a074 <USBH_Get_USB_Status+0x44>
 800a044:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <USBH_Get_USB_Status+0x1c>)
 800a046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04a:	bf00      	nop
 800a04c:	0800a05d 	.word	0x0800a05d
 800a050:	0800a063 	.word	0x0800a063
 800a054:	0800a069 	.word	0x0800a069
 800a058:	0800a06f 	.word	0x0800a06f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73fb      	strb	r3, [r7, #15]
    break;
 800a060:	e00b      	b.n	800a07a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a062:	2302      	movs	r3, #2
 800a064:	73fb      	strb	r3, [r7, #15]
    break;
 800a066:	e008      	b.n	800a07a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a068:	2301      	movs	r3, #1
 800a06a:	73fb      	strb	r3, [r7, #15]
    break;
 800a06c:	e005      	b.n	800a07a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a06e:	2302      	movs	r3, #2
 800a070:	73fb      	strb	r3, [r7, #15]
    break;
 800a072:	e002      	b.n	800a07a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a074:	2302      	movs	r3, #2
 800a076:	73fb      	strb	r3, [r7, #15]
    break;
 800a078:	bf00      	nop
  }
  return usb_status;
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d102      	bne.n	800a0a2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800a09c:	2301      	movs	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]
 800a0a0:	e001      	b.n	800a0a6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0ae:	4803      	ldr	r0, [pc, #12]	; (800a0bc <MX_DriverVbusFS+0x34>)
 800a0b0:	f7f8 ffc0 	bl	8003034 <HAL_GPIO_WritePin>
}
 800a0b4:	bf00      	nop
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	48000800 	.word	0x48000800

0800a0c0 <__errno>:
 800a0c0:	4b01      	ldr	r3, [pc, #4]	; (800a0c8 <__errno+0x8>)
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	2000002c 	.word	0x2000002c

0800a0cc <__libc_init_array>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	4e0d      	ldr	r6, [pc, #52]	; (800a104 <__libc_init_array+0x38>)
 800a0d0:	4c0d      	ldr	r4, [pc, #52]	; (800a108 <__libc_init_array+0x3c>)
 800a0d2:	1ba4      	subs	r4, r4, r6
 800a0d4:	10a4      	asrs	r4, r4, #2
 800a0d6:	2500      	movs	r5, #0
 800a0d8:	42a5      	cmp	r5, r4
 800a0da:	d109      	bne.n	800a0f0 <__libc_init_array+0x24>
 800a0dc:	4e0b      	ldr	r6, [pc, #44]	; (800a10c <__libc_init_array+0x40>)
 800a0de:	4c0c      	ldr	r4, [pc, #48]	; (800a110 <__libc_init_array+0x44>)
 800a0e0:	f000 f8ea 	bl	800a2b8 <_init>
 800a0e4:	1ba4      	subs	r4, r4, r6
 800a0e6:	10a4      	asrs	r4, r4, #2
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	42a5      	cmp	r5, r4
 800a0ec:	d105      	bne.n	800a0fa <__libc_init_array+0x2e>
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0f4:	4798      	blx	r3
 800a0f6:	3501      	adds	r5, #1
 800a0f8:	e7ee      	b.n	800a0d8 <__libc_init_array+0xc>
 800a0fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0fe:	4798      	blx	r3
 800a100:	3501      	adds	r5, #1
 800a102:	e7f2      	b.n	800a0ea <__libc_init_array+0x1e>
 800a104:	0800a324 	.word	0x0800a324
 800a108:	0800a324 	.word	0x0800a324
 800a10c:	0800a324 	.word	0x0800a324
 800a110:	0800a328 	.word	0x0800a328

0800a114 <malloc>:
 800a114:	4b02      	ldr	r3, [pc, #8]	; (800a120 <malloc+0xc>)
 800a116:	4601      	mov	r1, r0
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f000 b861 	b.w	800a1e0 <_malloc_r>
 800a11e:	bf00      	nop
 800a120:	2000002c 	.word	0x2000002c

0800a124 <free>:
 800a124:	4b02      	ldr	r3, [pc, #8]	; (800a130 <free+0xc>)
 800a126:	4601      	mov	r1, r0
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	f000 b80b 	b.w	800a144 <_free_r>
 800a12e:	bf00      	nop
 800a130:	2000002c 	.word	0x2000002c

0800a134 <memset>:
 800a134:	4402      	add	r2, r0
 800a136:	4603      	mov	r3, r0
 800a138:	4293      	cmp	r3, r2
 800a13a:	d100      	bne.n	800a13e <memset+0xa>
 800a13c:	4770      	bx	lr
 800a13e:	f803 1b01 	strb.w	r1, [r3], #1
 800a142:	e7f9      	b.n	800a138 <memset+0x4>

0800a144 <_free_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4605      	mov	r5, r0
 800a148:	2900      	cmp	r1, #0
 800a14a:	d045      	beq.n	800a1d8 <_free_r+0x94>
 800a14c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a150:	1f0c      	subs	r4, r1, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	bfb8      	it	lt
 800a156:	18e4      	addlt	r4, r4, r3
 800a158:	f000 f8ac 	bl	800a2b4 <__malloc_lock>
 800a15c:	4a1f      	ldr	r2, [pc, #124]	; (800a1dc <_free_r+0x98>)
 800a15e:	6813      	ldr	r3, [r2, #0]
 800a160:	4610      	mov	r0, r2
 800a162:	b933      	cbnz	r3, 800a172 <_free_r+0x2e>
 800a164:	6063      	str	r3, [r4, #4]
 800a166:	6014      	str	r4, [r2, #0]
 800a168:	4628      	mov	r0, r5
 800a16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a16e:	f000 b8a2 	b.w	800a2b6 <__malloc_unlock>
 800a172:	42a3      	cmp	r3, r4
 800a174:	d90c      	bls.n	800a190 <_free_r+0x4c>
 800a176:	6821      	ldr	r1, [r4, #0]
 800a178:	1862      	adds	r2, r4, r1
 800a17a:	4293      	cmp	r3, r2
 800a17c:	bf04      	itt	eq
 800a17e:	681a      	ldreq	r2, [r3, #0]
 800a180:	685b      	ldreq	r3, [r3, #4]
 800a182:	6063      	str	r3, [r4, #4]
 800a184:	bf04      	itt	eq
 800a186:	1852      	addeq	r2, r2, r1
 800a188:	6022      	streq	r2, [r4, #0]
 800a18a:	6004      	str	r4, [r0, #0]
 800a18c:	e7ec      	b.n	800a168 <_free_r+0x24>
 800a18e:	4613      	mov	r3, r2
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	b10a      	cbz	r2, 800a198 <_free_r+0x54>
 800a194:	42a2      	cmp	r2, r4
 800a196:	d9fa      	bls.n	800a18e <_free_r+0x4a>
 800a198:	6819      	ldr	r1, [r3, #0]
 800a19a:	1858      	adds	r0, r3, r1
 800a19c:	42a0      	cmp	r0, r4
 800a19e:	d10b      	bne.n	800a1b8 <_free_r+0x74>
 800a1a0:	6820      	ldr	r0, [r4, #0]
 800a1a2:	4401      	add	r1, r0
 800a1a4:	1858      	adds	r0, r3, r1
 800a1a6:	4282      	cmp	r2, r0
 800a1a8:	6019      	str	r1, [r3, #0]
 800a1aa:	d1dd      	bne.n	800a168 <_free_r+0x24>
 800a1ac:	6810      	ldr	r0, [r2, #0]
 800a1ae:	6852      	ldr	r2, [r2, #4]
 800a1b0:	605a      	str	r2, [r3, #4]
 800a1b2:	4401      	add	r1, r0
 800a1b4:	6019      	str	r1, [r3, #0]
 800a1b6:	e7d7      	b.n	800a168 <_free_r+0x24>
 800a1b8:	d902      	bls.n	800a1c0 <_free_r+0x7c>
 800a1ba:	230c      	movs	r3, #12
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	e7d3      	b.n	800a168 <_free_r+0x24>
 800a1c0:	6820      	ldr	r0, [r4, #0]
 800a1c2:	1821      	adds	r1, r4, r0
 800a1c4:	428a      	cmp	r2, r1
 800a1c6:	bf04      	itt	eq
 800a1c8:	6811      	ldreq	r1, [r2, #0]
 800a1ca:	6852      	ldreq	r2, [r2, #4]
 800a1cc:	6062      	str	r2, [r4, #4]
 800a1ce:	bf04      	itt	eq
 800a1d0:	1809      	addeq	r1, r1, r0
 800a1d2:	6021      	streq	r1, [r4, #0]
 800a1d4:	605c      	str	r4, [r3, #4]
 800a1d6:	e7c7      	b.n	800a168 <_free_r+0x24>
 800a1d8:	bd38      	pop	{r3, r4, r5, pc}
 800a1da:	bf00      	nop
 800a1dc:	200000bc 	.word	0x200000bc

0800a1e0 <_malloc_r>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	1ccd      	adds	r5, r1, #3
 800a1e4:	f025 0503 	bic.w	r5, r5, #3
 800a1e8:	3508      	adds	r5, #8
 800a1ea:	2d0c      	cmp	r5, #12
 800a1ec:	bf38      	it	cc
 800a1ee:	250c      	movcc	r5, #12
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	db01      	blt.n	800a1fa <_malloc_r+0x1a>
 800a1f6:	42a9      	cmp	r1, r5
 800a1f8:	d903      	bls.n	800a202 <_malloc_r+0x22>
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	6033      	str	r3, [r6, #0]
 800a1fe:	2000      	movs	r0, #0
 800a200:	bd70      	pop	{r4, r5, r6, pc}
 800a202:	f000 f857 	bl	800a2b4 <__malloc_lock>
 800a206:	4a21      	ldr	r2, [pc, #132]	; (800a28c <_malloc_r+0xac>)
 800a208:	6814      	ldr	r4, [r2, #0]
 800a20a:	4621      	mov	r1, r4
 800a20c:	b991      	cbnz	r1, 800a234 <_malloc_r+0x54>
 800a20e:	4c20      	ldr	r4, [pc, #128]	; (800a290 <_malloc_r+0xb0>)
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	b91b      	cbnz	r3, 800a21c <_malloc_r+0x3c>
 800a214:	4630      	mov	r0, r6
 800a216:	f000 f83d 	bl	800a294 <_sbrk_r>
 800a21a:	6020      	str	r0, [r4, #0]
 800a21c:	4629      	mov	r1, r5
 800a21e:	4630      	mov	r0, r6
 800a220:	f000 f838 	bl	800a294 <_sbrk_r>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d124      	bne.n	800a272 <_malloc_r+0x92>
 800a228:	230c      	movs	r3, #12
 800a22a:	6033      	str	r3, [r6, #0]
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 f842 	bl	800a2b6 <__malloc_unlock>
 800a232:	e7e4      	b.n	800a1fe <_malloc_r+0x1e>
 800a234:	680b      	ldr	r3, [r1, #0]
 800a236:	1b5b      	subs	r3, r3, r5
 800a238:	d418      	bmi.n	800a26c <_malloc_r+0x8c>
 800a23a:	2b0b      	cmp	r3, #11
 800a23c:	d90f      	bls.n	800a25e <_malloc_r+0x7e>
 800a23e:	600b      	str	r3, [r1, #0]
 800a240:	50cd      	str	r5, [r1, r3]
 800a242:	18cc      	adds	r4, r1, r3
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f836 	bl	800a2b6 <__malloc_unlock>
 800a24a:	f104 000b 	add.w	r0, r4, #11
 800a24e:	1d23      	adds	r3, r4, #4
 800a250:	f020 0007 	bic.w	r0, r0, #7
 800a254:	1ac3      	subs	r3, r0, r3
 800a256:	d0d3      	beq.n	800a200 <_malloc_r+0x20>
 800a258:	425a      	negs	r2, r3
 800a25a:	50e2      	str	r2, [r4, r3]
 800a25c:	e7d0      	b.n	800a200 <_malloc_r+0x20>
 800a25e:	428c      	cmp	r4, r1
 800a260:	684b      	ldr	r3, [r1, #4]
 800a262:	bf16      	itet	ne
 800a264:	6063      	strne	r3, [r4, #4]
 800a266:	6013      	streq	r3, [r2, #0]
 800a268:	460c      	movne	r4, r1
 800a26a:	e7eb      	b.n	800a244 <_malloc_r+0x64>
 800a26c:	460c      	mov	r4, r1
 800a26e:	6849      	ldr	r1, [r1, #4]
 800a270:	e7cc      	b.n	800a20c <_malloc_r+0x2c>
 800a272:	1cc4      	adds	r4, r0, #3
 800a274:	f024 0403 	bic.w	r4, r4, #3
 800a278:	42a0      	cmp	r0, r4
 800a27a:	d005      	beq.n	800a288 <_malloc_r+0xa8>
 800a27c:	1a21      	subs	r1, r4, r0
 800a27e:	4630      	mov	r0, r6
 800a280:	f000 f808 	bl	800a294 <_sbrk_r>
 800a284:	3001      	adds	r0, #1
 800a286:	d0cf      	beq.n	800a228 <_malloc_r+0x48>
 800a288:	6025      	str	r5, [r4, #0]
 800a28a:	e7db      	b.n	800a244 <_malloc_r+0x64>
 800a28c:	200000bc 	.word	0x200000bc
 800a290:	200000c0 	.word	0x200000c0

0800a294 <_sbrk_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4c06      	ldr	r4, [pc, #24]	; (800a2b0 <_sbrk_r+0x1c>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4605      	mov	r5, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	6023      	str	r3, [r4, #0]
 800a2a0:	f7f7 f932 	bl	8001508 <_sbrk>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_sbrk_r+0x1a>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_sbrk_r+0x1a>
 800a2ac:	602b      	str	r3, [r5, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	20000b40 	.word	0x20000b40

0800a2b4 <__malloc_lock>:
 800a2b4:	4770      	bx	lr

0800a2b6 <__malloc_unlock>:
 800a2b6:	4770      	bx	lr

0800a2b8 <_init>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr

0800a2c4 <_fini>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr
