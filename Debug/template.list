
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800b534  0800b534  0001b534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b580  0800b580  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b588  0800b588  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b588  0800b588  0001b588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b58c  0800b58c  0001b58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  20000090  0800b620  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  0800b620  00020b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291e9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000489a  00000000  00000000  000492a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020f0  00000000  00000000  0004db48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ef0  00000000  00000000  0004fc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002dbe2  00000000  00000000  00051b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b8e3  00000000  00000000  0007f70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115166  00000000  00000000  0009afed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b0153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f24  00000000  00000000  001b01d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b51c 	.word	0x0800b51c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800b51c 	.word	0x0800b51c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 f8bc 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81a 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fb92 	bl	8000bfc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f94a 	bl	8000770 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004dc:	f000 f988 	bl	80007f0 <MX_I2C2_Init>
  MX_LCD_Init();
 80004e0:	f000 f9c6 	bl	8000870 <MX_LCD_Init>
  MX_QUADSPI_Init();
 80004e4:	f000 f9fc 	bl	80008e0 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80004e8:	f000 fa20 	bl	800092c <MX_SAI1_Init>
  MX_SPI2_Init();
 80004ec:	f000 fac6 	bl	8000a7c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 fb54 	bl	8000b9c <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80004f4:	f00a fc0a 	bl	800ad0c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004f8:	f000 f8b4 	bl	8000664 <MX_ADC1_Init>
  MX_TIM4_Init();
 80004fc:	f000 fafc 	bl	8000af8 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000500:	f00a fc2a 	bl	800ad58 <MX_USB_HOST_Process>
 8000504:	e7fc      	b.n	8000500 <main+0x38>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b0b8      	sub	sp, #224	; 0xe0
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000512:	2244      	movs	r2, #68	; 0x44
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00a ff3e 	bl	800b398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2288      	movs	r2, #136	; 0x88
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f00a ff30 	bl	800b398 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000538:	f004 fbe8 	bl	8004d0c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800053c:	4b46      	ldr	r3, [pc, #280]	; (8000658 <SystemClock_Config+0x150>)
 800053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000542:	4a45      	ldr	r2, [pc, #276]	; (8000658 <SystemClock_Config+0x150>)
 8000544:	f023 0318 	bic.w	r3, r3, #24
 8000548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800054c:	231c      	movs	r3, #28
 800054e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800056a:	2360      	movs	r3, #96	; 0x60
 800056c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000576:	2301      	movs	r3, #1
 8000578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000582:	2314      	movs	r3, #20
 8000584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000588:	2307      	movs	r3, #7
 800058a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fd00 	bl	8004fa4 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005aa:	f000 fc63 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 f896 	bl	8005704 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005de:	f000 fc49 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80005e2:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SystemClock_Config+0x154>)
 80005e4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005fa:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000604:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000608:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800060a:	2301      	movs	r3, #1
 800060c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000612:	2318      	movs	r3, #24
 8000614:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000616:	2307      	movs	r3, #7
 8000618:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <SystemClock_Config+0x158>)
 8000624:	61fb      	str	r3, [r7, #28]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fa6f 	bl	8005b0c <HAL_RCCEx_PeriphCLKConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8000634:	f000 fc1e 	bl	8000e74 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000638:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063c:	f004 fb84 	bl	8004d48 <HAL_PWREx_ControlVoltageScaling>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x142>
  {
    Error_Handler();
 8000646:	f000 fc15 	bl	8000e74 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800064a:	f006 f9bd 	bl	80069c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800064e:	bf00      	nop
 8000650:	37e0      	adds	r7, #224	; 0xe0
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	000268c2 	.word	0x000268c2
 8000660:	01110000 	.word	0x01110000

08000664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  __ADC_CLK_ENABLE();
 800066a:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <MX_ADC1_Init+0xfc>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a3c      	ldr	r2, [pc, #240]	; (8000760 <MX_ADC1_Init+0xfc>)
 8000670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <MX_ADC1_Init+0xfc>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
 800069c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <MX_ADC1_Init+0x100>)
 80006a0:	4a31      	ldr	r2, [pc, #196]	; (8000768 <MX_ADC1_Init+0x104>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <MX_ADC1_Init+0x100>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <MX_ADC1_Init+0x100>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <MX_ADC1_Init+0x100>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_ADC1_Init+0x100>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_ADC1_Init+0x100>)
 80006be:	2204      	movs	r2, #4
 80006c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <MX_ADC1_Init+0x100>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_ADC1_Init+0x100>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_ADC1_Init+0x100>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_ADC1_Init+0x100>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_CC4;
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_ADC1_Init+0x100>)
 80006de:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC1_Init+0x100>)
 80006e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC1_Init+0x100>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_ADC1_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000702:	4818      	ldr	r0, [pc, #96]	; (8000764 <MX_ADC1_Init+0x100>)
 8000704:	f001 f9fc 	bl	8001b00 <HAL_ADC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800070e:	f000 fbb1 	bl	8000e74 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_ADC1_Init+0x100>)
 800071e:	f002 f937 	bl	8002990 <HAL_ADCEx_MultiModeConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000728:	f000 fba4 	bl	8000e74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_ADC1_Init+0x108>)
 800072e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2306      	movs	r3, #6
 8000732:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	237f      	movs	r3, #127	; 0x7f
 800073a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073c:	2304      	movs	r3, #4
 800073e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_ADC1_Init+0x100>)
 800074a:	f001 fd65 	bl	8002218 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000754:	f000 fb8e 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	; 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	20000284 	.word	0x20000284
 8000768:	50040000 	.word	0x50040000
 800076c:	14f00020 	.word	0x14f00020

08000770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_I2C1_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007ac:	f004 f8a6 	bl	80048fc <HAL_I2C_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 fb5d 	bl	8000e74 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007be:	f004 f92c 	bl	8004a1a <HAL_I2CEx_ConfigAnalogFilter>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fb54 	bl	8000e74 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007d0:	f004 f96e 	bl	8004ab0 <HAL_I2CEx_ConfigDigitalFilter>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 fb4b 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000168 	.word	0x20000168
 80007e8:	40005400 	.word	0x40005400
 80007ec:	00404c74 	.word	0x00404c74

080007f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_I2C2_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_I2C2_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_I2C2_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <MX_I2C2_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_I2C2_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_I2C2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_I2C2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_I2C2_Init+0x74>)
 800082c:	f004 f866 	bl	80048fc <HAL_I2C_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 fb1d 	bl	8000e74 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <MX_I2C2_Init+0x74>)
 800083e:	f004 f8ec 	bl	8004a1a <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 fb14 	bl	8000e74 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2C2_Init+0x74>)
 8000850:	f004 f92e 	bl	8004ab0 <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fb0b 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001b4 	.word	0x200001b4
 8000868:	40005800 	.word	0x40005800
 800086c:	00404c74 	.word	0x00404c74

08000870 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_LCD_Init+0x68>)
 8000876:	4a19      	ldr	r2, [pc, #100]	; (80008dc <MX_LCD_Init+0x6c>)
 8000878:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_LCD_Init+0x68>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_LCD_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_LCD_Init+0x68>)
 8000888:	220c      	movs	r2, #12
 800088a:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_LCD_Init+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_LCD_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_LCD_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_LCD_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_LCD_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_LCD_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_LCD_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_LCD_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_LCD_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_LCD_Init+0x68>)
 80008c4:	f004 f940 	bl	8004b48 <HAL_LCD_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80008ce:	f000 fad1 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200002e8 	.word	0x200002e8
 80008dc:	40002400 	.word	0x40002400

080008e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_QUADSPI_Init+0x44>)
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <MX_QUADSPI_Init+0x48>)
 80008e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_QUADSPI_Init+0x44>)
 80008ec:	22ff      	movs	r2, #255	; 0xff
 80008ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_QUADSPI_Init+0x44>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_QUADSPI_Init+0x44>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_QUADSPI_Init+0x44>)
 80008fe:	2201      	movs	r2, #1
 8000900:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_QUADSPI_Init+0x44>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_QUADSPI_Init+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_QUADSPI_Init+0x44>)
 8000910:	f004 fa80 	bl	8004e14 <HAL_QSPI_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800091a:	f000 faab 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000428 	.word	0x20000428
 8000928:	a0001000 	.word	0xa0001000

0800092c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000930:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000932:	4a4e      	ldr	r2, [pc, #312]	; (8000a6c <MX_SAI1_Init+0x140>)
 8000934:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000936:	4b4c      	ldr	r3, [pc, #304]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800093c:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <MX_SAI1_Init+0x13c>)
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000942:	4b49      	ldr	r3, [pc, #292]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000944:	2240      	movs	r2, #64	; 0x40
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000948:	4b47      	ldr	r3, [pc, #284]	; (8000a68 <MX_SAI1_Init+0x13c>)
 800094a:	2200      	movs	r2, #0
 800094c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800094e:	4b46      	ldr	r3, [pc, #280]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000950:	2200      	movs	r2, #0
 8000952:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000954:	4b44      	ldr	r3, [pc, #272]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800095a:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <MX_SAI1_Init+0x13c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000960:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000966:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800096c:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <MX_SAI1_Init+0x13c>)
 800096e:	4a40      	ldr	r2, [pc, #256]	; (8000a70 <MX_SAI1_Init+0x144>)
 8000970:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000972:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <MX_SAI1_Init+0x13c>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800097e:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000984:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800098a:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <MX_SAI1_Init+0x13c>)
 800098c:	2208      	movs	r2, #8
 800098e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000990:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000992:	2201      	movs	r2, #1
 8000994:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000996:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <MX_SAI1_Init+0x13c>)
 8000998:	2200      	movs	r2, #0
 800099a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800099c:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <MX_SAI1_Init+0x13c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <MX_SAI1_Init+0x13c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <MX_SAI1_Init+0x13c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_SAI1_Init+0x13c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80009b4:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_SAI1_Init+0x13c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_SAI1_Init+0x13c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80009c0:	4829      	ldr	r0, [pc, #164]	; (8000a68 <MX_SAI1_Init+0x13c>)
 80009c2:	f006 fab3 	bl	8006f2c <HAL_SAI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80009cc:	f000 fa52 	bl	8000e74 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_SAI1_Init+0x148>)
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <MX_SAI1_Init+0x14c>)
 80009d4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80009d6:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <MX_SAI1_Init+0x148>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_SAI1_Init+0x148>)
 80009de:	2203      	movs	r2, #3
 80009e0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <MX_SAI1_Init+0x148>)
 80009e4:	2240      	movs	r2, #64	; 0x40
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_SAI1_Init+0x148>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_SAI1_Init+0x148>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_SAI1_Init+0x148>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_SAI1_Init+0x148>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a20:	2208      	movs	r2, #8
 8000a22:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MX_SAI1_Init+0x148>)
 8000a56:	f006 fa69 	bl	8006f2c <HAL_SAI_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000a60:	f000 fa08 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000324 	.word	0x20000324
 8000a6c:	40015404 	.word	0x40015404
 8000a70:	0002ee00 	.word	0x0002ee00
 8000a74:	20000200 	.word	0x20000200
 8000a78:	40015424 	.word	0x40015424

08000a7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <MX_SPI2_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a96:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_SPI2_Init+0x74>)
 8000adc:	f006 fbc0 	bl	8007260 <HAL_SPI_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 f9c5 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000c4 	.word	0x200000c4
 8000af4:	40003800 	.word	0x40003800

08000af8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <MX_TIM4_Init+0xa0>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim4.Init.ClockDivision = 0;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim4.Init.Prescaler = 1000;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b30:	605a      	str	r2, [r3, #4]
  htim4.Init.Period = 8000;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b34:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b38:	60da      	str	r2, [r3, #12]

  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b40:	4814      	ldr	r0, [pc, #80]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b42:	f006 fc17 	bl	8007374 <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000b4c:	f000 f992 	bl	8000e74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b50:	2307      	movs	r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480d      	ldr	r0, [pc, #52]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b60:	f006 fd52 	bl	8007608 <HAL_TIM_SlaveConfigSynchro>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b6a:	f000 f983 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_TIM4_Init+0x9c>)
 8000b7c:	f006 ff5a 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000b86:	f000 f975 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000128 	.word	0x20000128
 8000b98:	40000800 	.word	0x40000800

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART2_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000be0:	f006 ffa2 	bl	8007b28 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f000 f943 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200003a8 	.word	0x200003a8
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	4b92      	ldr	r3, [pc, #584]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a91      	ldr	r2, [pc, #580]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b8f      	ldr	r3, [pc, #572]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	4b8c      	ldr	r3, [pc, #560]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a8b      	ldr	r2, [pc, #556]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b89      	ldr	r3, [pc, #548]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	4b86      	ldr	r3, [pc, #536]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a85      	ldr	r2, [pc, #532]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b83      	ldr	r3, [pc, #524]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b80      	ldr	r3, [pc, #512]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a7f      	ldr	r2, [pc, #508]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b7d      	ldr	r3, [pc, #500]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b7a      	ldr	r3, [pc, #488]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a79      	ldr	r2, [pc, #484]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b77      	ldr	r3, [pc, #476]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	4b74      	ldr	r3, [pc, #464]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a73      	ldr	r2, [pc, #460]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b71      	ldr	r3, [pc, #452]	; (8000e5c <MX_GPIO_Init+0x260>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f240 1109 	movw	r1, #265	; 0x109
 8000ca8:	486d      	ldr	r0, [pc, #436]	; (8000e60 <MX_GPIO_Init+0x264>)
 8000caa:	f002 f9d7 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	210d      	movs	r1, #13
 8000cb2:	486c      	ldr	r0, [pc, #432]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000cb4:	f002 f9d2 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbe:	486a      	ldr	r0, [pc, #424]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000cc0:	f002 f9cc 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cca:	4867      	ldr	r0, [pc, #412]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000ccc:	f002 f9c6 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	4865      	ldr	r0, [pc, #404]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000cd6:	f002 f9c1 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	485b      	ldr	r0, [pc, #364]	; (8000e60 <MX_GPIO_Init+0x264>)
 8000cf2:	f002 f80b 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000cf6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cfc:	4b5c      	ldr	r3, [pc, #368]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4857      	ldr	r0, [pc, #348]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000d0c:	f001 fffe 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000d10:	2307      	movs	r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4851      	ldr	r0, [pc, #324]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000d24:	f001 fff2 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin|JOY_DOWN_Pin;
 8000d28:	232e      	movs	r3, #46	; 0x2e
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d30:	2302      	movs	r3, #2
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f001 ffe5 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000d42:	2310      	movs	r3, #16
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f001 ffd8 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|M3V3_REG_ON_Pin;
 8000d5c:	2309      	movs	r3, #9
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	483c      	ldr	r0, [pc, #240]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000d74:	f001 ffca 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4835      	ldr	r0, [pc, #212]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000d90:	f001 ffbc 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	482c      	ldr	r0, [pc, #176]	; (8000e60 <MX_GPIO_Init+0x264>)
 8000dae:	f001 ffad 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000db2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4827      	ldr	r0, [pc, #156]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000dcc:	f001 ff9e 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4822      	ldr	r0, [pc, #136]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000de4:	f001 ff92 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481b      	ldr	r0, [pc, #108]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000e00:	f001 ff84 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4812      	ldr	r0, [pc, #72]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000e1a:	f001 ff77 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	480a      	ldr	r0, [pc, #40]	; (8000e60 <MX_GPIO_Init+0x264>)
 8000e36:	f001 ff69 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_GPIO_Init+0x264>)
 8000e4e:	f001 ff5d 	bl	8002d0c <HAL_GPIO_Init>

}
 8000e52:	bf00      	nop
 8000e54:	3730      	adds	r7, #48	; 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48001000 	.word	0x48001000
 8000e64:	48000400 	.word	0x48000400
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	48000c00 	.word	0x48000c00
 8000e70:	10120000 	.word	0x10120000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6613      	str	r3, [r2, #96]	; 0x60
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6593      	str	r3, [r2, #88]	; 0x58
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x44>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <HAL_ADC_MspInit+0xb4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d144      	bne.n	8000f78 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000ef4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_ADC_MspInit+0xb8>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f3a:	230b      	movs	r3, #11
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f001 fede 	bl	8002d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f50:	2302      	movs	r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f54:	230b      	movs	r3, #11
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4809      	ldr	r0, [pc, #36]	; (8000f88 <HAL_ADC_MspInit+0xbc>)
 8000f64:	f001 fed2 	bl	8002d0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2012      	movs	r0, #18
 8000f6e:	f001 fe96 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f72:	2012      	movs	r0, #18
 8000f74:	f001 feaf 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	50040000 	.word	0x50040000
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400

08000f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a2e      	ldr	r2, [pc, #184]	; (8001064 <HAL_I2C_MspInit+0xd8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d128      	bne.n	8001000 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a2d      	ldr	r2, [pc, #180]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000fc6:	23c0      	movs	r3, #192	; 0xc0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fca:	2312      	movs	r3, #18
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <HAL_I2C_MspInit+0xe0>)
 8000fe2:	f001 fe93 	bl	8002d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8000fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ffe:	e02d      	b.n	800105c <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <HAL_I2C_MspInit+0xe4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d128      	bne.n	800105c <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8001022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001034:	2304      	movs	r3, #4
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <HAL_I2C_MspInit+0xe0>)
 8001040:	f001 fe64 	bl	8002d0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 800104a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104e:	6593      	str	r3, [r2, #88]	; 0x58
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_I2C_MspInit+0xdc>)
 8001052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	bf00      	nop
 800105e:	3730      	adds	r7, #48	; 0x30
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005400 	.word	0x40005400
 8001068:	40021000 	.word	0x40021000
 800106c:	48000400 	.word	0x48000400
 8001070:	40005800 	.word	0x40005800

08001074 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <HAL_LCD_MspInit+0x130>)
 8001092:	4293      	cmp	r3, r2
 8001094:	f040 8081 	bne.w	800119a <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8001098:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	4a42      	ldr	r2, [pc, #264]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6593      	str	r3, [r2, #88]	; 0x58
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a3c      	ldr	r2, [pc, #240]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	4a36      	ldr	r2, [pc, #216]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_LCD_MspInit+0x134>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8001110:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001114:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001122:	230b      	movs	r3, #11
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	481f      	ldr	r0, [pc, #124]	; (80011ac <HAL_LCD_MspInit+0x138>)
 800112e:	f001 fded 	bl	8002d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8001132:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001136:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001144:	230b      	movs	r3, #11
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f001 fddb 	bl	8002d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG20_Pin|SEG3_Pin|SEG19_Pin|SEG4_Pin 
 8001156:	f24f 2330 	movw	r3, #62000	; 0xf230
 800115a:	61fb      	str	r3, [r7, #28]
                          |SEG11_Pin|SEG12_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001168:	230b      	movs	r3, #11
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <HAL_LCD_MspInit+0x13c>)
 8001174:	f001 fdca 	bl	8002d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8001178:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800117c:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800118a:	230b      	movs	r3, #11
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <HAL_LCD_MspInit+0x140>)
 8001196:	f001 fdb9 	bl	8002d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	; 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40002400 	.word	0x40002400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000800 	.word	0x48000800
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000c00 	.word	0x48000c00

080011b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_QSPI_MspInit+0x7c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d128      	bne.n	800122c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_QSPI_MspInit+0x80>)
 80011dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011de:	4a16      	ldr	r2, [pc, #88]	; (8001238 <HAL_QSPI_MspInit+0x80>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6513      	str	r3, [r2, #80]	; 0x50
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_QSPI_MspInit+0x80>)
 80011e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_QSPI_MspInit+0x80>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <HAL_QSPI_MspInit+0x80>)
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_QSPI_MspInit+0x80>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 800120a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800120e:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800121c:	230a      	movs	r3, #10
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_QSPI_MspInit+0x84>)
 8001228:	f001 fd70 	bl	8002d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	a0001000 	.word	0xa0001000
 8001238:	40021000 	.word	0x40021000
 800123c:	48001000 	.word	0x48001000

08001240 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_SPI_MspInit+0x7c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d127      	bne.n	80012b2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6593      	str	r3, [r2, #88]	; 0x58
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001292:	231a      	movs	r3, #26
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a2:	2305      	movs	r3, #5
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_SPI_MspInit+0x84>)
 80012ae:	f001 fd2d 	bl	8002d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40003800 	.word	0x40003800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000c00 	.word	0x48000c00

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_TIM_Base_MspInit+0x44>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d113      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_TIM_Base_MspInit+0x48>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_TIM_Base_MspInit+0x48>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6593      	str	r3, [r2, #88]	; 0x58
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_TIM_Base_MspInit+0x48>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	201e      	movs	r0, #30
 80012f8:	f001 fcd1 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012fc:	201e      	movs	r0, #30
 80012fe:	f001 fcea 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40000800 	.word	0x40000800
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_UART_MspInit+0x7c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d127      	bne.n	8001386 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_UART_MspInit+0x80>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	4a16      	ldr	r2, [pc, #88]	; (8001394 <HAL_UART_MspInit+0x80>)
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	6593      	str	r3, [r2, #88]	; 0x58
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_UART_MspInit+0x80>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_UART_MspInit+0x80>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a10      	ldr	r2, [pc, #64]	; (8001394 <HAL_UART_MspInit+0x80>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_UART_MspInit+0x80>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001366:	2360      	movs	r3, #96	; 0x60
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001376:	2307      	movs	r3, #7
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_UART_MspInit+0x84>)
 8001382:	f001 fcc3 	bl	8002d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000
 8001398:	48000c00 	.word	0x48000c00

0800139c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a33      	ldr	r2, [pc, #204]	; (8001478 <HAL_SAI_MspInit+0xdc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d135      	bne.n	800141a <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80013ae:	4b33      	ldr	r3, [pc, #204]	; (800147c <HAL_SAI_MspInit+0xe0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10b      	bne.n	80013ce <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_SAI_MspInit+0xe4>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_SAI_MspInit+0xe4>)
 80013bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_SAI_MspInit+0xe4>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_SAI_MspInit+0xe0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a29      	ldr	r2, [pc, #164]	; (800147c <HAL_SAI_MspInit+0xe0>)
 80013d6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80013d8:	2374      	movs	r3, #116	; 0x74
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013e8:	230d      	movs	r3, #13
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4824      	ldr	r0, [pc, #144]	; (8001484 <HAL_SAI_MspInit+0xe8>)
 80013f4:	f001 fc8a 	bl	8002d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80013f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800140a:	230d      	movs	r3, #13
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	481b      	ldr	r0, [pc, #108]	; (8001484 <HAL_SAI_MspInit+0xe8>)
 8001416:	f001 fc79 	bl	8002d0c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <HAL_SAI_MspInit+0xec>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d124      	bne.n	800146e <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_SAI_MspInit+0xe0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10b      	bne.n	8001444 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_SAI_MspInit+0xe4>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001430:	4a13      	ldr	r2, [pc, #76]	; (8001480 <HAL_SAI_MspInit+0xe4>)
 8001432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001436:	6613      	str	r3, [r2, #96]	; 0x60
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_SAI_MspInit+0xe4>)
 800143a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_SAI_MspInit+0xe0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_SAI_MspInit+0xe0>)
 800144c:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800145e:	230d      	movs	r3, #13
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4806      	ldr	r0, [pc, #24]	; (8001484 <HAL_SAI_MspInit+0xe8>)
 800146a:	f001 fc4f 	bl	8002d0c <HAL_GPIO_Init>

    }
}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40015404 	.word	0x40015404
 800147c:	200000ac 	.word	0x200000ac
 8001480:	40021000 	.word	0x40021000
 8001484:	48001000 	.word	0x48001000
 8001488:	40015424 	.word	0x40015424

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e0:	f000 f90c 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <ADC1_2_IRQHandler+0x10>)
 80014ee:	f000 fc5b 	bl	8001da8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000284 	.word	0x20000284

080014fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001500:	2104      	movs	r1, #4
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <TIM4_IRQHandler+0x18>)
 8001504:	f001 fdc2 	bl	800308c <HAL_GPIO_TogglePin>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <TIM4_IRQHandler+0x1c>)
 800150a:	f005 ff5e 	bl	80073ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	48000400 	.word	0x48000400
 8001518:	20000128 	.word	0x20000128

0800151c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <OTG_FS_IRQHandler+0x10>)
 8001522:	f002 f84d 	bl	80035c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000083c 	.word	0x2000083c

08001530 <_sbrk>:
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <_sbrk+0x50>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x16>
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <_sbrk+0x50>)
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <_sbrk+0x54>)
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <_sbrk+0x50>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <_sbrk+0x50>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	466a      	mov	r2, sp
 8001556:	4293      	cmp	r3, r2
 8001558:	d907      	bls.n	800156a <_sbrk+0x3a>
 800155a:	f009 fee3 	bl	800b324 <__errno>
 800155e:	4602      	mov	r2, r0
 8001560:	230c      	movs	r3, #12
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	e006      	b.n	8001578 <_sbrk+0x48>
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <_sbrk+0x50>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a03      	ldr	r2, [pc, #12]	; (8001580 <_sbrk+0x50>)
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000b0 	.word	0x200000b0
 8001584:	20000b08 	.word	0x20000b08

08001588 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <SystemInit+0x64>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001592:	4a16      	ldr	r2, [pc, #88]	; (80015ec <SystemInit+0x64>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <SystemInit+0x68>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <SystemInit+0x68>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <SystemInit+0x68>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <SystemInit+0x68>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <SystemInit+0x68>)
 80015b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <SystemInit+0x68>)
 80015c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <SystemInit+0x68>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <SystemInit+0x68>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <SystemInit+0x68>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SystemInit+0x64>)
 80015da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015de:	609a      	str	r2, [r3, #8]
#endif
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	40021000 	.word	0x40021000

080015f4 <Reset_Handler>:
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopForever+0x2>
 80015f8:	2100      	movs	r1, #0
 80015fa:	e003      	b.n	8001604 <LoopCopyDataInit>

080015fc <CopyDataInit>:
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <LoopForever+0x6>)
 80015fe:	585b      	ldr	r3, [r3, r1]
 8001600:	5043      	str	r3, [r0, r1]
 8001602:	3104      	adds	r1, #4

08001604 <LoopCopyDataInit>:
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <LoopForever+0xa>)
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <LoopForever+0xe>)
 8001608:	1842      	adds	r2, r0, r1
 800160a:	429a      	cmp	r2, r3
 800160c:	d3f6      	bcc.n	80015fc <CopyDataInit>
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LoopForever+0x12>)
 8001610:	e002      	b.n	8001618 <LoopFillZerobss>

08001612 <FillZerobss>:
 8001612:	2300      	movs	r3, #0
 8001614:	f842 3b04 	str.w	r3, [r2], #4

08001618 <LoopFillZerobss>:
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <LoopForever+0x16>)
 800161a:	429a      	cmp	r2, r3
 800161c:	d3f9      	bcc.n	8001612 <FillZerobss>
 800161e:	f7ff ffb3 	bl	8001588 <SystemInit>
 8001622:	f009 fe85 	bl	800b330 <__libc_init_array>
 8001626:	f7fe ff4f 	bl	80004c8 <main>

0800162a <LoopForever>:
 800162a:	e7fe      	b.n	800162a <LoopForever>
 800162c:	20018000 	.word	0x20018000
 8001630:	0800b590 	.word	0x0800b590
 8001634:	20000000 	.word	0x20000000
 8001638:	20000090 	.word	0x20000090
 800163c:	20000090 	.word	0x20000090
 8001640:	20000b04 	.word	0x20000b04

08001644 <ADC3_IRQHandler>:
 8001644:	e7fe      	b.n	8001644 <ADC3_IRQHandler>
	...

08001648 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_Init+0x3c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x3c>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f001 fb12 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f80f 	bl	8001688 <HAL_InitTick>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	e001      	b.n	800167a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001676:	f7ff fc05 	bl	8000e84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800167a:	79fb      	ldrb	r3, [r7, #7]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_InitTick+0x68>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d022      	beq.n	80016e2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_InitTick+0x6c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_InitTick+0x68>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 fb1e 	bl	8002cf2 <HAL_SYSTICK_Config>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10f      	bne.n	80016dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	d809      	bhi.n	80016d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c2:	2200      	movs	r2, #0
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	f04f 30ff 	mov.w	r0, #4294967295
 80016ca:	f001 fae8 	bl	8002c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_InitTick+0x70>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e007      	b.n	80016e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e004      	b.n	80016e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e001      	b.n	80016e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_IncTick+0x1c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_IncTick+0x20>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4413      	add	r3, r2
 800170a:	4a03      	ldr	r2, [pc, #12]	; (8001718 <HAL_IncTick+0x1c>)
 800170c:	6013      	str	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	2000046c 	.word	0x2000046c
 800171c:	20000008 	.word	0x20000008

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000046c 	.word	0x2000046c

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d004      	beq.n	800175c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_Delay+0x40>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175c:	bf00      	nop
 800175e:	f7ff ffdf 	bl	8001720 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f7      	bhi.n	800175e <HAL_Delay+0x26>
  {
  }
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008

0800177c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017e4:	b490      	push	{r4, r7}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3360      	adds	r3, #96	; 0x60
 80017f6:	461a      	mov	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001800:	6822      	ldr	r2, [r4, #0]
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <LL_ADC_SetOffset+0x40>)
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	4313      	orrs	r3, r2
 8001812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001816:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bc90      	pop	{r4, r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	03fff000 	.word	0x03fff000

08001828 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001828:	b490      	push	{r4, r7}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3360      	adds	r3, #96	; 0x60
 8001836:	461a      	mov	r2, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bc90      	pop	{r4, r7}
 800184e:	4770      	bx	lr

08001850 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001850:	b490      	push	{r4, r7}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3360      	adds	r3, #96	; 0x60
 8001860:	461a      	mov	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4313      	orrs	r3, r2
 8001874:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bc90      	pop	{r4, r7}
 800187e:	4770      	bx	lr

08001880 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018a6:	b490      	push	{r4, r7}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3330      	adds	r3, #48	; 0x30
 80018b6:	461a      	mov	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	4413      	add	r3, r2
 80018c4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80018c6:	6822      	ldr	r2, [r4, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	211f      	movs	r1, #31
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	0e9b      	lsrs	r3, r3, #26
 80018dc:	f003 011f 	and.w	r1, r3, #31
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	4313      	orrs	r3, r2
 80018ec:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc90      	pop	{r4, r7}
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800191e:	b490      	push	{r4, r7}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3314      	adds	r3, #20
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	0e5b      	lsrs	r3, r3, #25
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	4413      	add	r3, r2
 800193c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800193e:	6822      	ldr	r2, [r4, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	0d1b      	lsrs	r3, r3, #20
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2107      	movs	r1, #7
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	0d1b      	lsrs	r3, r3, #20
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bc90      	pop	{r4, r7}
 800196c:	4770      	bx	lr
	...

08001970 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0318 	and.w	r3, r3, #24
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001994:	40d9      	lsrs	r1, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	400b      	ands	r3, r1
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	431a      	orrs	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	0007ffff 	.word	0x0007ffff

080019b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 031f 	and.w	r3, r3, #31
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6093      	str	r3, [r2, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a28:	d101      	bne.n	8001a2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <LL_ADC_IsEnabled+0x18>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <LL_ADC_IsEnabled+0x1a>
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d101      	bne.n	8001af0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e134      	b.n	8001d84 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff f9cf 	bl	8000ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff67 	bl	8001a14 <LL_ADC_IsDeepPowerDownEnabled>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff4d 	bl	80019f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff82 	bl	8001a64 <LL_ADC_IsInternalRegulatorEnabled>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff66 	bl	8001a3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b70:	4b86      	ldr	r3, [pc, #536]	; (8001d8c <HAL_ADC_Init+0x28c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	4a86      	ldr	r2, [pc, #536]	; (8001d90 <HAL_ADC_Init+0x290>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff66 	bl	8001a64 <LL_ADC_IsInternalRegulatorEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10d      	bne.n	8001bba <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f043 0210 	orr.w	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff77 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001bc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 80cf 	bne.w	8001d72 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80cb 	bne.w	8001d72 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001be4:	f043 0202 	orr.w	r2, r3, #2
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff4b 	bl	8001a8c <LL_ADC_IsEnabled>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d115      	bne.n	8001c28 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bfc:	4865      	ldr	r0, [pc, #404]	; (8001d94 <HAL_ADC_Init+0x294>)
 8001bfe:	f7ff ff45 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c02:	4604      	mov	r4, r0
 8001c04:	4864      	ldr	r0, [pc, #400]	; (8001d98 <HAL_ADC_Init+0x298>)
 8001c06:	f7ff ff41 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	431c      	orrs	r4, r3
 8001c0e:	4863      	ldr	r0, [pc, #396]	; (8001d9c <HAL_ADC_Init+0x29c>)
 8001c10:	f7ff ff3c 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4323      	orrs	r3, r4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4619      	mov	r1, r3
 8001c22:	485f      	ldr	r0, [pc, #380]	; (8001da0 <HAL_ADC_Init+0x2a0>)
 8001c24:	f7ff fdaa 	bl	800177c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7e5b      	ldrb	r3, [r3, #25]
 8001c2c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c32:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c38:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c3e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c46:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	045b      	lsls	r3, r3, #17
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <HAL_ADC_Init+0x2a4>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	69b9      	ldr	r1, [r7, #24]
 8001c90:	430b      	orrs	r3, r1
 8001c92:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff0a 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001c9e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff17 	bl	8001ad8 <LL_ADC_INJ_IsConversionOngoing>
 8001caa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d13d      	bne.n	8001d2e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d13a      	bne.n	8001d2e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cbc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd4:	f023 0302 	bic.w	r3, r3, #2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	69b9      	ldr	r1, [r7, #24]
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d118      	bne.n	8001d1e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cf6:	f023 0304 	bic.w	r3, r3, #4
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d08:	4311      	orrs	r1, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	e007      	b.n	8001d2e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10c      	bne.n	8001d50 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f023 010f 	bic.w	r1, r3, #15
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4e:	e007      	b.n	8001d60 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 020f 	bic.w	r2, r2, #15
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f023 0303 	bic.w	r3, r3, #3
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d70:	e007      	b.n	8001d82 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	f043 0210 	orr.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3724      	adds	r7, #36	; 0x24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	053e2d63 	.word	0x053e2d63
 8001d94:	50040000 	.word	0x50040000
 8001d98:	50040100 	.word	0x50040100
 8001d9c:	50040200 	.word	0x50040200
 8001da0:	50040300 	.word	0x50040300
 8001da4:	fff0c007 	.word	0xfff0c007

08001da8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc4:	4882      	ldr	r0, [pc, #520]	; (8001fd0 <HAL_ADC_IRQHandler+0x228>)
 8001dc6:	f7ff fdf7 	bl	80019b8 <LL_ADC_GetMultimode>
 8001dca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d017      	beq.n	8001e06 <HAL_ADC_IRQHandler+0x5e>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d012      	beq.n	8001e06 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fdbf 	bl	800297c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2202      	movs	r2, #2
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_ADC_IRQHandler+0x72>
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8083 	beq.w	8001f2c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d07d      	beq.n	8001f2c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fd17 	bl	8001880 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d062      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a5d      	ldr	r2, [pc, #372]	; (8001fd4 <HAL_ADC_IRQHandler+0x22c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d002      	beq.n	8001e68 <HAL_ADC_IRQHandler+0xc0>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e000      	b.n	8001e6a <HAL_ADC_IRQHandler+0xc2>
 8001e68:	4b5b      	ldr	r3, [pc, #364]	; (8001fd8 <HAL_ADC_IRQHandler+0x230>)
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d008      	beq.n	8001e84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d002      	beq.n	8001e84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	d104      	bne.n	8001e8e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	e00c      	b.n	8001ea8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <HAL_ADC_IRQHandler+0x22c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d002      	beq.n	8001e9e <HAL_ADC_IRQHandler+0xf6>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	e000      	b.n	8001ea0 <HAL_ADC_IRQHandler+0xf8>
 8001e9e:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <HAL_ADC_IRQHandler+0x230>)
 8001ea0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d135      	bne.n	8001f1e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d12e      	bne.n	8001f1e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fdf4 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d11a      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 020c 	bic.w	r2, r2, #12
 8001ede:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d112      	bne.n	8001f1e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
 8001f04:	e00b      	b.n	8001f1e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f043 0210 	orr.w	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f95c 	bl	80021dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	220c      	movs	r2, #12
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_ADC_IRQHandler+0x198>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 809f 	beq.w	800208a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8099 	beq.w	800208a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fcbf 	bl	80018f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f7a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc7d 	bl	8001880 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f86:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_ADC_IRQHandler+0x22c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d002      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x1f0>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_IRQHandler+0x1f2>
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_ADC_IRQHandler+0x230>)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d008      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d002      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b07      	cmp	r3, #7
 8001fb2:	d104      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	e013      	b.n	8001fe6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_ADC_IRQHandler+0x22c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_ADC_IRQHandler+0x234>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	e007      	b.n	8001fde <HAL_ADC_IRQHandler+0x236>
 8001fce:	bf00      	nop
 8001fd0:	50040300 	.word	0x50040300
 8001fd4:	50040100 	.word	0x50040100
 8001fd8:	50040000 	.word	0x50040000
 8001fdc:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_ADC_IRQHandler+0x42c>)
 8001fde:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10c      	bne.n	8002006 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d142      	bne.n	800207c <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d03f      	beq.n	800207c <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002002:	2b00      	cmp	r3, #0
 8002004:	d13a      	bne.n	800207c <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d133      	bne.n	800207c <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12e      	bne.n	800207c <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fd58 	bl	8001ad8 <LL_ADC_INJ_IsConversionOngoing>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11a      	bne.n	8002064 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800203c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d112      	bne.n	800207c <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
 8002062:	e00b      	b.n	800207c <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	f043 0210 	orr.w	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fc55 	bl	800292c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2260      	movs	r2, #96	; 0x60
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	2b00      	cmp	r3, #0
 8002092:	d011      	beq.n	80020b8 <HAL_ADC_IRQHandler+0x310>
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8a0 	bl	80021f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d012      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x340>
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fc3b 	bl	8002954 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d012      	beq.n	8002118 <HAL_ADC_IRQHandler+0x370>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00d      	beq.n	8002118 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fc2d 	bl	8002968 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d036      	beq.n	8002190 <HAL_ADC_IRQHandler+0x3e8>
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d031      	beq.n	8002190 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002134:	2301      	movs	r3, #1
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
 8002138:	e014      	b.n	8002164 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002140:	4825      	ldr	r0, [pc, #148]	; (80021d8 <HAL_ADC_IRQHandler+0x430>)
 8002142:	f7ff fc47 	bl	80019d4 <LL_ADC_GetMultiDMATransfer>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00b      	beq.n	8002164 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800214c:	2301      	movs	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
 8002150:	e008      	b.n	8002164 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10e      	bne.n	8002188 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f83e 	bl	8002204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2210      	movs	r2, #16
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002196:	2b00      	cmp	r3, #0
 8002198:	d018      	beq.n	80021cc <HAL_ADC_IRQHandler+0x424>
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f043 0208 	orr.w	r2, r3, #8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fbba 	bl	8002940 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	50040000 	.word	0x50040000
 80021d8:	50040300 	.word	0x50040300

080021dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b0a6      	sub	sp, #152	; 0x98
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x22>
 8002236:	2302      	movs	r3, #2
 8002238:	e348      	b.n	80028cc <HAL_ADC_ConfigChannel+0x6b4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fc33 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 8329 	bne.w	80028a6 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d824      	bhi.n	80022a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	3b02      	subs	r3, #2
 8002262:	2b03      	cmp	r3, #3
 8002264:	d81b      	bhi.n	800229e <HAL_ADC_ConfigChannel+0x86>
 8002266:	a201      	add	r2, pc, #4	; (adr r2, 800226c <HAL_ADC_ConfigChannel+0x54>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	0800227d 	.word	0x0800227d
 8002270:	08002285 	.word	0x08002285
 8002274:	0800228d 	.word	0x0800228d
 8002278:	08002295 	.word	0x08002295
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	220c      	movs	r2, #12
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	e011      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2212      	movs	r2, #18
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	e00d      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2218      	movs	r2, #24
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e009      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	e004      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2206      	movs	r2, #6
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	e000      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80022a6:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	f7ff faf6 	bl	80018a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fbf7 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 80022c4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fc03 	bl	8001ad8 <LL_ADC_INJ_IsConversionOngoing>
 80022d2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 8148 	bne.w	8002570 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f040 8143 	bne.w	8002570 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f7ff fb11 	bl	800191e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	08db      	lsrs	r3, r3, #3
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b04      	cmp	r3, #4
 800231c:	d00a      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800232e:	f7ff fa59 	bl	80017e4 <LL_ADC_SetOffset>
 8002332:	e11d      	b.n	8002570 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fa74 	bl	8001828 <LL_ADC_GetOffsetChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x148>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fa69 	bl	8001828 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	0e9b      	lsrs	r3, r3, #26
 800235a:	f003 021f 	and.w	r2, r3, #31
 800235e:	e012      	b.n	8002386 <HAL_ADC_ConfigChannel+0x16e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fa5e 	bl	8001828 <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800237c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_ConfigChannel+0x186>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	e00a      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x19c>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80023ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d106      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fa45 	bl	8001850 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fa2b 	bl	8001828 <LL_ADC_GetOffsetChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x1da>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fa20 	bl	8001828 <LL_ADC_GetOffsetChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	e010      	b.n	8002414 <HAL_ADC_ConfigChannel+0x1fc>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fa15 	bl	8001828 <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_ConfigChannel+0x214>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	e00a      	b.n	8002442 <HAL_ADC_ConfigChannel+0x22a>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800243a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	429a      	cmp	r2, r3
 8002444:	d106      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f9fe 	bl	8001850 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff f9e4 	bl	8001828 <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x268>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2102      	movs	r1, #2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f9d9 	bl	8001828 <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	e010      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x28a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2102      	movs	r1, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff f9ce 	bl	8001828 <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x2a2>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0e9b      	lsrs	r3, r3, #26
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	e00a      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x2b8>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	2102      	movs	r1, #2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff f9b7 	bl	8001850 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2103      	movs	r1, #3
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f99d 	bl	8001828 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_ADC_ConfigChannel+0x2f6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2103      	movs	r1, #3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f992 	bl	8001828 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	e010      	b.n	8002530 <HAL_ADC_ConfigChannel+0x318>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2103      	movs	r1, #3
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff f987 	bl	8001828 <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x330>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	e00a      	b.n	800255e <HAL_ADC_ConfigChannel+0x346>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	429a      	cmp	r2, r3
 8002560:	d106      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	2103      	movs	r1, #3
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f970 	bl	8001850 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fa89 	bl	8001a8c <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 810c 	bne.w	800279a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	461a      	mov	r2, r3
 8002590:	f7ff f9ee 	bl	8001970 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4aad      	ldr	r2, [pc, #692]	; (8002850 <HAL_ADC_ConfigChannel+0x638>)
 800259a:	4293      	cmp	r3, r2
 800259c:	f040 80fd 	bne.w	800279a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x3b0>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	3301      	adds	r3, #1
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2b09      	cmp	r3, #9
 80025be:	bf94      	ite	ls
 80025c0:	2301      	movls	r3, #1
 80025c2:	2300      	movhi	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	e012      	b.n	80025ee <HAL_ADC_ConfigChannel+0x3d6>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	bf94      	ite	ls
 80025e8:	2301      	movls	r3, #1
 80025ea:	2300      	movhi	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d064      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d107      	bne.n	800260e <HAL_ADC_ConfigChannel+0x3f6>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	3301      	adds	r3, #1
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800260c:	e00e      	b.n	800262c <HAL_ADC_ConfigChannel+0x414>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3301      	adds	r3, #1
 8002626:	069b      	lsls	r3, r3, #26
 8002628:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_ADC_ConfigChannel+0x434>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	3301      	adds	r3, #1
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	e010      	b.n	800266e <HAL_ADC_ConfigChannel+0x456>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	ea42 0103 	orr.w	r1, r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x47c>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	3301      	adds	r3, #1
 8002686:	f003 021f 	and.w	r2, r3, #31
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	e011      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x4a0>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b8:	430b      	orrs	r3, r1
 80026ba:	e069      	b.n	8002790 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x4c0>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	3301      	adds	r3, #1
 80026d0:	069b      	lsls	r3, r3, #26
 80026d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d6:	e00e      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x4de>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	61fb      	str	r3, [r7, #28]
  return result;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	069b      	lsls	r3, r3, #26
 80026f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x4fe>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	3301      	adds	r3, #1
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	e010      	b.n	8002738 <HAL_ADC_ConfigChannel+0x520>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	617b      	str	r3, [r7, #20]
  return result;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	ea42 0103 	orr.w	r1, r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x54c>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	3301      	adds	r3, #1
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	3b1e      	subs	r3, #30
 800275c:	051b      	lsls	r3, r3, #20
 800275e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002762:	e014      	b.n	800278e <HAL_ADC_ConfigChannel+0x576>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	60fb      	str	r3, [r7, #12]
  return result;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	3b1e      	subs	r3, #30
 8002788:	051b      	lsls	r3, r3, #20
 800278a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278e:	430b      	orrs	r3, r1
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	4619      	mov	r1, r3
 8002796:	f7ff f8c2 	bl	800191e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_ADC_ConfigChannel+0x63c>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 808c 	beq.w	80028c0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a8:	482b      	ldr	r0, [pc, #172]	; (8002858 <HAL_ADC_ConfigChannel+0x640>)
 80027aa:	f7ff f80d 	bl	80017c8 <LL_ADC_GetCommonPathInternalCh>
 80027ae:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_ADC_ConfigChannel+0x644>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d12b      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x5fc>
 80027bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d125      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a24      	ldr	r2, [pc, #144]	; (8002860 <HAL_ADC_ConfigChannel+0x648>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <HAL_ADC_ConfigChannel+0x5c4>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a23      	ldr	r2, [pc, #140]	; (8002864 <HAL_ADC_ConfigChannel+0x64c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d16e      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e4:	4619      	mov	r1, r3
 80027e6:	481c      	ldr	r0, [pc, #112]	; (8002858 <HAL_ADC_ConfigChannel+0x640>)
 80027e8:	f7fe ffdb 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_ADC_ConfigChannel+0x650>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_ADC_ConfigChannel+0x654>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	099a      	lsrs	r2, r3, #6
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002804:	e002      	b.n	800280c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3b01      	subs	r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002812:	e052      	b.n	80028ba <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_ADC_ConfigChannel+0x658>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12a      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x65c>
 800281e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d124      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_ADC_ConfigChannel+0x648>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_ADC_ConfigChannel+0x626>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_ADC_ConfigChannel+0x64c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d13f      	bne.n	80028be <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002846:	4619      	mov	r1, r3
 8002848:	4803      	ldr	r0, [pc, #12]	; (8002858 <HAL_ADC_ConfigChannel+0x640>)
 800284a:	f7fe ffaa 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800284e:	e036      	b.n	80028be <HAL_ADC_ConfigChannel+0x6a6>
 8002850:	407f0000 	.word	0x407f0000
 8002854:	80080000 	.word	0x80080000
 8002858:	50040300 	.word	0x50040300
 800285c:	c7520000 	.word	0xc7520000
 8002860:	50040000 	.word	0x50040000
 8002864:	50040200 	.word	0x50040200
 8002868:	20000000 	.word	0x20000000
 800286c:	053e2d63 	.word	0x053e2d63
 8002870:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_ADC_ConfigChannel+0x6bc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d120      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800287e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11a      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_ADC_ConfigChannel+0x6c0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d115      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800289c:	4619      	mov	r1, r3
 800289e:	480f      	ldr	r0, [pc, #60]	; (80028dc <HAL_ADC_ConfigChannel+0x6c4>)
 80028a0:	f7fe ff7f 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
 80028a4:	e00c      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3798      	adds	r7, #152	; 0x98
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	80000001 	.word	0x80000001
 80028d8:	50040000 	.word	0x50040000
 80028dc:	50040300 	.word	0x50040300

080028e0 <LL_ADC_IsEnabled>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <LL_ADC_IsEnabled+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_ADC_IsEnabled+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_REG_IsConversionOngoing>:
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d101      	bne.n	800291e <LL_ADC_REG_IsConversionOngoing+0x18>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b09f      	sub	sp, #124	; 0x7c
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e08f      	b.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a47      	ldr	r2, [pc, #284]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d102      	bne.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80029c0:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	e001      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f043 0220 	orr.w	r2, r3, #32
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e072      	b.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff8b 	bl	8002906 <LL_ADC_REG_IsConversionOngoing>
 80029f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff85 	bl	8002906 <LL_ADC_REG_IsConversionOngoing>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d154      	bne.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d151      	bne.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a08:	4b35      	ldr	r3, [pc, #212]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a0a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02c      	beq.n	8002a6e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a26:	035b      	lsls	r3, r3, #13
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a30:	4829      	ldr	r0, [pc, #164]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a32:	f7ff ff55 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a36:	4604      	mov	r4, r0
 8002a38:	4828      	ldr	r0, [pc, #160]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a3a:	f7ff ff51 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	431c      	orrs	r4, r3
 8002a42:	4828      	ldr	r0, [pc, #160]	; (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a44:	f7ff ff4c 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4323      	orrs	r3, r4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d137      	bne.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a58:	f023 030f 	bic.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	6811      	ldr	r1, [r2, #0]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	6892      	ldr	r2, [r2, #8]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6c:	e028      	b.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7a:	4817      	ldr	r0, [pc, #92]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a7c:	f7ff ff30 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a80:	4604      	mov	r4, r0
 8002a82:	4816      	ldr	r0, [pc, #88]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a84:	f7ff ff2c 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	431c      	orrs	r4, r3
 8002a8c:	4815      	ldr	r0, [pc, #84]	; (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a8e:	f7ff ff27 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4323      	orrs	r3, r4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d112      	bne.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aa2:	f023 030f 	bic.w	r3, r3, #15
 8002aa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aa8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aaa:	e009      	b.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002abe:	e000      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	377c      	adds	r7, #124	; 0x7c
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	50040000 	.word	0x50040000
 8002adc:	50040100 	.word	0x50040100
 8002ae0:	50040300 	.word	0x50040300
 8002ae4:	50040200 	.word	0x50040200

08002ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	; (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f7ff ff8e 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff29 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff3e 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff8e 	bl	8002bdc <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5d 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff31 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffa2 	bl	8002c44 <SysTick_Config>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1a:	e17f      	b.n	800301c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8171 	beq.w	8003016 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x38>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b12      	cmp	r3, #18
 8002d42:	d123      	bne.n	8002d8c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	08da      	lsrs	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3208      	adds	r2, #8
 8002d86:	6939      	ldr	r1, [r7, #16]
 8002d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d00b      	beq.n	8002de0 <HAL_GPIO_Init+0xd4>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d007      	beq.n	8002de0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dd4:	2b11      	cmp	r3, #17
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b12      	cmp	r3, #18
 8002dde:	d130      	bne.n	8002e42 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e16:	2201      	movs	r2, #1
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 0201 	and.w	r2, r3, #1
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d118      	bne.n	8002e80 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e54:	2201      	movs	r2, #1
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	08db      	lsrs	r3, r3, #3
 8002e6a:	f003 0201 	and.w	r2, r3, #1
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80ac 	beq.w	8003016 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <HAL_GPIO_Init+0x32c>)
 8002ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec2:	4a5d      	ldr	r2, [pc, #372]	; (8003038 <HAL_GPIO_Init+0x32c>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8002eca:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <HAL_GPIO_Init+0x32c>)
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ed6:	4a59      	ldr	r2, [pc, #356]	; (800303c <HAL_GPIO_Init+0x330>)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3302      	adds	r3, #2
 8002ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	220f      	movs	r2, #15
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f00:	d025      	beq.n	8002f4e <HAL_GPIO_Init+0x242>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_GPIO_Init+0x334>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <HAL_GPIO_Init+0x23e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_GPIO_Init+0x338>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d019      	beq.n	8002f46 <HAL_GPIO_Init+0x23a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_GPIO_Init+0x33c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0x236>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <HAL_GPIO_Init+0x340>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <HAL_GPIO_Init+0x232>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_GPIO_Init+0x344>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x22e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a49      	ldr	r2, [pc, #292]	; (8003054 <HAL_GPIO_Init+0x348>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_GPIO_Init+0x22a>
 8002f32:	2306      	movs	r3, #6
 8002f34:	e00c      	b.n	8002f50 <HAL_GPIO_Init+0x244>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e00a      	b.n	8002f50 <HAL_GPIO_Init+0x244>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e008      	b.n	8002f50 <HAL_GPIO_Init+0x244>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x244>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x244>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x244>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x244>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f60:	4936      	ldr	r1, [pc, #216]	; (800303c <HAL_GPIO_Init+0x330>)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <HAL_GPIO_Init+0x34c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f92:	4a31      	ldr	r2, [pc, #196]	; (8003058 <HAL_GPIO_Init+0x34c>)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f98:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_GPIO_Init+0x34c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fbc:	4a26      	ldr	r2, [pc, #152]	; (8003058 <HAL_GPIO_Init+0x34c>)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_GPIO_Init+0x34c>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <HAL_GPIO_Init+0x34c>)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_GPIO_Init+0x34c>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003010:	4a11      	ldr	r2, [pc, #68]	; (8003058 <HAL_GPIO_Init+0x34c>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3301      	adds	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa22 f303 	lsr.w	r3, r2, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	f47f ae78 	bne.w	8002d1c <HAL_GPIO_Init+0x10>
  }
}
 800302c:	bf00      	nop
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40021000 	.word	0x40021000
 800303c:	40010000 	.word	0x40010000
 8003040:	48000400 	.word	0x48000400
 8003044:	48000800 	.word	0x48000800
 8003048:	48000c00 	.word	0x48000c00
 800304c:	48001000 	.word	0x48001000
 8003050:	48001400 	.word	0x48001400
 8003054:	48001800 	.word	0x48001800
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003078:	e002      	b.n	8003080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	887b      	ldrh	r3, [r7, #2]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030a4:	887a      	ldrh	r2, [r7, #2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80030aa:	e002      	b.n	80030b2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	619a      	str	r2, [r3, #24]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80030be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c0:	b08f      	sub	sp, #60	; 0x3c
 80030c2:	af0a      	add	r7, sp, #40	; 0x28
 80030c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e054      	b.n	800317a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f007 fe6c 	bl	800adc8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2203      	movs	r2, #3
 80030f4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f005 fa32 	bl	8008578 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	687e      	ldr	r6, [r7, #4]
 800311c:	466d      	mov	r5, sp
 800311e:	f106 0410 	add.w	r4, r6, #16
 8003122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800312a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800312e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003132:	1d33      	adds	r3, r6, #4
 8003134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	f005 f9bb 	bl	80084b2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2101      	movs	r1, #1
 8003142:	4618      	mov	r0, r3
 8003144:	f005 fa29 	bl	800859a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	687e      	ldr	r6, [r7, #4]
 8003150:	466d      	mov	r5, sp
 8003152:	f106 0410 	add.w	r4, r6, #16
 8003156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003162:	e885 0003 	stmia.w	r5, {r0, r1}
 8003166:	1d33      	adds	r3, r6, #4
 8003168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316a:	6838      	ldr	r0, [r7, #0]
 800316c:	f005 fb38 	bl	80087e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003182 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003182:	b590      	push	{r4, r7, lr}
 8003184:	b089      	sub	sp, #36	; 0x24
 8003186:	af04      	add	r7, sp, #16
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	4608      	mov	r0, r1
 800318c:	4611      	mov	r1, r2
 800318e:	461a      	mov	r2, r3
 8003190:	4603      	mov	r3, r0
 8003192:	70fb      	strb	r3, [r7, #3]
 8003194:	460b      	mov	r3, r1
 8003196:	70bb      	strb	r3, [r7, #2]
 8003198:	4613      	mov	r3, r2
 800319a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_HCD_HC_Init+0x28>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e07f      	b.n	80032aa <HAL_HCD_HC_Init+0x128>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	333d      	adds	r3, #61	; 0x3d
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	3338      	adds	r3, #56	; 0x38
 80031d6:	787a      	ldrb	r2, [r7, #1]
 80031d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	3340      	adds	r3, #64	; 0x40
 80031ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031ec:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	3339      	adds	r3, #57	; 0x39
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	440b      	add	r3, r1
 8003210:	333f      	adds	r3, #63	; 0x3f
 8003212:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003216:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	78bb      	ldrb	r3, [r7, #2]
 800321c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003220:	b2d8      	uxtb	r0, r3
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	333a      	adds	r3, #58	; 0x3a
 8003230:	4602      	mov	r2, r0
 8003232:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003234:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003238:	2b00      	cmp	r3, #0
 800323a:	da0a      	bge.n	8003252 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	333b      	adds	r3, #59	; 0x3b
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e009      	b.n	8003266 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	333b      	adds	r3, #59	; 0x3b
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	333c      	adds	r3, #60	; 0x3c
 8003276:	f897 2020 	ldrb.w	r2, [r7, #32]
 800327a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	787c      	ldrb	r4, [r7, #1]
 8003282:	78ba      	ldrb	r2, [r7, #2]
 8003284:	78f9      	ldrb	r1, [r7, #3]
 8003286:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003288:	9302      	str	r3, [sp, #8]
 800328a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4623      	mov	r3, r4
 8003298:	f005 fbe6 	bl	8008a68 <USB_HC_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}

080032b2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_HCD_HC_Halt+0x1e>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e00f      	b.n	80032f0 <HAL_HCD_HC_Halt+0x3e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 fdc4 	bl	8008e6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	70fb      	strb	r3, [r7, #3]
 800330a:	460b      	mov	r3, r1
 800330c:	70bb      	strb	r3, [r7, #2]
 800330e:	4613      	mov	r3, r2
 8003310:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	333b      	adds	r3, #59	; 0x3b
 8003322:	78ba      	ldrb	r2, [r7, #2]
 8003324:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	333f      	adds	r3, #63	; 0x3f
 8003336:	787a      	ldrb	r2, [r7, #1]
 8003338:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800333a:	7c3b      	ldrb	r3, [r7, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	3342      	adds	r3, #66	; 0x42
 8003350:	2203      	movs	r2, #3
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e009      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	440b      	add	r3, r1
 8003364:	3342      	adds	r3, #66	; 0x42
 8003366:	2202      	movs	r2, #2
 8003368:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800336a:	787b      	ldrb	r3, [r7, #1]
 800336c:	2b03      	cmp	r3, #3
 800336e:	f200 80d6 	bhi.w	800351e <HAL_HCD_HC_SubmitRequest+0x226>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_HCD_HC_SubmitRequest+0x80>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003389 	.word	0x08003389
 800337c:	08003509 	.word	0x08003509
 8003380:	080033f5 	.word	0x080033f5
 8003384:	0800347f 	.word	0x0800347f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003388:	7c3b      	ldrb	r3, [r7, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f040 80c9 	bne.w	8003522 <HAL_HCD_HC_SubmitRequest+0x22a>
 8003390:	78bb      	ldrb	r3, [r7, #2]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 80c5 	bne.w	8003522 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8003398:	8b3b      	ldrh	r3, [r7, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	3351      	adds	r3, #81	; 0x51
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	3351      	adds	r3, #81	; 0x51
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	3342      	adds	r3, #66	; 0x42
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033dc:	e0a1      	b.n	8003522 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	3342      	adds	r3, #66	; 0x42
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
      break;
 80033f2:	e096      	b.n	8003522 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d120      	bne.n	800343c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	3351      	adds	r3, #81	; 0x51
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	3342      	adds	r3, #66	; 0x42
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003424:	e07e      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	3342      	adds	r3, #66	; 0x42
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
      break;
 800343a:	e073      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	3350      	adds	r3, #80	; 0x50
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	3342      	adds	r3, #66	; 0x42
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
      break;
 8003466:	e05d      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	3342      	adds	r3, #66	; 0x42
 8003478:	2202      	movs	r2, #2
 800347a:	701a      	strb	r2, [r3, #0]
      break;
 800347c:	e052      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800347e:	78bb      	ldrb	r3, [r7, #2]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d120      	bne.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	3351      	adds	r3, #81	; 0x51
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	440b      	add	r3, r1
 80034a8:	3342      	adds	r3, #66	; 0x42
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034ae:	e039      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	3342      	adds	r3, #66	; 0x42
 80034c0:	2202      	movs	r2, #2
 80034c2:	701a      	strb	r2, [r3, #0]
      break;
 80034c4:	e02e      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	3350      	adds	r3, #80	; 0x50
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	3342      	adds	r3, #66	; 0x42
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
      break;
 80034f0:	e018      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	3342      	adds	r3, #66	; 0x42
 8003502:	2202      	movs	r2, #2
 8003504:	701a      	strb	r2, [r3, #0]
      break;
 8003506:	e00d      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	3342      	adds	r3, #66	; 0x42
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
      break;
 800351c:	e002      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003522:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	3344      	adds	r3, #68	; 0x44
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	8b39      	ldrh	r1, [r7, #24]
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4403      	add	r3, r0
 8003548:	3348      	adds	r3, #72	; 0x48
 800354a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	335c      	adds	r3, #92	; 0x5c
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	334c      	adds	r3, #76	; 0x4c
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	440b      	add	r3, r1
 8003582:	3339      	adds	r3, #57	; 0x39
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	335d      	adds	r3, #93	; 0x5d
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	3338      	adds	r3, #56	; 0x38
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f005 fb4b 	bl	8008c4c <USB_HC_StartXfer>
 80035b6:	4603      	mov	r3, r0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f005 f8bf 	bl	800875a <USB_GetMode>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	f040 80f1 	bne.w	80037c6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f005 f8a3 	bl	8008734 <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80e7 	beq.w	80037c4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f005 f89a 	bl	8008734 <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360a:	d104      	bne.n	8003616 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003614:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f005 f88a 	bl	8008734 <USB_ReadInterrupts>
 8003620:	4603      	mov	r3, r0
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362a:	d104      	bne.n	8003636 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003634:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f005 f87a 	bl	8008734 <USB_ReadInterrupts>
 8003640:	4603      	mov	r3, r0
 8003642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800364a:	d104      	bne.n	8003656 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003654:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f005 f86a 	bl	8008734 <USB_ReadInterrupts>
 8003660:	4603      	mov	r3, r0
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d103      	bne.n	8003672 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2202      	movs	r2, #2
 8003670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f005 f85c 	bl	8008734 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003686:	d117      	bne.n	80036b8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003696:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800369a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f007 fc15 	bl	800aecc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f005 f917 	bl	80088dc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f005 f839 	bl	8008734 <USB_ReadInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036cc:	d102      	bne.n	80036d4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f001 f884 	bl	80047dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f005 f82b 	bl	8008734 <USB_ReadInterrupts>
 80036de:	4603      	mov	r3, r0
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d106      	bne.n	80036f6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f007 fbd3 	bl	800ae94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2208      	movs	r2, #8
 80036f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f005 f81a 	bl	8008734 <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800370a:	d138      	bne.n	800377e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f005 fb9b 	bl	8008e4c <USB_HC_ReadInterrupt>
 8003716:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e025      	b.n	800376a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d018      	beq.n	8003764 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003748:	d106      	bne.n	8003758 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8cf 	bl	80038f4 <HCD_HC_IN_IRQHandler>
 8003756:	e005      	b.n	8003764 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fc3b 	bl	8003fda <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3301      	adds	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	429a      	cmp	r2, r3
 8003772:	d3d4      	bcc.n	800371e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f004 ffd6 	bl	8008734 <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b10      	cmp	r3, #16
 8003790:	d101      	bne.n	8003796 <HAL_HCD_IRQHandler+0x1d6>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_HCD_IRQHandler+0x1d8>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d014      	beq.n	80037c6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0210 	bic.w	r2, r2, #16
 80037aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 ff69 	bl	8004684 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699a      	ldr	r2, [r3, #24]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0210 	orr.w	r2, r2, #16
 80037c0:	619a      	str	r2, [r3, #24]
 80037c2:	e000      	b.n	80037c6 <HAL_HCD_IRQHandler+0x206>
      return;
 80037c4:	bf00      	nop
    }
  }
}
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_HCD_Start+0x16>
 80037de:	2302      	movs	r3, #2
 80037e0:	e013      	b.n	800380a <HAL_HCD_Start+0x3e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f004 feb1 	bl	8008556 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f005 f8d2 	bl	80089a4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_HCD_Stop+0x16>
 8003824:	2302      	movs	r3, #2
 8003826:	e00d      	b.n	8003844 <HAL_HCD_Stop+0x32>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f005 fc19 	bl	800906c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f005 f879 	bl	8008950 <USB_ResetPort>
 800385e:	4603      	mov	r3, r0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	335c      	adds	r3, #92	; 0x5c
 8003884:	781b      	ldrb	r3, [r3, #0]
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	334c      	adds	r3, #76	; 0x4c
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f005 f8bb 	bl	8008a44 <USB_GetCurrentFrame>
 80038ce:	4603      	mov	r3, r0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f005 f896 	bl	8008a16 <USB_GetHostSpeed>
 80038ea:	4603      	mov	r3, r0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d119      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2304      	movs	r3, #4
 8003934:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	440a      	add	r2, r1
 800394c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	60d3      	str	r3, [r2, #12]
 8003956:	e095      	b.n	8003a84 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d109      	bne.n	8003982 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	461a      	mov	r2, r3
 800397c:	2320      	movs	r3, #32
 800397e:	6093      	str	r3, [r2, #8]
 8003980:	e080      	b.n	8003a84 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d134      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	335d      	adds	r3, #93	; 0x5d
 80039c8:	2205      	movs	r2, #5
 80039ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	2310      	movs	r3, #16
 80039dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	2308      	movs	r3, #8
 80039ee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f005 fa37 	bl	8008e6e <USB_HC_Halt>
 8003a00:	e040      	b.n	8003a84 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d134      	bne.n	8003a84 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	0151      	lsls	r1, r2, #5
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	440a      	add	r2, r1
 8003a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f005 fa12 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a56:	461a      	mov	r2, r3
 8003a58:	2310      	movs	r3, #16
 8003a5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	440b      	add	r3, r1
 8003a6a:	335d      	adds	r3, #93	; 0x5d
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a82:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9a:	d122      	bne.n	8003ae2 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f005 f9d1 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ade:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003ae0:	e277      	b.n	8003fd2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	f040 80a1 	bne.w	8003c3c <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	440b      	add	r3, r1
 8003b08:	335d      	adds	r3, #93	; 0x5d
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3358      	adds	r3, #88	; 0x58
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2301      	movs	r3, #1
 8003b32:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	440b      	add	r3, r1
 8003b42:	333f      	adds	r3, #63	; 0x3f
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	440b      	add	r3, r1
 8003b58:	333f      	adds	r3, #63	; 0x3f
 8003b5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d121      	bne.n	8003ba4 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b7a:	f043 0302 	orr.w	r3, r3, #2
 8003b7e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f005 f96f 	bl	8008e6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	6093      	str	r3, [r2, #8]
 8003ba2:	e034      	b.n	8003c0e <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	333f      	adds	r3, #63	; 0x3f
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d129      	bne.n	8003c0e <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	0151      	lsls	r1, r2, #5
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	440a      	add	r2, r1
 8003bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bd8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	440b      	add	r3, r1
 8003be8:	335c      	adds	r3, #92	; 0x5c
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	b2d8      	uxtb	r0, r3
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	440b      	add	r3, r1
 8003c00:	335c      	adds	r3, #92	; 0x5c
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4601      	mov	r1, r0
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f007 f96d 	bl	800aee8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3350      	adds	r3, #80	; 0x50
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	f083 0301 	eor.w	r3, r3, #1
 8003c24:	b2d8      	uxtb	r0, r3
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	440b      	add	r3, r1
 8003c34:	3350      	adds	r3, #80	; 0x50
 8003c36:	4602      	mov	r2, r0
 8003c38:	701a      	strb	r2, [r3, #0]
}
 8003c3a:	e1ca      	b.n	8003fd2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	f040 80f1 	bne.w	8003e36 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c6e:	f023 0302 	bic.w	r3, r3, #2
 8003c72:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	335d      	adds	r3, #93	; 0x5d
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d10a      	bne.n	8003ca0 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	335c      	adds	r3, #92	; 0x5c
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e0b0      	b.n	8003e02 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	335d      	adds	r3, #93	; 0x5d
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d10a      	bne.n	8003ccc <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	440b      	add	r3, r1
 8003cc4:	335c      	adds	r3, #92	; 0x5c
 8003cc6:	2205      	movs	r2, #5
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e09a      	b.n	8003e02 <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	440b      	add	r3, r1
 8003cda:	335d      	adds	r3, #93	; 0x5d
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d00a      	beq.n	8003cf8 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	440b      	add	r3, r1
 8003cf0:	335d      	adds	r3, #93	; 0x5d
 8003cf2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d156      	bne.n	8003da6 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	440b      	add	r3, r1
 8003d06:	3358      	adds	r3, #88	; 0x58
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4403      	add	r3, r0
 8003d1a:	3358      	adds	r3, #88	; 0x58
 8003d1c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3358      	adds	r3, #88	; 0x58
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d914      	bls.n	8003d5e <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	440b      	add	r3, r1
 8003d42:	3358      	adds	r3, #88	; 0x58
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	335c      	adds	r3, #92	; 0x5c
 8003d58:	2204      	movs	r2, #4
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e009      	b.n	8003d72 <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	335c      	adds	r3, #92	; 0x5c
 8003d6e:	2202      	movs	r2, #2
 8003d70:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d88:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d90:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e02d      	b.n	8003e02 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	335d      	adds	r3, #93	; 0x5d
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d122      	bne.n	8003e02 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	440b      	add	r3, r1
 8003dca:	335c      	adds	r3, #92	; 0x5c
 8003dcc:	2202      	movs	r2, #2
 8003dce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003de6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2302      	movs	r3, #2
 8003e12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	b2d8      	uxtb	r0, r3
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	440b      	add	r3, r1
 8003e26:	335c      	adds	r3, #92	; 0x5c
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4601      	mov	r1, r0
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f007 f85a 	bl	800aee8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e34:	e0cd      	b.n	8003fd2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d13e      	bne.n	8003eca <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e66:	f043 0302 	orr.w	r3, r3, #2
 8003e6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	3358      	adds	r3, #88	; 0x58
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	1c59      	adds	r1, r3, #1
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4403      	add	r3, r0
 8003e8e:	3358      	adds	r3, #88	; 0x58
 8003e90:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	335d      	adds	r3, #93	; 0x5d
 8003ea2:	2206      	movs	r2, #6
 8003ea4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 ffdc 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	6093      	str	r3, [r2, #8]
}
 8003ec8:	e083      	b.n	8003fd2 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d178      	bne.n	8003fd2 <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	333f      	adds	r3, #63	; 0x3f
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d122      	bne.n	8003f3c <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	440b      	add	r3, r1
 8003f04:	3358      	adds	r3, #88	; 0x58
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f004 ff9a 	bl	8008e6e <USB_HC_Halt>
 8003f3a:	e041      	b.n	8003fc0 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	333f      	adds	r3, #63	; 0x3f
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	440b      	add	r3, r1
 8003f60:	333f      	adds	r3, #63	; 0x3f
 8003f62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d12b      	bne.n	8003fc0 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	440b      	add	r3, r1
 8003f76:	3358      	adds	r3, #88	; 0x58
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	335d      	adds	r3, #93	; 0x5d
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003faa:	f043 0302 	orr.w	r3, r3, #2
 8003fae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 ff57 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2310      	movs	r3, #16
 8003fd0:	6093      	str	r3, [r2, #8]
}
 8003fd2:	bf00      	nop
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b04      	cmp	r3, #4
 8004008:	d119      	bne.n	800403e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	461a      	mov	r2, r3
 8004018:	2304      	movs	r3, #4
 800401a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	440a      	add	r2, r1
 8004032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004036:	f043 0302 	orr.w	r3, r3, #2
 800403a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800403c:	e31e      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4413      	add	r3, r2
 8004046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d141      	bne.n	80040d8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	2320      	movs	r3, #32
 8004064:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	333d      	adds	r3, #61	; 0x3d
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 82ff 	bne.w	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	333d      	adds	r3, #61	; 0x3d
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	335c      	adds	r3, #92	; 0x5c
 80040a2:	2202      	movs	r2, #2
 80040a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f004 fecc 	bl	8008e6e <USB_HC_Halt>
}
 80040d6:	e2d1      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d13f      	bne.n	800416e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	335d      	adds	r3, #93	; 0x5d
 80040fe:	2204      	movs	r2, #4
 8004100:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	333d      	adds	r3, #61	; 0x3d
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	3358      	adds	r3, #88	; 0x58
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4413      	add	r3, r2
 8004132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	440a      	add	r2, r1
 8004140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f004 fe8a 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004166:	461a      	mov	r2, r3
 8004168:	2340      	movs	r3, #64	; 0x40
 800416a:	6093      	str	r3, [r2, #8]
}
 800416c:	e286      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004184:	d122      	bne.n	80041cc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	440a      	add	r2, r1
 800419c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f004 fe5c 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	461a      	mov	r2, r3
 80041c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c8:	6093      	str	r3, [r2, #8]
}
 80041ca:	e257      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d135      	bne.n	800424e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	3358      	adds	r3, #88	; 0x58
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	440a      	add	r2, r1
 800420c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fe24 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004232:	461a      	mov	r2, r3
 8004234:	2301      	movs	r3, #1
 8004236:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	335d      	adds	r3, #93	; 0x5d
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
}
 800424c:	e216      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b08      	cmp	r3, #8
 8004262:	d12b      	bne.n	80042bc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	2308      	movs	r3, #8
 8004274:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f004 fde4 	bl	8008e6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	335d      	adds	r3, #93	; 0x5d
 80042b6:	2205      	movs	r2, #5
 80042b8:	701a      	strb	r2, [r3, #0]
}
 80042ba:	e1df      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d135      	bne.n	800433e <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	440b      	add	r3, r1
 80042e0:	3358      	adds	r3, #88	; 0x58
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	440b      	add	r3, r1
 80042f4:	335d      	adds	r3, #93	; 0x5d
 80042f6:	2203      	movs	r2, #3
 80042f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	440a      	add	r2, r1
 8004310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f004 fda2 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4413      	add	r3, r2
 8004332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004336:	461a      	mov	r2, r3
 8004338:	2310      	movs	r3, #16
 800433a:	6093      	str	r3, [r2, #8]
}
 800433c:	e19e      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4413      	add	r3, r2
 8004346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	d12b      	bne.n	80043ac <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	440a      	add	r2, r1
 800436a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800436e:	f043 0302 	orr.w	r3, r3, #2
 8004372:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f004 fd75 	bl	8008e6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	335d      	adds	r3, #93	; 0x5d
 8004394:	2206      	movs	r2, #6
 8004396:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a4:	461a      	mov	r2, r3
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	6093      	str	r3, [r2, #8]
}
 80043aa:	e167      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d135      	bne.n	8004430 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f004 fd3d 	bl	8008e6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	461a      	mov	r2, r3
 8004402:	2310      	movs	r3, #16
 8004404:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004418:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	335d      	adds	r3, #93	; 0x5d
 800442a:	2208      	movs	r2, #8
 800442c:	701a      	strb	r2, [r3, #0]
}
 800442e:	e125      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	f040 811a 	bne.w	800467c <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	440a      	add	r2, r1
 800445e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004462:	f023 0302 	bic.w	r3, r3, #2
 8004466:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	440b      	add	r3, r1
 8004476:	335d      	adds	r3, #93	; 0x5d
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d137      	bne.n	80044ee <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	335c      	adds	r3, #92	; 0x5c
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	440b      	add	r3, r1
 80044a0:	333f      	adds	r3, #63	; 0x3f
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d00b      	beq.n	80044c0 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	440b      	add	r3, r1
 80044b6:	333f      	adds	r3, #63	; 0x3f
 80044b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	f040 80c5 	bne.w	800464a <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	3351      	adds	r3, #81	; 0x51
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	f083 0301 	eor.w	r3, r3, #1
 80044d6:	b2d8      	uxtb	r0, r3
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	3351      	adds	r3, #81	; 0x51
 80044e8:	4602      	mov	r2, r0
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	e0ad      	b.n	800464a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	335d      	adds	r3, #93	; 0x5d
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d10a      	bne.n	800451a <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	440b      	add	r3, r1
 8004512:	335c      	adds	r3, #92	; 0x5c
 8004514:	2202      	movs	r2, #2
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	e097      	b.n	800464a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	440b      	add	r3, r1
 8004528:	335d      	adds	r3, #93	; 0x5d
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d10a      	bne.n	8004546 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	440b      	add	r3, r1
 800453e:	335c      	adds	r3, #92	; 0x5c
 8004540:	2202      	movs	r2, #2
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e081      	b.n	800464a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	440b      	add	r3, r1
 8004554:	335d      	adds	r3, #93	; 0x5d
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b05      	cmp	r3, #5
 800455a:	d10a      	bne.n	8004572 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	440b      	add	r3, r1
 800456a:	335c      	adds	r3, #92	; 0x5c
 800456c:	2205      	movs	r2, #5
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	e06b      	b.n	800464a <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	335d      	adds	r3, #93	; 0x5d
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b06      	cmp	r3, #6
 8004586:	d00a      	beq.n	800459e <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	440b      	add	r3, r1
 8004596:	335d      	adds	r3, #93	; 0x5d
 8004598:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800459a:	2b08      	cmp	r3, #8
 800459c:	d155      	bne.n	800464a <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	440b      	add	r3, r1
 80045ac:	3358      	adds	r3, #88	; 0x58
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	1c59      	adds	r1, r3, #1
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4403      	add	r3, r0
 80045c0:	3358      	adds	r3, #88	; 0x58
 80045c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	440b      	add	r3, r1
 80045d2:	3358      	adds	r3, #88	; 0x58
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d914      	bls.n	8004604 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	440b      	add	r3, r1
 80045e8:	3358      	adds	r3, #88	; 0x58
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	440b      	add	r3, r1
 80045fc:	335c      	adds	r3, #92	; 0x5c
 80045fe:	2204      	movs	r2, #4
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e009      	b.n	8004618 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	440b      	add	r3, r1
 8004612:	335c      	adds	r3, #92	; 0x5c
 8004614:	2202      	movs	r2, #2
 8004616:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800462e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004636:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004644:	461a      	mov	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004656:	461a      	mov	r2, r3
 8004658:	2302      	movs	r3, #2
 800465a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	b2d8      	uxtb	r0, r3
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	440b      	add	r3, r1
 800466e:	335c      	adds	r3, #92	; 0x5c
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	4601      	mov	r1, r0
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f006 fc36 	bl	800aee8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800467c:	bf00      	nop
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	0c5b      	lsrs	r3, r3, #17
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046b8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d003      	beq.n	80046c8 <HCD_RXQLVL_IRQHandler+0x44>
 80046c0:	2b05      	cmp	r3, #5
 80046c2:	f000 8082 	beq.w	80047ca <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046c6:	e083      	b.n	80047d0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d07f      	beq.n	80047ce <HCD_RXQLVL_IRQHandler+0x14a>
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	440b      	add	r3, r1
 80046dc:	3344      	adds	r3, #68	; 0x44
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d074      	beq.n	80047ce <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	440b      	add	r3, r1
 80046f6:	3344      	adds	r3, #68	; 0x44
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	b292      	uxth	r2, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	f003 ffef 	bl	80086e2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	440b      	add	r3, r1
 8004712:	3344      	adds	r3, #68	; 0x44
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	18d1      	adds	r1, r2, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4403      	add	r3, r0
 8004728:	3344      	adds	r3, #68	; 0x44
 800472a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	334c      	adds	r3, #76	; 0x4c
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	18d1      	adds	r1, r2, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4403      	add	r3, r0
 8004750:	334c      	adds	r3, #76	; 0x4c
 8004752:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	4413      	add	r3, r2
 800475c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HCD_RXQLVL_IRQHandler+0x154>)
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d031      	beq.n	80047ce <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004780:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004788:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	4413      	add	r3, r2
 8004792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	440b      	add	r3, r1
 80047aa:	3350      	adds	r3, #80	; 0x50
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f083 0301 	eor.w	r3, r3, #1
 80047b2:	b2d8      	uxtb	r0, r3
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	440b      	add	r3, r1
 80047c2:	3350      	adds	r3, #80	; 0x50
 80047c4:	4602      	mov	r2, r0
 80047c6:	701a      	strb	r2, [r3, #0]
      break;
 80047c8:	e001      	b.n	80047ce <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80047ce:	bf00      	nop
  }
}
 80047d0:	bf00      	nop
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	1ff80000 	.word	0x1ff80000

080047dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004808:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d113      	bne.n	800483c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d10a      	bne.n	8004834 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800482c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f006 fb3e 	bl	800aeb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b08      	cmp	r3, #8
 8004844:	d147      	bne.n	80048d6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f043 0308 	orr.w	r3, r3, #8
 800484c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d129      	bne.n	80048ac <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d113      	bne.n	8004888 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004866:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800486a:	d106      	bne.n	800487a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f004 f832 	bl	80088dc <USB_InitFSLSPClkSel>
 8004878:	e011      	b.n	800489e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2101      	movs	r1, #1
 8004880:	4618      	mov	r0, r3
 8004882:	f004 f82b 	bl	80088dc <USB_InitFSLSPClkSel>
 8004886:	e00a      	b.n	800489e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d106      	bne.n	800489e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004896:	461a      	mov	r2, r3
 8004898:	f64e 2360 	movw	r3, #60000	; 0xea60
 800489c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f006 fb30 	bl	800af04 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f006 fb03 	bl	800aeb0 <HAL_HCD_Connect_Callback>
 80048aa:	e014      	b.n	80048d6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f006 fb37 	bl	800af20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048c4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80048d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d103      	bne.n	80048e8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f043 0320 	orr.w	r3, r3, #32
 80048e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048ee:	461a      	mov	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e081      	b.n	8004a12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fb32 	bl	8000f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800494c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800495c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d107      	bne.n	8004976 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	e006      	b.n	8004984 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004982:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d104      	bne.n	8004996 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004994:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	ea42 0103 	orr.w	r1, r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	021a      	lsls	r2, r3, #8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d138      	bne.n	8004aa2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e032      	b.n	8004aa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2224      	movs	r2, #36	; 0x24
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e000      	b.n	8004aa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
  }
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d139      	bne.n	8004b3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e033      	b.n	8004b3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2224      	movs	r2, #36	; 0x24
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0af      	b.n	8004cba <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fa80 	bl	8001074 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e00a      	b.n	8004ba8 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d9f1      	bls.n	8004b92 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0204 	orr.w	r2, r2, #4
 8004bbc:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4b3f      	ldr	r3, [pc, #252]	; (8004cc4 <HAL_LCD_Init+0x17c>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6851      	ldr	r1, [r2, #4]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	4311      	orrs	r1, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004bd6:	4311      	orrs	r1, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bdc:	4311      	orrs	r1, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	69d2      	ldr	r2, [r2, #28]
 8004be2:	4311      	orrs	r1, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6a12      	ldr	r2, [r2, #32]
 8004be8:	4311      	orrs	r1, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6992      	ldr	r2, [r2, #24]
 8004bee:	4311      	orrs	r1, r2
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bf4:	4311      	orrs	r1, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f862 	bl	8004cc8 <LCD_WaitForSynchro>
 8004c04:	4603      	mov	r3, r0
 8004c06:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_LCD_Init+0xca>
  {
    return status;
 8004c0e:	7cfb      	ldrb	r3, [r7, #19]
 8004c10:	e053      	b.n	8004cba <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004c4a:	f7fc fd69 	bl	8001720 <HAL_GetTick>
 8004c4e:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004c50:	e00c      	b.n	8004c6c <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004c52:	f7fc fd65 	bl	8001720 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c60:	d904      	bls.n	8004c6c <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2208      	movs	r2, #8
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e026      	b.n	8004cba <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d1eb      	bne.n	8004c52 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004c7a:	f7fc fd51 	bl	8001720 <HAL_GetTick>
 8004c7e:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004c80:	e00c      	b.n	8004c9c <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004c82:	f7fc fd4d 	bl	8001720 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c90:	d904      	bls.n	8004c9c <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2210      	movs	r2, #16
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e00e      	b.n	8004cba <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d1eb      	bne.n	8004c82 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	fc00000e 	.word	0xfc00000e

08004cc8 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004cd0:	f7fc fd26 	bl	8001720 <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004cd6:	e00c      	b.n	8004cf2 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004cd8:	f7fc fd22 	bl	8001720 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce6:	d904      	bls.n	8004cf2 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e007      	b.n	8004d02 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d1eb      	bne.n	8004cd8 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a04      	ldr	r2, [pc, #16]	; (8004d28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	6013      	str	r3, [r2, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40007000 	.word	0x40007000

08004d2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40007000 	.word	0x40007000

08004d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d56:	d130      	bne.n	8004dba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d58:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d64:	d038      	beq.n	8004dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d66:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2232      	movs	r2, #50	; 0x32
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	0c9b      	lsrs	r3, r3, #18
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d8c:	e002      	b.n	8004d94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d94:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da0:	d102      	bne.n	8004da8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f2      	bne.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db4:	d110      	bne.n	8004dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e00f      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc6:	d007      	beq.n	8004dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dd0:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40007000 	.word	0x40007000
 8004dec:	20000000 	.word	0x20000000
 8004df0:	431bde83 	.word	0x431bde83

08004df4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e02:	6053      	str	r3, [r2, #4]
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40007000 	.word	0x40007000

08004e14 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004e1c:	f7fc fc80 	bl	8001720 <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e06f      	b.n	8004f0c <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_QSPI_Init+0x28>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e067      	b.n	8004f0c <HAL_QSPI_Init+0xf8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fc f9ad 	bl	80011b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004e5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f858 	bl	8004f18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	021a      	lsls	r2, r3, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2120      	movs	r1, #32
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f850 	bl	8004f34 <QSPI_WaitFlagStateUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004e98:	7afb      	ldrb	r3, [r7, #11]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d131      	bne.n	8004f02 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	f023 0310 	bic.w	r3, r3, #16
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6852      	ldr	r2, [r2, #4]
 8004eb0:	0611      	lsls	r1, r2, #24
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68d2      	ldr	r2, [r2, #12]
 8004eb6:	4311      	orrs	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <HAL_QSPI_Init+0x100>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6912      	ldr	r2, [r2, #16]
 8004ece:	0411      	lsls	r1, r2, #16
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6952      	ldr	r2, [r2, #20]
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6992      	ldr	r2, [r2, #24]
 8004eda:	4311      	orrs	r1, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	ffe0f8fe 	.word	0xffe0f8fe

08004f18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f44:	e01a      	b.n	8004f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d016      	beq.n	8004f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fc fbe7 	bl	8001720 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2204      	movs	r2, #4
 8004f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e00e      	b.n	8004f9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d1d6      	bne.n	8004f46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e39d      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb6:	4ba4      	ldr	r3, [pc, #656]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc0:	4ba1      	ldr	r3, [pc, #644]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80e1 	beq.w	800519a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_RCC_OscConfig+0x4a>
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	f040 8088 	bne.w	80050f6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 8084 	bne.w	80050f6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fee:	4b96      	ldr	r3, [pc, #600]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_RCC_OscConfig+0x62>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e375      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1a      	ldr	r2, [r3, #32]
 800500a:	4b8f      	ldr	r3, [pc, #572]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d004      	beq.n	8005020 <HAL_RCC_OscConfig+0x7c>
 8005016:	4b8c      	ldr	r3, [pc, #560]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800501e:	e005      	b.n	800502c <HAL_RCC_OscConfig+0x88>
 8005020:	4b89      	ldr	r3, [pc, #548]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800502c:	4293      	cmp	r3, r2
 800502e:	d223      	bcs.n	8005078 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fd09 	bl	8005a4c <RCC_SetFlashLatencyFromMSIRange>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e356      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005044:	4b80      	ldr	r3, [pc, #512]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a7f      	ldr	r2, [pc, #508]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800504a:	f043 0308 	orr.w	r3, r3, #8
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b7d      	ldr	r3, [pc, #500]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	497a      	ldr	r1, [pc, #488]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005062:	4b79      	ldr	r3, [pc, #484]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	4975      	ldr	r1, [pc, #468]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	604b      	str	r3, [r1, #4]
 8005076:	e022      	b.n	80050be <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005078:	4b73      	ldr	r3, [pc, #460]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a72      	ldr	r2, [pc, #456]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800507e:	f043 0308 	orr.w	r3, r3, #8
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4b70      	ldr	r3, [pc, #448]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	496d      	ldr	r1, [pc, #436]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005096:	4b6c      	ldr	r3, [pc, #432]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	4968      	ldr	r1, [pc, #416]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fccc 	bl	8005a4c <RCC_SetFlashLatencyFromMSIRange>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e319      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050be:	f000 fc03 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 80050c2:	4601      	mov	r1, r0
 80050c4:	4b60      	ldr	r3, [pc, #384]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	4a5f      	ldr	r2, [pc, #380]	; (800524c <HAL_RCC_OscConfig+0x2a8>)
 80050d0:	5cd3      	ldrb	r3, [r2, r3]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	fa21 f303 	lsr.w	r3, r1, r3
 80050da:	4a5d      	ldr	r2, [pc, #372]	; (8005250 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050de:	4b5d      	ldr	r3, [pc, #372]	; (8005254 <HAL_RCC_OscConfig+0x2b0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fc fad0 	bl	8001688 <HAL_InitTick>
 80050e8:	4603      	mov	r3, r0
 80050ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d052      	beq.n	8005198 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	e2fd      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d032      	beq.n	8005164 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050fe:	4b52      	ldr	r3, [pc, #328]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a51      	ldr	r2, [pc, #324]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800510a:	f7fc fb09 	bl	8001720 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005112:	f7fc fb05 	bl	8001720 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e2e6      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005124:	4b48      	ldr	r3, [pc, #288]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005130:	4b45      	ldr	r3, [pc, #276]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a44      	ldr	r2, [pc, #272]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005136:	f043 0308 	orr.w	r3, r3, #8
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	4b42      	ldr	r3, [pc, #264]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	493f      	ldr	r1, [pc, #252]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800514e:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	493a      	ldr	r1, [pc, #232]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800515e:	4313      	orrs	r3, r2
 8005160:	604b      	str	r3, [r1, #4]
 8005162:	e01a      	b.n	800519a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005164:	4b38      	ldr	r3, [pc, #224]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a37      	ldr	r2, [pc, #220]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005170:	f7fc fad6 	bl	8001720 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005178:	f7fc fad2 	bl	8001720 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e2b3      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x1d4>
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d074      	beq.n	8005290 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d005      	beq.n	80051b8 <HAL_RCC_OscConfig+0x214>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	d10e      	bne.n	80051d0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d10b      	bne.n	80051d0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	4b23      	ldr	r3, [pc, #140]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d064      	beq.n	800528e <HAL_RCC_OscConfig+0x2ea>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d160      	bne.n	800528e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e290      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d8:	d106      	bne.n	80051e8 <HAL_RCC_OscConfig+0x244>
 80051da:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 80051e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e01d      	b.n	8005224 <HAL_RCC_OscConfig+0x280>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051f0:	d10c      	bne.n	800520c <HAL_RCC_OscConfig+0x268>
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 80051f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a11      	ldr	r2, [pc, #68]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0x280>
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 8005212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a0a      	ldr	r2, [pc, #40]	; (8005248 <HAL_RCC_OscConfig+0x2a4>)
 800521e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01c      	beq.n	8005266 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fc fa78 	bl	8001720 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005232:	e011      	b.n	8005258 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005234:	f7fc fa74 	bl	8001720 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b64      	cmp	r3, #100	; 0x64
 8005240:	d90a      	bls.n	8005258 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e255      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	0800b538 	.word	0x0800b538
 8005250:	20000000 	.word	0x20000000
 8005254:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005258:	4bae      	ldr	r3, [pc, #696]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0e7      	beq.n	8005234 <HAL_RCC_OscConfig+0x290>
 8005264:	e014      	b.n	8005290 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005266:	f7fc fa5b 	bl	8001720 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526e:	f7fc fa57 	bl	8001720 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b64      	cmp	r3, #100	; 0x64
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e238      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005280:	4ba4      	ldr	r3, [pc, #656]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x2ca>
 800528c:	e000      	b.n	8005290 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d060      	beq.n	800535e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d005      	beq.n	80052ae <HAL_RCC_OscConfig+0x30a>
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	d119      	bne.n	80052dc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d116      	bne.n	80052dc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ae:	4b99      	ldr	r3, [pc, #612]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_RCC_OscConfig+0x322>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e215      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c6:	4b93      	ldr	r3, [pc, #588]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	061b      	lsls	r3, r3, #24
 80052d4:	498f      	ldr	r1, [pc, #572]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052da:	e040      	b.n	800535e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d023      	beq.n	800532c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e4:	4b8b      	ldr	r3, [pc, #556]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a8a      	ldr	r2, [pc, #552]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80052ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fc fa16 	bl	8001720 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f8:	f7fc fa12 	bl	8001720 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e1f3      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800530a:	4b82      	ldr	r3, [pc, #520]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005316:	4b7f      	ldr	r3, [pc, #508]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	497b      	ldr	r1, [pc, #492]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
 800532a:	e018      	b.n	800535e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800532c:	4b79      	ldr	r3, [pc, #484]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a78      	ldr	r2, [pc, #480]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fc f9f2 	bl	8001720 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005340:	f7fc f9ee 	bl	8001720 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e1cf      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005352:	4b70      	ldr	r3, [pc, #448]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01c      	beq.n	80053ac <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005372:	4b68      	ldr	r3, [pc, #416]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005378:	4a66      	ldr	r2, [pc, #408]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fc f9cd 	bl	8001720 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538a:	f7fc f9c9 	bl	8001720 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e1aa      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800539c:	4b5d      	ldr	r3, [pc, #372]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 800539e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ef      	beq.n	800538a <HAL_RCC_OscConfig+0x3e6>
 80053aa:	e01b      	b.n	80053e4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053ac:	4b59      	ldr	r3, [pc, #356]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b2:	4a58      	ldr	r2, [pc, #352]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fc f9b0 	bl	8001720 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c4:	f7fc f9ac 	bl	8001720 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e18d      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053d6:	4b4f      	ldr	r3, [pc, #316]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80053d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ef      	bne.n	80053c4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a5 	beq.w	800553c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f2:	2300      	movs	r3, #0
 80053f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80053f6:	4b47      	ldr	r3, [pc, #284]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10d      	bne.n	800541e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	4b44      	ldr	r3, [pc, #272]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4a43      	ldr	r2, [pc, #268]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
 800540e:	4b41      	ldr	r3, [pc, #260]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005416:	60bb      	str	r3, [r7, #8]
 8005418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800541a:	2301      	movs	r3, #1
 800541c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800541e:	4b3e      	ldr	r3, [pc, #248]	; (8005518 <HAL_RCC_OscConfig+0x574>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d118      	bne.n	800545c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542a:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <HAL_RCC_OscConfig+0x574>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a3a      	ldr	r2, [pc, #232]	; (8005518 <HAL_RCC_OscConfig+0x574>)
 8005430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005436:	f7fc f973 	bl	8001720 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543e:	f7fc f96f 	bl	8001720 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e150      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005450:	4b31      	ldr	r3, [pc, #196]	; (8005518 <HAL_RCC_OscConfig+0x574>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d108      	bne.n	8005476 <HAL_RCC_OscConfig+0x4d2>
 8005464:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	4a2a      	ldr	r2, [pc, #168]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005474:	e024      	b.n	80054c0 <HAL_RCC_OscConfig+0x51c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2b05      	cmp	r3, #5
 800547c:	d110      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4fc>
 800547e:	4b25      	ldr	r3, [pc, #148]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	4a23      	ldr	r2, [pc, #140]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005494:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800549e:	e00f      	b.n	80054c0 <HAL_RCC_OscConfig+0x51c>
 80054a0:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054b0:	4b18      	ldr	r3, [pc, #96]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80054b8:	f023 0304 	bic.w	r3, r3, #4
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d016      	beq.n	80054f6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fc f92a 	bl	8001720 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d0:	f7fc f926 	bl	8001720 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e105      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e6:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_OscConfig+0x570>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ed      	beq.n	80054d0 <HAL_RCC_OscConfig+0x52c>
 80054f4:	e019      	b.n	800552a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f6:	f7fc f913 	bl	8001720 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054fc:	e00e      	b.n	800551c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fc f90f 	bl	8001720 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d905      	bls.n	800551c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e0ee      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
 8005514:	40021000 	.word	0x40021000
 8005518:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800551c:	4b77      	ldr	r3, [pc, #476]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e9      	bne.n	80054fe <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800552a:	7ffb      	ldrb	r3, [r7, #31]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d105      	bne.n	800553c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005530:	4b72      	ldr	r3, [pc, #456]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005534:	4a71      	ldr	r2, [pc, #452]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80d5 	beq.w	80056f0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b0c      	cmp	r3, #12
 800554a:	f000 808e 	beq.w	800566a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	2b02      	cmp	r3, #2
 8005554:	d15b      	bne.n	800560e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005556:	4b69      	ldr	r3, [pc, #420]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a68      	ldr	r2, [pc, #416]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 800555c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005562:	f7fc f8dd 	bl	8001720 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556a:	f7fc f8d9 	bl	8001720 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0ba      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800557c:	4b5f      	ldr	r3, [pc, #380]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005588:	4b5c      	ldr	r3, [pc, #368]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	4b5c      	ldr	r3, [pc, #368]	; (8005700 <HAL_RCC_OscConfig+0x75c>)
 800558e:	4013      	ands	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005598:	3a01      	subs	r2, #1
 800559a:	0112      	lsls	r2, r2, #4
 800559c:	4311      	orrs	r1, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055a2:	0212      	lsls	r2, r2, #8
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0552      	lsls	r2, r2, #21
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055b6:	0852      	lsrs	r2, r2, #1
 80055b8:	3a01      	subs	r2, #1
 80055ba:	0652      	lsls	r2, r2, #25
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055c2:	0912      	lsrs	r2, r2, #4
 80055c4:	0452      	lsls	r2, r2, #17
 80055c6:	430a      	orrs	r2, r1
 80055c8:	494c      	ldr	r1, [pc, #304]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055ce:	4b4b      	ldr	r3, [pc, #300]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a4a      	ldr	r2, [pc, #296]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 80055d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055da:	4b48      	ldr	r3, [pc, #288]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	4a47      	ldr	r2, [pc, #284]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 80055e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fc f89b 	bl	8001720 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fc f897 	bl	8001720 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e078      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005600:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x64a>
 800560c:	e070      	b.n	80056f0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a3a      	ldr	r2, [pc, #232]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005618:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800561a:	4b38      	ldr	r3, [pc, #224]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d105      	bne.n	8005632 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005626:	4b35      	ldr	r3, [pc, #212]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	4a34      	ldr	r2, [pc, #208]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 800562c:	f023 0303 	bic.w	r3, r3, #3
 8005630:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005632:	4b32      	ldr	r3, [pc, #200]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	4a31      	ldr	r2, [pc, #196]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005638:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800563c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005640:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fc f86d 	bl	8001720 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564a:	f7fc f869 	bl	8001720 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e04a      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800565c:	4b27      	ldr	r3, [pc, #156]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x6a6>
 8005668:	e042      	b.n	80056f0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e03d      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005676:	4b21      	ldr	r3, [pc, #132]	; (80056fc <HAL_RCC_OscConfig+0x758>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 0203 	and.w	r2, r3, #3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	429a      	cmp	r2, r3
 8005688:	d130      	bne.n	80056ec <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	3b01      	subs	r3, #1
 8005696:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d127      	bne.n	80056ec <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d11f      	bne.n	80056ec <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056b6:	2a07      	cmp	r2, #7
 80056b8:	bf14      	ite	ne
 80056ba:	2201      	movne	r2, #1
 80056bc:	2200      	moveq	r2, #0
 80056be:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d113      	bne.n	80056ec <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	3b01      	subs	r3, #1
 80056d2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d109      	bne.n	80056ec <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	3b01      	subs	r3, #1
 80056e6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	f99d808c 	.word	0xf99d808c

08005704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0c8      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005718:	4b66      	ldr	r3, [pc, #408]	; (80058b4 <HAL_RCC_ClockConfig+0x1b0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d910      	bls.n	8005748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b63      	ldr	r3, [pc, #396]	; (80058b4 <HAL_RCC_ClockConfig+0x1b0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 0207 	bic.w	r2, r3, #7
 800572e:	4961      	ldr	r1, [pc, #388]	; (80058b4 <HAL_RCC_ClockConfig+0x1b0>)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b5f      	ldr	r3, [pc, #380]	; (80058b4 <HAL_RCC_ClockConfig+0x1b0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0b0      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d04c      	beq.n	80057ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b03      	cmp	r3, #3
 800575a:	d107      	bne.n	800576c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575c:	4b56      	ldr	r3, [pc, #344]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d121      	bne.n	80057ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e09e      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d107      	bne.n	8005784 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005774:	4b50      	ldr	r3, [pc, #320]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d115      	bne.n	80057ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e092      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d107      	bne.n	800579c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800578c:	4b4a      	ldr	r3, [pc, #296]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e086      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800579c:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e07e      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057ac:	4b42      	ldr	r3, [pc, #264]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 0203 	bic.w	r2, r3, #3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	493f      	ldr	r1, [pc, #252]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057be:	f7fb ffaf 	bl	8001720 <HAL_GetTick>
 80057c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c4:	e00a      	b.n	80057dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c6:	f7fb ffab 	bl	8001720 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e066      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057dc:	4b36      	ldr	r3, [pc, #216]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 020c 	and.w	r2, r3, #12
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d1eb      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fa:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	492c      	ldr	r1, [pc, #176]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005808:	4313      	orrs	r3, r2
 800580a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800580c:	4b29      	ldr	r3, [pc, #164]	; (80058b4 <HAL_RCC_ClockConfig+0x1b0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d210      	bcs.n	800583c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <HAL_RCC_ClockConfig+0x1b0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 0207 	bic.w	r2, r3, #7
 8005822:	4924      	ldr	r1, [pc, #144]	; (80058b4 <HAL_RCC_ClockConfig+0x1b0>)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <HAL_RCC_ClockConfig+0x1b0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e036      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005848:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4918      	ldr	r1, [pc, #96]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	4910      	ldr	r1, [pc, #64]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005876:	4313      	orrs	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800587a:	f000 f825 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 800587e:	4601      	mov	r1, r0
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	5cd3      	ldrb	r3, [r2, r3]
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	fa21 f303 	lsr.w	r3, r1, r3
 8005896:	4a0a      	ldr	r2, [pc, #40]	; (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fb fef2 	bl	8001688 <HAL_InitTick>
 80058a4:	4603      	mov	r3, r0
 80058a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80058a8:	7afb      	ldrb	r3, [r7, #11]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40022000 	.word	0x40022000
 80058b8:	40021000 	.word	0x40021000
 80058bc:	0800b538 	.word	0x0800b538
 80058c0:	20000000 	.word	0x20000000
 80058c4:	20000004 	.word	0x20000004

080058c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	2300      	movs	r3, #0
 80058d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058d6:	4b3d      	ldr	r3, [pc, #244]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058e0:	4b3a      	ldr	r3, [pc, #232]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x34>
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d121      	bne.n	800593a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d11e      	bne.n	800593a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058fc:	4b33      	ldr	r3, [pc, #204]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d107      	bne.n	8005918 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005908:	4b30      	ldr	r3, [pc, #192]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 800590a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	e005      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005924:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800592c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10d      	bne.n	8005950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005938:	e00a      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d102      	bne.n	8005946 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005940:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e004      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d101      	bne.n	8005950 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800594c:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800594e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b0c      	cmp	r3, #12
 8005954:	d133      	bne.n	80059be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005956:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d002      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0xa4>
 8005966:	2b03      	cmp	r3, #3
 8005968:	d003      	beq.n	8005972 <HAL_RCC_GetSysClockFreq+0xaa>
 800596a:	e005      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800596e:	617b      	str	r3, [r7, #20]
      break;
 8005970:	e005      	b.n	800597e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005972:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005974:	617b      	str	r3, [r7, #20]
      break;
 8005976:	e002      	b.n	800597e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	617b      	str	r3, [r7, #20]
      break;
 800597c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	091b      	lsrs	r3, r3, #4
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	3301      	adds	r3, #1
 800598a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800598c:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	fb02 f203 	mul.w	r2, r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_RCC_GetSysClockFreq+0x104>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	0e5b      	lsrs	r3, r3, #25
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	3301      	adds	r3, #1
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80059be:	69bb      	ldr	r3, [r7, #24]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3724      	adds	r7, #36	; 0x24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40021000 	.word	0x40021000
 80059d0:	0800b550 	.word	0x0800b550
 80059d4:	00f42400 	.word	0x00f42400
 80059d8:	007a1200 	.word	0x007a1200

080059dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059e2:	681b      	ldr	r3, [r3, #0]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000000 	.word	0x20000000

080059f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059f8:	f7ff fff0 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 80059fc:	4601      	mov	r1, r0
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	0800b548 	.word	0x0800b548

08005a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a24:	f7ff ffda 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8005a28:	4601      	mov	r1, r0
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	0adb      	lsrs	r3, r3, #11
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a36:	5cd3      	ldrb	r3, [r2, r3]
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000
 8005a48:	0800b548 	.word	0x0800b548

08005a4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a54:	2300      	movs	r3, #0
 8005a56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a58:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a64:	f7ff f962 	bl	8004d2c <HAL_PWREx_GetVoltageRange>
 8005a68:	6178      	str	r0, [r7, #20]
 8005a6a:	e014      	b.n	8005a96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a6c:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a70:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a76:	6593      	str	r3, [r2, #88]	; 0x58
 8005a78:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a84:	f7ff f952 	bl	8004d2c <HAL_PWREx_GetVoltageRange>
 8005a88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a8a:	4b1e      	ldr	r3, [pc, #120]	; (8005b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	4a1d      	ldr	r2, [pc, #116]	; (8005b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9c:	d10b      	bne.n	8005ab6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b80      	cmp	r3, #128	; 0x80
 8005aa2:	d919      	bls.n	8005ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2ba0      	cmp	r3, #160	; 0xa0
 8005aa8:	d902      	bls.n	8005ab0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005aaa:	2302      	movs	r3, #2
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	e013      	b.n	8005ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	e010      	b.n	8005ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d902      	bls.n	8005ac2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005abc:	2303      	movs	r3, #3
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	e00a      	b.n	8005ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b80      	cmp	r3, #128	; 0x80
 8005ac6:	d102      	bne.n	8005ace <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ac8:	2302      	movs	r3, #2
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	e004      	b.n	8005ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d101      	bne.n	8005ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f023 0207 	bic.w	r2, r3, #7
 8005ae0:	4909      	ldr	r1, [pc, #36]	; (8005b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d001      	beq.n	8005afa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40022000 	.word	0x40022000

08005b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b14:	2300      	movs	r3, #0
 8005b16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b18:	2300      	movs	r3, #0
 8005b1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d03f      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b30:	d01c      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b36:	d802      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00e      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005b3c:	e01f      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b42:	d003      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005b44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b48:	d01c      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005b4a:	e018      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b4c:	4b85      	ldr	r3, [pc, #532]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a84      	ldr	r2, [pc, #528]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b58:	e015      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 ff41 	bl	80069e8 <RCCEx_PLLSAI1_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b6a:	e00c      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3320      	adds	r3, #32
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f001 f828 	bl	8006bc8 <RCCEx_PLLSAI2_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	74fb      	strb	r3, [r7, #19]
      break;
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b8c:	4b75      	ldr	r3, [pc, #468]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9a:	4972      	ldr	r1, [pc, #456]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ba2:	e001      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d03f      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bbc:	d01c      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005bbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bc2:	d802      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005bc8:	e01f      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bce:	d003      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005bd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bd4:	d01c      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005bd6:	e018      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bd8:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a61      	ldr	r2, [pc, #388]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005be4:	e015      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fefb 	bl	80069e8 <RCCEx_PLLSAI1_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bf6:	e00c      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3320      	adds	r3, #32
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 ffe2 	bl	8006bc8 <RCCEx_PLLSAI2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c08:	e003      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	74fb      	strb	r3, [r7, #19]
      break;
 8005c0e:	e000      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c12:	7cfb      	ldrb	r3, [r7, #19]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c18:	4b52      	ldr	r3, [pc, #328]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c26:	494f      	ldr	r1, [pc, #316]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005c2e:	e001      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80a0 	beq.w	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c42:	2300      	movs	r3, #0
 8005c44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c46:	4b47      	ldr	r3, [pc, #284]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00d      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5c:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	4a40      	ldr	r2, [pc, #256]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c66:	6593      	str	r3, [r2, #88]	; 0x58
 8005c68:	4b3e      	ldr	r3, [pc, #248]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c74:	2301      	movs	r3, #1
 8005c76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c78:	4b3b      	ldr	r3, [pc, #236]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a3a      	ldr	r2, [pc, #232]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c84:	f7fb fd4c 	bl	8001720 <HAL_GetTick>
 8005c88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c8a:	e009      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8c:	f7fb fd48 	bl	8001720 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d902      	bls.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	74fb      	strb	r3, [r7, #19]
        break;
 8005c9e:	e005      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ca0:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0ef      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005cac:	7cfb      	ldrb	r3, [r7, #19]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d15c      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01f      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d019      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cd0:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	4a20      	ldr	r2, [pc, #128]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cec:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	4a1c      	ldr	r2, [pc, #112]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cfc:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d016      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fb fd07 	bl	8001720 <HAL_GetTick>
 8005d12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d14:	e00b      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d16:	f7fb fd03 	bl	8001720 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d902      	bls.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	74fb      	strb	r3, [r7, #19]
            break;
 8005d2c:	e006      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ec      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005d3c:	7cfb      	ldrb	r3, [r7, #19]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d42:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d52:	4904      	ldr	r1, [pc, #16]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d5a:	e009      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d5c:	7cfb      	ldrb	r3, [r7, #19]
 8005d5e:	74bb      	strb	r3, [r7, #18]
 8005d60:	e006      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d70:	7c7b      	ldrb	r3, [r7, #17]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d105      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d76:	4b9e      	ldr	r3, [pc, #632]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	4a9d      	ldr	r2, [pc, #628]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d8e:	4b98      	ldr	r3, [pc, #608]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f023 0203 	bic.w	r2, r3, #3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	4994      	ldr	r1, [pc, #592]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005db0:	4b8f      	ldr	r3, [pc, #572]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f023 020c 	bic.w	r2, r3, #12
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	498c      	ldr	r1, [pc, #560]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dd2:	4b87      	ldr	r3, [pc, #540]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	4983      	ldr	r1, [pc, #524]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005df4:	4b7e      	ldr	r3, [pc, #504]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	497b      	ldr	r1, [pc, #492]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e16:	4b76      	ldr	r3, [pc, #472]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e24:	4972      	ldr	r1, [pc, #456]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e38:	4b6d      	ldr	r3, [pc, #436]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e46:	496a      	ldr	r1, [pc, #424]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e5a:	4b65      	ldr	r3, [pc, #404]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	4961      	ldr	r1, [pc, #388]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e7c:	4b5c      	ldr	r3, [pc, #368]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8a:	4959      	ldr	r1, [pc, #356]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e9e:	4b54      	ldr	r3, [pc, #336]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eac:	4950      	ldr	r1, [pc, #320]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ec0:	4b4b      	ldr	r3, [pc, #300]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	4948      	ldr	r1, [pc, #288]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ee2:	4b43      	ldr	r3, [pc, #268]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef0:	493f      	ldr	r1, [pc, #252]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d028      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f04:	4b3a      	ldr	r3, [pc, #232]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f12:	4937      	ldr	r1, [pc, #220]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f22:	d106      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f24:	4b32      	ldr	r3, [pc, #200]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	4a31      	ldr	r2, [pc, #196]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2e:	60d3      	str	r3, [r2, #12]
 8005f30:	e011      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f3a:	d10c      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	2101      	movs	r1, #1
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fd50 	bl	80069e8 <RCCEx_PLLSAI1_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005f52:	7cfb      	ldrb	r3, [r7, #19]
 8005f54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d028      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f62:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	491f      	ldr	r1, [pc, #124]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f80:	d106      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f82:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f8c:	60d3      	str	r3, [r2, #12]
 8005f8e:	e011      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fd21 	bl	80069e8 <RCCEx_PLLSAI1_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d02b      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fce:	4908      	ldr	r1, [pc, #32]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fde:	d109      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a02      	ldr	r2, [pc, #8]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fea:	60d3      	str	r3, [r2, #12]
 8005fec:	e014      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005fee:	bf00      	nop
 8005ff0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ffc:	d10c      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	2101      	movs	r1, #1
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fcef 	bl	80069e8 <RCCEx_PLLSAI1_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800600e:	7cfb      	ldrb	r3, [r7, #19]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8006014:	7cfb      	ldrb	r3, [r7, #19]
 8006016:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d02f      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006024:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006032:	4928      	ldr	r1, [pc, #160]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800603e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006042:	d10d      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	2102      	movs	r1, #2
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fccc 	bl	80069e8 <RCCEx_PLLSAI1_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d014      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800605a:	7cfb      	ldrb	r3, [r7, #19]
 800605c:	74bb      	strb	r3, [r7, #18]
 800605e:	e011      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006068:	d10c      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3320      	adds	r3, #32
 800606e:	2102      	movs	r1, #2
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fda9 	bl	8006bc8 <RCCEx_PLLSAI2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800607a:	7cfb      	ldrb	r3, [r7, #19]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609e:	490d      	ldr	r1, [pc, #52]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060c2:	4904      	ldr	r1, [pc, #16]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40021000 	.word	0x40021000

080060d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ea:	d137      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80060ec:	4bb8      	ldr	r3, [pc, #736]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fe:	d014      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006104:	d01e      	beq.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8006106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610a:	d001      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800610c:	f000 bc53 	b.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006110:	4baf      	ldr	r3, [pc, #700]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b02      	cmp	r3, #2
 800611c:	f040 8446 	bne.w	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8006120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006124:	61fb      	str	r3, [r7, #28]
      break;
 8006126:	f000 bc41 	b.w	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800612a:	4ba9      	ldr	r3, [pc, #676]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800612c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b02      	cmp	r3, #2
 8006136:	f040 843b 	bne.w	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 800613a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800613e:	61fb      	str	r3, [r7, #28]
      break;
 8006140:	f000 bc36 	b.w	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006144:	4ba2      	ldr	r3, [pc, #648]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006150:	f040 8430 	bne.w	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8006154:	4b9f      	ldr	r3, [pc, #636]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006156:	61fb      	str	r3, [r7, #28]
      break;
 8006158:	f000 bc2c 	b.w	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800615c:	4b9c      	ldr	r3, [pc, #624]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d023      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800616c:	2b03      	cmp	r3, #3
 800616e:	d02e      	beq.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006170:	2b01      	cmp	r3, #1
 8006172:	d139      	bne.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006174:	4b96      	ldr	r3, [pc, #600]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d116      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006180:	4b93      	ldr	r3, [pc, #588]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800618c:	4b90      	ldr	r3, [pc, #576]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	091b      	lsrs	r3, r3, #4
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	e005      	b.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8006198:	4b8d      	ldr	r3, [pc, #564]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800619a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	4a8c      	ldr	r2, [pc, #560]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80061a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061ac:	e01f      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61bb      	str	r3, [r7, #24]
      break;
 80061b2:	e01c      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061b4:	4b86      	ldr	r3, [pc, #536]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c0:	d102      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 80061c2:	4b86      	ldr	r3, [pc, #536]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80061c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061c6:	e012      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
      break;
 80061cc:	e00f      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061ce:	4b80      	ldr	r3, [pc, #512]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061da:	d102      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 80061dc:	4b80      	ldr	r3, [pc, #512]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80061de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061e0:	e005      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
      break;
 80061e6:	e002      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61bb      	str	r3, [r7, #24]
      break;
 80061ec:	bf00      	nop
    }

    switch(PeriphClk)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f4:	f000 8337 	beq.w	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 80061f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fc:	d825      	bhi.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80061fe:	2b10      	cmp	r3, #16
 8006200:	f000 81df 	beq.w	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006204:	2b10      	cmp	r3, #16
 8006206:	d80f      	bhi.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8006208:	2b02      	cmp	r3, #2
 800620a:	f000 8128 	beq.w	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800620e:	2b02      	cmp	r3, #2
 8006210:	d803      	bhi.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8006212:	2b01      	cmp	r3, #1
 8006214:	f000 80ec 	beq.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006218:	e3cd      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800621a:	2b04      	cmp	r3, #4
 800621c:	f000 8169 	beq.w	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8006220:	2b08      	cmp	r3, #8
 8006222:	f000 819a 	beq.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8006226:	e3c6      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	f000 82b3 	beq.w	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d803      	bhi.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8006232:	2b20      	cmp	r3, #32
 8006234:	f000 81fd 	beq.w	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8006238:	e3bd      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800623a:	2b80      	cmp	r3, #128	; 0x80
 800623c:	f000 82cd 	beq.w	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006244:	f000 82ec 	beq.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8006248:	e3b5      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800624a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800624e:	f000 822d 	beq.w	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006256:	d811      	bhi.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625c:	d021      	beq.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800625e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006262:	d804      	bhi.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006268:	f000 833e 	beq.w	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 800626c:	e3a3      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006272:	d01d      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006278:	d021      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 800627a:	e39c      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	f000 8277 	beq.w	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8006284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006288:	d804      	bhi.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800628a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628e:	f000 8371 	beq.w	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8006292:	e390      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8006294:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006298:	d011      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800629a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800629e:	d00e      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80062a0:	e389      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80062a2:	69b9      	ldr	r1, [r7, #24]
 80062a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80062a8:	f000 fd68 	bl	8006d7c <RCCEx_GetSAIxPeriphCLKFreq>
 80062ac:	61f8      	str	r0, [r7, #28]
      break;
 80062ae:	e382      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80062b0:	69b9      	ldr	r1, [r7, #24]
 80062b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80062b6:	f000 fd61 	bl	8006d7c <RCCEx_GetSAIxPeriphCLKFreq>
 80062ba:	61f8      	str	r0, [r7, #28]
      break;
 80062bc:	e37b      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80062be:	4b44      	ldr	r3, [pc, #272]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80062c8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d0:	d023      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 80062d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062d6:	d003      	beq.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80062d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062dc:	d04a      	beq.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 80062de:	e086      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d17b      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80062ec:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80062f8:	4b35      	ldr	r3, [pc, #212]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	e005      	b.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8006304:	4b32      	ldr	r3, [pc, #200]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	4a31      	ldr	r2, [pc, #196]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006316:	61fb      	str	r3, [r7, #28]
          break;
 8006318:	e064      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800631a:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006326:	d15f      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006328:	4b29      	ldr	r3, [pc, #164]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006334:	d158      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006336:	4b26      	ldr	r3, [pc, #152]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006340:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	fb02 f203 	mul.w	r2, r2, r3
 800634a:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	091b      	lsrs	r3, r3, #4
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	3301      	adds	r3, #1
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800635c:	4b1c      	ldr	r3, [pc, #112]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	0d5b      	lsrs	r3, r3, #21
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	3301      	adds	r3, #1
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	61fb      	str	r3, [r7, #28]
          break;
 8006372:	e039      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006374:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800637c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006380:	d134      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638e:	d12d      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006390:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	fb02 f203 	mul.w	r2, r2, r3
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	3301      	adds	r3, #1
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	0d5b      	lsrs	r3, r3, #21
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	3301      	adds	r3, #1
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ca:	61fb      	str	r3, [r7, #28]
          break;
 80063cc:	e00e      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000
 80063d4:	0003d090 	.word	0x0003d090
 80063d8:	0800b550 	.word	0x0800b550
 80063dc:	00f42400 	.word	0x00f42400
 80063e0:	007a1200 	.word	0x007a1200
          break;
 80063e4:	bf00      	nop
 80063e6:	e2e6      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80063e8:	bf00      	nop
 80063ea:	e2e4      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80063ec:	bf00      	nop
        break;
 80063ee:	e2e2      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80063f0:	4bac      	ldr	r3, [pc, #688]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80063f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d827      	bhi.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006419 	.word	0x08006419
 800640c:	08006421 	.word	0x08006421
 8006410:	08006429 	.word	0x08006429
 8006414:	0800643d 	.word	0x0800643d
          frequency = HAL_RCC_GetPCLK2Freq();
 8006418:	f7ff fb02 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 800641c:	61f8      	str	r0, [r7, #28]
          break;
 800641e:	e01d      	b.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8006420:	f7ff fa52 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8006424:	61f8      	str	r0, [r7, #28]
          break;
 8006426:	e019      	b.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006428:	4b9e      	ldr	r3, [pc, #632]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006434:	d10f      	bne.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8006436:	4b9c      	ldr	r3, [pc, #624]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006438:	61fb      	str	r3, [r7, #28]
          break;
 800643a:	e00c      	b.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800643c:	4b99      	ldr	r3, [pc, #612]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b02      	cmp	r3, #2
 8006448:	d107      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 800644a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644e:	61fb      	str	r3, [r7, #28]
          break;
 8006450:	e003      	b.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8006452:	bf00      	nop
 8006454:	e2af      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006456:	bf00      	nop
 8006458:	e2ad      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800645a:	bf00      	nop
        break;
 800645c:	e2ab      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800645e:	4b91      	ldr	r3, [pc, #580]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006464:	f003 030c 	and.w	r3, r3, #12
 8006468:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b0c      	cmp	r3, #12
 800646e:	d83a      	bhi.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006470:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	080064ad 	.word	0x080064ad
 800647c:	080064e7 	.word	0x080064e7
 8006480:	080064e7 	.word	0x080064e7
 8006484:	080064e7 	.word	0x080064e7
 8006488:	080064b5 	.word	0x080064b5
 800648c:	080064e7 	.word	0x080064e7
 8006490:	080064e7 	.word	0x080064e7
 8006494:	080064e7 	.word	0x080064e7
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064e7 	.word	0x080064e7
 80064a0:	080064e7 	.word	0x080064e7
 80064a4:	080064e7 	.word	0x080064e7
 80064a8:	080064d1 	.word	0x080064d1
          frequency = HAL_RCC_GetPCLK1Freq();
 80064ac:	f7ff faa2 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 80064b0:	61f8      	str	r0, [r7, #28]
          break;
 80064b2:	e01d      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 80064b4:	f7ff fa08 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 80064b8:	61f8      	str	r0, [r7, #28]
          break;
 80064ba:	e019      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064bc:	4b79      	ldr	r3, [pc, #484]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c8:	d10f      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 80064ca:	4b77      	ldr	r3, [pc, #476]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80064cc:	61fb      	str	r3, [r7, #28]
          break;
 80064ce:	e00c      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064d0:	4b74      	ldr	r3, [pc, #464]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d107      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e2:	61fb      	str	r3, [r7, #28]
          break;
 80064e4:	e003      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 80064e6:	bf00      	nop
 80064e8:	e265      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80064ea:	bf00      	nop
 80064ec:	e263      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80064ee:	bf00      	nop
        break;
 80064f0:	e261      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80064f2:	4b6c      	ldr	r3, [pc, #432]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064fc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b10      	cmp	r3, #16
 8006502:	d00d      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8006504:	2b10      	cmp	r3, #16
 8006506:	d802      	bhi.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 800650c:	e024      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 800650e:	2b20      	cmp	r3, #32
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8006512:	2b30      	cmp	r3, #48	; 0x30
 8006514:	d012      	beq.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8006516:	e01f      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006518:	f7ff fa6c 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 800651c:	61f8      	str	r0, [r7, #28]
          break;
 800651e:	e01b      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8006520:	f7ff f9d2 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8006524:	61f8      	str	r0, [r7, #28]
          break;
 8006526:	e017      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006528:	4b5e      	ldr	r3, [pc, #376]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006534:	d10d      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8006536:	4b5c      	ldr	r3, [pc, #368]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006538:	61fb      	str	r3, [r7, #28]
          break;
 800653a:	e00a      	b.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800653c:	4b59      	ldr	r3, [pc, #356]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b02      	cmp	r3, #2
 8006548:	d105      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654e:	61fb      	str	r3, [r7, #28]
          break;
 8006550:	e001      	b.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006552:	bf00      	nop
 8006554:	e22f      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006556:	bf00      	nop
        break;
 8006558:	e22d      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800655a:	4b52      	ldr	r3, [pc, #328]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006560:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006564:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d00d      	beq.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d802      	bhi.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8006574:	e024      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8006576:	2b80      	cmp	r3, #128	; 0x80
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800657a:	2bc0      	cmp	r3, #192	; 0xc0
 800657c:	d012      	beq.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 800657e:	e01f      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006580:	f7ff fa38 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8006584:	61f8      	str	r0, [r7, #28]
          break;
 8006586:	e01b      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006588:	f7ff f99e 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 800658c:	61f8      	str	r0, [r7, #28]
          break;
 800658e:	e017      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006590:	4b44      	ldr	r3, [pc, #272]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659c:	d10d      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 800659e:	4b42      	ldr	r3, [pc, #264]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80065a0:	61fb      	str	r3, [r7, #28]
          break;
 80065a2:	e00a      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065a4:	4b3f      	ldr	r3, [pc, #252]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d105      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80065b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b6:	61fb      	str	r3, [r7, #28]
          break;
 80065b8:	e001      	b.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80065ba:	bf00      	nop
 80065bc:	e1fb      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80065be:	bf00      	nop
        break;
 80065c0:	e1f9      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065cc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	d010      	beq.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065da:	d802      	bhi.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80065e0:	e026      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80065e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e6:	d00b      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80065e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ec:	d012      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80065ee:	e01f      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7ff fa00 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 80065f4:	61f8      	str	r0, [r7, #28]
          break;
 80065f6:	e01b      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80065f8:	f7ff f966 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 80065fc:	61f8      	str	r0, [r7, #28]
          break;
 80065fe:	e017      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006600:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660c:	d10d      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 800660e:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006610:	61fb      	str	r3, [r7, #28]
          break;
 8006612:	e00a      	b.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006614:	4b23      	ldr	r3, [pc, #140]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b02      	cmp	r3, #2
 8006620:	d105      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8006622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006626:	61fb      	str	r3, [r7, #28]
          break;
 8006628:	e001      	b.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800662a:	bf00      	nop
 800662c:	e1c3      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800662e:	bf00      	nop
        break;
 8006630:	e1c1      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800663c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	d010      	beq.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664a:	d802      	bhi.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8006650:	e026      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8006652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006656:	d00b      	beq.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800665c:	d012      	beq.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800665e:	e01f      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006660:	f7ff f9c8 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8006664:	61f8      	str	r0, [r7, #28]
          break;
 8006666:	e01b      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006668:	f7ff f92e 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 800666c:	61f8      	str	r0, [r7, #28]
          break;
 800666e:	e017      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006670:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667c:	d10d      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800667e:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006680:	61fb      	str	r3, [r7, #28]
          break;
 8006682:	e00a      	b.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006684:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d105      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8006692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006696:	61fb      	str	r3, [r7, #28]
          break;
 8006698:	e001      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800669a:	bf00      	nop
 800669c:	e18b      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800669e:	bf00      	nop
        break;
 80066a0:	e189      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80066a2:	bf00      	nop
 80066a4:	40021000 	.word	0x40021000
 80066a8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80066ac:	4bae      	ldr	r3, [pc, #696]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066b6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066be:	d02f      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80066c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066c4:	d003      	beq.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80066c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ca:	d004      	beq.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80066cc:	e050      	b.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 80066ce:	f7ff f8fb 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 80066d2:	61f8      	str	r0, [r7, #28]
          break;
 80066d4:	e04c      	b.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80066d6:	4ba4      	ldr	r3, [pc, #656]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d043      	beq.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80066e2:	4ba1      	ldr	r3, [pc, #644]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ec:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	fb02 f203 	mul.w	r2, r2, r3
 80066f6:	4b9c      	ldr	r3, [pc, #624]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	3301      	adds	r3, #1
 8006702:	fbb2 f3f3 	udiv	r3, r2, r3
 8006706:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006708:	4b97      	ldr	r3, [pc, #604]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	0e5b      	lsrs	r3, r3, #25
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	3301      	adds	r3, #1
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	61fb      	str	r3, [r7, #28]
          break;
 800671e:	e024      	b.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8006720:	4b91      	ldr	r3, [pc, #580]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800672c:	4b8e      	ldr	r3, [pc, #568]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	0a1b      	lsrs	r3, r3, #8
 8006732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006736:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	fb02 f203 	mul.w	r2, r2, r3
 8006740:	4b89      	ldr	r3, [pc, #548]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	3301      	adds	r3, #1
 800674c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006750:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006752:	4b85      	ldr	r3, [pc, #532]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	0e5b      	lsrs	r3, r3, #25
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	3301      	adds	r3, #1
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	fbb2 f3f3 	udiv	r3, r2, r3
 8006766:	61fb      	str	r3, [r7, #28]
          break;
 8006768:	e001      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 800676a:	bf00      	nop
 800676c:	e123      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800676e:	bf00      	nop
        break;
 8006770:	e121      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006772:	4b7d      	ldr	r3, [pc, #500]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677c:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006784:	f7ff f94c 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 8006788:	61f8      	str	r0, [r7, #28]
        break;
 800678a:	e114      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 800678c:	f7ff f89c 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8006790:	61f8      	str	r0, [r7, #28]
        break;
 8006792:	e110      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006794:	4b74      	ldr	r3, [pc, #464]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800679e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a6:	d009      	beq.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d000      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 80067b2:	e011      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7ff f91e 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 80067b8:	61f8      	str	r0, [r7, #28]
          break;
 80067ba:	e00d      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 80067bc:	f7ff f884 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 80067c0:	61f8      	str	r0, [r7, #28]
          break;
 80067c2:	e009      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c4:	4b68      	ldr	r3, [pc, #416]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d0:	d101      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 80067d2:	4b66      	ldr	r3, [pc, #408]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80067d4:	61fb      	str	r3, [r7, #28]
          break;
 80067d6:	bf00      	nop
        break;
 80067d8:	e0ed      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80067da:	4b63      	ldr	r3, [pc, #396]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067e4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ec:	d009      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80067ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f2:	d00a      	beq.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d000      	beq.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80067f8:	e011      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067fa:	f7ff f8fb 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 80067fe:	61f8      	str	r0, [r7, #28]
          break;
 8006800:	e00d      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8006802:	f7ff f861 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8006806:	61f8      	str	r0, [r7, #28]
          break;
 8006808:	e009      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800680a:	4b57      	ldr	r3, [pc, #348]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006816:	d101      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8006818:	4b54      	ldr	r3, [pc, #336]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800681a:	61fb      	str	r3, [r7, #28]
          break;
 800681c:	bf00      	nop
        break;
 800681e:	e0ca      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006820:	4b51      	ldr	r3, [pc, #324]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800682a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006832:	d009      	beq.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006838:	d00a      	beq.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d000      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 800683e:	e011      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006840:	f7ff f8d8 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8006844:	61f8      	str	r0, [r7, #28]
          break;
 8006846:	e00d      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006848:	f7ff f83e 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 800684c:	61f8      	str	r0, [r7, #28]
          break;
 800684e:	e009      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006850:	4b45      	ldr	r3, [pc, #276]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685c:	d101      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 800685e:	4b43      	ldr	r3, [pc, #268]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006860:	61fb      	str	r3, [r7, #28]
          break;
 8006862:	bf00      	nop
        break;
 8006864:	e0a7      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006866:	4b40      	ldr	r3, [pc, #256]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006870:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006878:	d010      	beq.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800687a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800687e:	d802      	bhi.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8006884:	e02f      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8006886:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800688a:	d012      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800688c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006890:	d019      	beq.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006892:	e028      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006894:	f7ff f8ae 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8006898:	61f8      	str	r0, [r7, #28]
          break;
 800689a:	e024      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800689c:	4b32      	ldr	r3, [pc, #200]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800689e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d118      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 80068aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068ae:	61fb      	str	r3, [r7, #28]
          break;
 80068b0:	e014      	b.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068b2:	4b2d      	ldr	r3, [pc, #180]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068be:	d10f      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 80068c0:	4b2a      	ldr	r3, [pc, #168]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80068c2:	61fb      	str	r3, [r7, #28]
          break;
 80068c4:	e00c      	b.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068c6:	4b28      	ldr	r3, [pc, #160]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d107      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 80068d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d8:	61fb      	str	r3, [r7, #28]
          break;
 80068da:	e003      	b.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 80068dc:	bf00      	nop
 80068de:	e06a      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80068e0:	bf00      	nop
 80068e2:	e068      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80068e4:	bf00      	nop
        break;
 80068e6:	e066      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80068e8:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068f2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068fa:	d010      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80068fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006900:	d802      	bhi.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8006906:	e034      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8006908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800690c:	d012      	beq.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800690e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006912:	d019      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8006914:	e02d      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006916:	f7ff f86d 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 800691a:	61f8      	str	r0, [r7, #28]
          break;
 800691c:	e029      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b02      	cmp	r3, #2
 800692a:	d118      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 800692c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006930:	61fb      	str	r3, [r7, #28]
          break;
 8006932:	e014      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006940:	d10f      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006944:	61fb      	str	r3, [r7, #28]
          break;
 8006946:	e00c      	b.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d10c      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8006956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695a:	61fb      	str	r3, [r7, #28]
          break;
 800695c:	e008      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 800695e:	bf00      	nop
 8006960:	e029      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006962:	bf00      	nop
 8006964:	e027      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006966:	bf00      	nop
 8006968:	40021000 	.word	0x40021000
 800696c:	00f42400 	.word	0x00f42400
          break;
 8006970:	bf00      	nop
        break;
 8006972:	e020      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006974:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800697e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d004      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 800698c:	e00d      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800698e:	f7ff f831 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8006992:	61f8      	str	r0, [r7, #28]
          break;
 8006994:	e009      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800699e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a2:	d101      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 80069a6:	61fb      	str	r3, [r7, #28]
          break;
 80069a8:	bf00      	nop
        break;
 80069aa:	e004      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80069ac:	bf00      	nop
 80069ae:	e002      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80069b0:	bf00      	nop
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80069b4:	bf00      	nop
    }
  }

  return(frequency);
 80069b6:	69fb      	ldr	r3, [r7, #28]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40021000 	.word	0x40021000
 80069c4:	00f42400 	.word	0x00f42400

080069c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80069d2:	f043 0304 	orr.w	r3, r3, #4
 80069d6:	6013      	str	r3, [r2, #0]
}
 80069d8:	bf00      	nop
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000

080069e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069f6:	4b73      	ldr	r3, [pc, #460]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d018      	beq.n	8006a34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a02:	4b70      	ldr	r3, [pc, #448]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0203 	and.w	r2, r3, #3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d10d      	bne.n	8006a2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
       ||
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a1a:	4b6a      	ldr	r3, [pc, #424]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	091b      	lsrs	r3, r3, #4
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
       ||
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d044      	beq.n	8006ab8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	73fb      	strb	r3, [r7, #15]
 8006a32:	e041      	b.n	8006ab8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d00c      	beq.n	8006a56 <RCCEx_PLLSAI1_Config+0x6e>
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d013      	beq.n	8006a68 <RCCEx_PLLSAI1_Config+0x80>
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d120      	bne.n	8006a86 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a44:	4b5f      	ldr	r3, [pc, #380]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d11d      	bne.n	8006a8c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a54:	e01a      	b.n	8006a8c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a56:	4b5b      	ldr	r3, [pc, #364]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d116      	bne.n	8006a90 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a66:	e013      	b.n	8006a90 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a68:	4b56      	ldr	r3, [pc, #344]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10f      	bne.n	8006a94 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a74:	4b53      	ldr	r3, [pc, #332]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a84:	e006      	b.n	8006a94 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8a:	e004      	b.n	8006a96 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a8c:	bf00      	nop
 8006a8e:	e002      	b.n	8006a96 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a94:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10d      	bne.n	8006ab8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a9c:	4b49      	ldr	r3, [pc, #292]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6819      	ldr	r1, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	4944      	ldr	r1, [pc, #272]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d17d      	bne.n	8006bba <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006abe:	4b41      	ldr	r3, [pc, #260]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ac4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aca:	f7fa fe29 	bl	8001720 <HAL_GetTick>
 8006ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ad0:	e009      	b.n	8006ae6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ad2:	f7fa fe25 	bl	8001720 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d902      	bls.n	8006ae6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	73fb      	strb	r3, [r7, #15]
        break;
 8006ae4:	e005      	b.n	8006af2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ae6:	4b37      	ldr	r3, [pc, #220]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1ef      	bne.n	8006ad2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d160      	bne.n	8006bba <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d111      	bne.n	8006b22 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006afe:	4b31      	ldr	r3, [pc, #196]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6892      	ldr	r2, [r2, #8]
 8006b0e:	0211      	lsls	r1, r2, #8
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	68d2      	ldr	r2, [r2, #12]
 8006b14:	0912      	lsrs	r2, r2, #4
 8006b16:	0452      	lsls	r2, r2, #17
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	492a      	ldr	r1, [pc, #168]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	610b      	str	r3, [r1, #16]
 8006b20:	e027      	b.n	8006b72 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d112      	bne.n	8006b4e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b28:	4b26      	ldr	r3, [pc, #152]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6892      	ldr	r2, [r2, #8]
 8006b38:	0211      	lsls	r1, r2, #8
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6912      	ldr	r2, [r2, #16]
 8006b3e:	0852      	lsrs	r2, r2, #1
 8006b40:	3a01      	subs	r2, #1
 8006b42:	0552      	lsls	r2, r2, #21
 8006b44:	430a      	orrs	r2, r1
 8006b46:	491f      	ldr	r1, [pc, #124]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	610b      	str	r3, [r1, #16]
 8006b4c:	e011      	b.n	8006b72 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b4e:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6892      	ldr	r2, [r2, #8]
 8006b5e:	0211      	lsls	r1, r2, #8
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6952      	ldr	r2, [r2, #20]
 8006b64:	0852      	lsrs	r2, r2, #1
 8006b66:	3a01      	subs	r2, #1
 8006b68:	0652      	lsls	r2, r2, #25
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	4915      	ldr	r1, [pc, #84]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b72:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a13      	ldr	r2, [pc, #76]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7e:	f7fa fdcf 	bl	8001720 <HAL_GetTick>
 8006b82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b84:	e009      	b.n	8006b9a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b86:	f7fa fdcb 	bl	8001720 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d902      	bls.n	8006b9a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	73fb      	strb	r3, [r7, #15]
          break;
 8006b98:	e005      	b.n	8006ba6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0ef      	beq.n	8006b86 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	4903      	ldr	r1, [pc, #12]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40021000 	.word	0x40021000

08006bc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bd6:	4b68      	ldr	r3, [pc, #416]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d018      	beq.n	8006c14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006be2:	4b65      	ldr	r3, [pc, #404]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f003 0203 	and.w	r2, r3, #3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d10d      	bne.n	8006c0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d009      	beq.n	8006c0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006bfa:	4b5f      	ldr	r3, [pc, #380]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
       ||
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d044      	beq.n	8006c98 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	73fb      	strb	r3, [r7, #15]
 8006c12:	e041      	b.n	8006c98 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d00c      	beq.n	8006c36 <RCCEx_PLLSAI2_Config+0x6e>
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d013      	beq.n	8006c48 <RCCEx_PLLSAI2_Config+0x80>
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d120      	bne.n	8006c66 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c24:	4b54      	ldr	r3, [pc, #336]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11d      	bne.n	8006c6c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c34:	e01a      	b.n	8006c6c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c36:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d116      	bne.n	8006c70 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c46:	e013      	b.n	8006c70 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c48:	4b4b      	ldr	r3, [pc, #300]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10f      	bne.n	8006c74 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c54:	4b48      	ldr	r3, [pc, #288]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c64:	e006      	b.n	8006c74 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6a:	e004      	b.n	8006c76 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006c6c:	bf00      	nop
 8006c6e:	e002      	b.n	8006c76 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006c70:	bf00      	nop
 8006c72:	e000      	b.n	8006c76 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006c74:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10d      	bne.n	8006c98 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c7c:	4b3e      	ldr	r3, [pc, #248]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6819      	ldr	r1, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	430b      	orrs	r3, r1
 8006c92:	4939      	ldr	r1, [pc, #228]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d167      	bne.n	8006d6e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006c9e:	4b36      	ldr	r3, [pc, #216]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a35      	ldr	r2, [pc, #212]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006caa:	f7fa fd39 	bl	8001720 <HAL_GetTick>
 8006cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cb0:	e009      	b.n	8006cc6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cb2:	f7fa fd35 	bl	8001720 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d902      	bls.n	8006cc6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	73fb      	strb	r3, [r7, #15]
        break;
 8006cc4:	e005      	b.n	8006cd2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cc6:	4b2c      	ldr	r3, [pc, #176]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1ef      	bne.n	8006cb2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d14a      	bne.n	8006d6e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d111      	bne.n	8006d02 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cde:	4b26      	ldr	r3, [pc, #152]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6892      	ldr	r2, [r2, #8]
 8006cee:	0211      	lsls	r1, r2, #8
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	68d2      	ldr	r2, [r2, #12]
 8006cf4:	0912      	lsrs	r2, r2, #4
 8006cf6:	0452      	lsls	r2, r2, #17
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	491f      	ldr	r1, [pc, #124]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	614b      	str	r3, [r1, #20]
 8006d00:	e011      	b.n	8006d26 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d02:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6892      	ldr	r2, [r2, #8]
 8006d12:	0211      	lsls	r1, r2, #8
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6912      	ldr	r2, [r2, #16]
 8006d18:	0852      	lsrs	r2, r2, #1
 8006d1a:	3a01      	subs	r2, #1
 8006d1c:	0652      	lsls	r2, r2, #25
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	4915      	ldr	r1, [pc, #84]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d26:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d32:	f7fa fcf5 	bl	8001720 <HAL_GetTick>
 8006d36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d38:	e009      	b.n	8006d4e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d3a:	f7fa fcf1 	bl	8001720 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d902      	bls.n	8006d4e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	73fb      	strb	r3, [r7, #15]
          break;
 8006d4c:	e005      	b.n	8006d5a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0ef      	beq.n	8006d3a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d60:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d62:	695a      	ldr	r2, [r3, #20]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	4903      	ldr	r1, [pc, #12]	; (8006d78 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40021000 	.word	0x40021000

08006d7c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	; 0x24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d98:	d10c      	bne.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006d9a:	4b62      	ldr	r3, [pc, #392]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006da4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006dac:	d112      	bne.n	8006dd4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006dae:	4b5e      	ldr	r3, [pc, #376]	; (8006f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	e00f      	b.n	8006dd4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dba:	d10b      	bne.n	8006dd4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006dbc:	4b59      	ldr	r3, [pc, #356]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006dc6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dce:	d101      	bne.n	8006dd4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006dd0:	4b55      	ldr	r3, [pc, #340]	; (8006f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8006dd2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f040 809c 	bne.w	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006de6:	d003      	beq.n	8006df0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dee:	d12d      	bne.n	8006e4c <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006df0:	4b4c      	ldr	r3, [pc, #304]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 808b 	beq.w	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006dfe:	4b49      	ldr	r3, [pc, #292]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	091b      	lsrs	r3, r3, #4
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	3301      	adds	r3, #1
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006e12:	4b44      	ldr	r3, [pc, #272]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e1c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006e24:	4b3f      	ldr	r3, [pc, #252]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8006e30:	2311      	movs	r3, #17
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e001      	b.n	8006e3a <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 8006e36:	2307      	movs	r3, #7
 8006e38:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	fb02 f203 	mul.w	r2, r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006e4a:	e063      	b.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d12c      	bne.n	8006eac <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006e52:	4b34      	ldr	r3, [pc, #208]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d05a      	beq.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e5e:	4b31      	ldr	r3, [pc, #196]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	091b      	lsrs	r3, r3, #4
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	3301      	adds	r3, #1
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e72:	4b2c      	ldr	r3, [pc, #176]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	0a1b      	lsrs	r3, r3, #8
 8006e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006e84:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 8006e90:	2311      	movs	r3, #17
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e001      	b.n	8006e9a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 8006e96:	2307      	movs	r3, #7
 8006e98:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	fb02 f203 	mul.w	r2, r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	e033      	b.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eb2:	d003      	beq.n	8006ebc <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eba:	d12b      	bne.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d025      	beq.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ec8:	4b16      	ldr	r3, [pc, #88]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f003 0307 	and.w	r3, r3, #7
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006edc:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	0a1b      	lsrs	r3, r3, #8
 8006ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006eee:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8006efa:	2311      	movs	r3, #17
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e001      	b.n	8006f04 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8006f00:	2307      	movs	r3, #7
 8006f02:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	fb02 f203 	mul.w	r2, r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f12:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006f14:	69fb      	ldr	r3, [r7, #28]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3724      	adds	r7, #36	; 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40021000 	.word	0x40021000
 8006f28:	001fff68 	.word	0x001fff68

08006f2c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e14a      	b.n	80071d4 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fa fa22 	bl	800139c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f94d 	bl	80071f8 <SAI_Disable>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e135      	b.n	80071d4 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d007      	beq.n	8006f88 <HAL_SAI_Init+0x5c>
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d302      	bcc.n	8006f82 <HAL_SAI_Init+0x56>
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d006      	beq.n	8006f8e <HAL_SAI_Init+0x62>
 8006f80:	e008      	b.n	8006f94 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	61fb      	str	r3, [r7, #28]
      break;
 8006f86:	e008      	b.n	8006f9a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006f88:	2310      	movs	r3, #16
 8006f8a:	61fb      	str	r3, [r7, #28]
      break;
 8006f8c:	e005      	b.n	8006f9a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006f8e:	2320      	movs	r3, #32
 8006f90:	61fb      	str	r3, [r7, #28]
      break;
 8006f92:	e002      	b.n	8006f9a <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61fb      	str	r3, [r7, #28]
      break;
 8006f98:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d81d      	bhi.n	8006fde <HAL_SAI_Init+0xb2>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <HAL_SAI_Init+0x7c>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fbf 	.word	0x08006fbf
 8006fb0:	08006fc7 	.word	0x08006fc7
 8006fb4:	08006fcf 	.word	0x08006fcf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
      break;
 8006fbc:	e012      	b.n	8006fe4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc2:	617b      	str	r3, [r7, #20]
      break;
 8006fc4:	e00e      	b.n	8006fe4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fca:	617b      	str	r3, [r7, #20]
      break;
 8006fcc:	e00a      	b.n	8006fe4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fd2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
      break;
 8006fdc:	e002      	b.n	8006fe4 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
      break;
 8006fe2:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a7c      	ldr	r2, [pc, #496]	; (80071dc <HAL_SAI_Init+0x2b0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_SAI_Init+0xcc>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7b      	ldr	r2, [pc, #492]	; (80071e0 <HAL_SAI_Init+0x2b4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d103      	bne.n	8007000 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006ff8:	4a7a      	ldr	r2, [pc, #488]	; (80071e4 <HAL_SAI_Init+0x2b8>)
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e002      	b.n	8007006 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007000:	4a79      	ldr	r2, [pc, #484]	; (80071e8 <HAL_SAI_Init+0x2bc>)
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d038      	beq.n	8007080 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a72      	ldr	r2, [pc, #456]	; (80071dc <HAL_SAI_Init+0x2b0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_SAI_Init+0xf6>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a70      	ldr	r2, [pc, #448]	; (80071e0 <HAL_SAI_Init+0x2b4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d105      	bne.n	800702e <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007022:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007026:	f7ff f857 	bl	80060d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800702a:	6138      	str	r0, [r7, #16]
 800702c:	e004      	b.n	8007038 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800702e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007032:	f7ff f851 	bl	80060d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007036:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	025b      	lsls	r3, r3, #9
 800704a:	fbb2 f3f3 	udiv	r3, r2, r3
 800704e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a66      	ldr	r2, [pc, #408]	; (80071ec <HAL_SAI_Init+0x2c0>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	08da      	lsrs	r2, r3, #3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	4b62      	ldr	r3, [pc, #392]	; (80071ec <HAL_SAI_Init+0x2c0>)
 8007062:	fba3 2301 	umull	r2, r3, r3, r1
 8007066:	08da      	lsrs	r2, r3, #3
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	1aca      	subs	r2, r1, r3
 8007072:	2a08      	cmp	r2, #8
 8007074:	d904      	bls.n	8007080 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_SAI_Init+0x164>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b02      	cmp	r3, #2
 800708e:	d109      	bne.n	80070a4 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_SAI_Init+0x170>
 8007098:	2300      	movs	r3, #0
 800709a:	e001      	b.n	80070a0 <HAL_SAI_Init+0x174>
 800709c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	e008      	b.n	80070b6 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d102      	bne.n	80070b2 <HAL_SAI_Init+0x186>
 80070ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b0:	e000      	b.n	80070b4 <HAL_SAI_Init+0x188>
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6819      	ldr	r1, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4b4b      	ldr	r3, [pc, #300]	; (80071f0 <HAL_SAI_Init+0x2c4>)
 80070c2:	400b      	ands	r3, r1
 80070c4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6819      	ldr	r1, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80070da:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	431a      	orrs	r2, r3
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80070ee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80070fa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	051b      	lsls	r3, r3, #20
 8007102:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800711a:	f023 030f 	bic.w	r3, r3, #15
 800711e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6859      	ldr	r1, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6899      	ldr	r1, [r3, #8]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b2a      	ldr	r3, [pc, #168]	; (80071f4 <HAL_SAI_Init+0x2c8>)
 800714a:	400b      	ands	r3, r1
 800714c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6899      	ldr	r1, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800715e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8007164:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800716a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007170:	3b01      	subs	r3, #1
 8007172:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007174:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68d9      	ldr	r1, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	f24f 0320 	movw	r3, #61472	; 0xf020
 800718c:	400b      	ands	r3, r1
 800718e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68d9      	ldr	r1, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80071a6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	3b01      	subs	r3, #1
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40015404 	.word	0x40015404
 80071e0:	40015424 	.word	0x40015424
 80071e4:	40015400 	.word	0x40015400
 80071e8:	40015800 	.word	0x40015800
 80071ec:	cccccccd 	.word	0xcccccccd
 80071f0:	ff05c010 	.word	0xff05c010
 80071f4:	fff88000 	.word	0xfff88000

080071f8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80071f8:	b490      	push	{r4, r7}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007200:	4b15      	ldr	r3, [pc, #84]	; (8007258 <SAI_Disable+0x60>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a15      	ldr	r2, [pc, #84]	; (800725c <SAI_Disable+0x64>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	0b1b      	lsrs	r3, r3, #12
 800720c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007220:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007222:	2c00      	cmp	r4, #0
 8007224:	d10a      	bne.n	800723c <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	73fb      	strb	r3, [r7, #15]
      break;
 800723a:	e007      	b.n	800724c <SAI_Disable+0x54>
    }
    count--;
 800723c:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1ea      	bne.n	8007222 <SAI_Disable+0x2a>

  return status;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bc90      	pop	{r4, r7}
 8007256:	4770      	bx	lr
 8007258:	20000000 	.word	0x20000000
 800725c:	95cbec1b 	.word	0x95cbec1b

08007260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e07c      	b.n	800736c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7f9 ffd7 	bl	8001240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072b2:	d902      	bls.n	80072ba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	e002      	b.n	80072c0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80072c8:	d007      	beq.n	80072da <HAL_SPI_Init+0x7a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072d2:	d002      	beq.n	80072da <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10b      	bne.n	80072fa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072ea:	d903      	bls.n	80072f4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30
 80072f2:	e002      	b.n	80072fa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007318:	431a      	orrs	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	ea42 0103 	orr.w	r1, r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	f003 0204 	and.w	r2, r3, #4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	ea42 0103 	orr.w	r1, r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e01d      	b.n	80073c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7f9 ff94 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f000 f99c 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d122      	bne.n	8007426 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d11b      	bne.n	8007426 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f06f 0202 	mvn.w	r2, #2
 80073f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f951 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 8007412:	e005      	b.n	8007420 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f943 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f954 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b04      	cmp	r3, #4
 8007432:	d122      	bne.n	800747a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b04      	cmp	r3, #4
 8007440:	d11b      	bne.n	800747a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f06f 0204 	mvn.w	r2, #4
 800744a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f927 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 8007466:	e005      	b.n	8007474 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f919 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f92a 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b08      	cmp	r3, #8
 8007486:	d122      	bne.n	80074ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b08      	cmp	r3, #8
 8007494:	d11b      	bne.n	80074ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f06f 0208 	mvn.w	r2, #8
 800749e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2204      	movs	r2, #4
 80074a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f8fd 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 80074ba:	e005      	b.n	80074c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8ef 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f900 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f003 0310 	and.w	r3, r3, #16
 80074d8:	2b10      	cmp	r3, #16
 80074da:	d122      	bne.n	8007522 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d11b      	bne.n	8007522 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f06f 0210 	mvn.w	r2, #16
 80074f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2208      	movs	r2, #8
 80074f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f8d3 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 800750e:	e005      	b.n	800751c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8c5 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f8d6 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b01      	cmp	r3, #1
 800752e:	d10e      	bne.n	800754e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b01      	cmp	r3, #1
 800753c:	d107      	bne.n	800754e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f06f 0201 	mvn.w	r2, #1
 8007546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f89f 	bl	800768c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007558:	2b80      	cmp	r3, #128	; 0x80
 800755a:	d10e      	bne.n	800757a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007566:	2b80      	cmp	r3, #128	; 0x80
 8007568:	d107      	bne.n	800757a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fac3 	bl	8007b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007588:	d10e      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007594:	2b80      	cmp	r3, #128	; 0x80
 8007596:	d107      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fab6 	bl	8007b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d10e      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	d107      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f884 	bl	80076dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d10e      	bne.n	8007600 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d107      	bne.n	8007600 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0220 	mvn.w	r2, #32
 80075f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa76 	bl	8007aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_TIM_SlaveConfigSynchro+0x18>
 800761c:	2302      	movs	r3, #2
 800761e:	e031      	b.n	8007684 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f8f6 	bl	8007824 <TIM_SlaveTimer_SetConfig>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e018      	b.n	8007684 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007660:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007670:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a40      	ldr	r2, [pc, #256]	; (8007804 <TIM_Base_SetConfig+0x114>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770e:	d00f      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a3d      	ldr	r2, [pc, #244]	; (8007808 <TIM_Base_SetConfig+0x118>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a3c      	ldr	r2, [pc, #240]	; (800780c <TIM_Base_SetConfig+0x11c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d007      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a3b      	ldr	r2, [pc, #236]	; (8007810 <TIM_Base_SetConfig+0x120>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a3a      	ldr	r2, [pc, #232]	; (8007814 <TIM_Base_SetConfig+0x124>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d108      	bne.n	8007742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2f      	ldr	r2, [pc, #188]	; (8007804 <TIM_Base_SetConfig+0x114>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01f      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007750:	d01b      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2c      	ldr	r2, [pc, #176]	; (8007808 <TIM_Base_SetConfig+0x118>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d017      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2b      	ldr	r2, [pc, #172]	; (800780c <TIM_Base_SetConfig+0x11c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d013      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <TIM_Base_SetConfig+0x120>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00f      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a29      	ldr	r2, [pc, #164]	; (8007814 <TIM_Base_SetConfig+0x124>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00b      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a28      	ldr	r2, [pc, #160]	; (8007818 <TIM_Base_SetConfig+0x128>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d007      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a27      	ldr	r2, [pc, #156]	; (800781c <TIM_Base_SetConfig+0x12c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a26      	ldr	r2, [pc, #152]	; (8007820 <TIM_Base_SetConfig+0x130>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d108      	bne.n	800779c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a10      	ldr	r2, [pc, #64]	; (8007804 <TIM_Base_SetConfig+0x114>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00f      	beq.n	80077e8 <TIM_Base_SetConfig+0xf8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <TIM_Base_SetConfig+0x124>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00b      	beq.n	80077e8 <TIM_Base_SetConfig+0xf8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a11      	ldr	r2, [pc, #68]	; (8007818 <TIM_Base_SetConfig+0x128>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d007      	beq.n	80077e8 <TIM_Base_SetConfig+0xf8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a10      	ldr	r2, [pc, #64]	; (800781c <TIM_Base_SetConfig+0x12c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0xf8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a0f      	ldr	r2, [pc, #60]	; (8007820 <TIM_Base_SetConfig+0x130>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d103      	bne.n	80077f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	615a      	str	r2, [r3, #20]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40013400 	.word	0x40013400
 8007818:	40014000 	.word	0x40014000
 800781c:	40014400 	.word	0x40014400
 8007820:	40014800 	.word	0x40014800

08007824 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784e:	f023 0307 	bic.w	r3, r3, #7
 8007852:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b30      	cmp	r3, #48	; 0x30
 800786c:	d05c      	beq.n	8007928 <TIM_SlaveTimer_SetConfig+0x104>
 800786e:	2b30      	cmp	r3, #48	; 0x30
 8007870:	d806      	bhi.n	8007880 <TIM_SlaveTimer_SetConfig+0x5c>
 8007872:	2b10      	cmp	r3, #16
 8007874:	d058      	beq.n	8007928 <TIM_SlaveTimer_SetConfig+0x104>
 8007876:	2b20      	cmp	r3, #32
 8007878:	d056      	beq.n	8007928 <TIM_SlaveTimer_SetConfig+0x104>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d054      	beq.n	8007928 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800787e:	e054      	b.n	800792a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8007880:	2b50      	cmp	r3, #80	; 0x50
 8007882:	d03d      	beq.n	8007900 <TIM_SlaveTimer_SetConfig+0xdc>
 8007884:	2b50      	cmp	r3, #80	; 0x50
 8007886:	d802      	bhi.n	800788e <TIM_SlaveTimer_SetConfig+0x6a>
 8007888:	2b40      	cmp	r3, #64	; 0x40
 800788a:	d010      	beq.n	80078ae <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 800788c:	e04d      	b.n	800792a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800788e:	2b60      	cmp	r3, #96	; 0x60
 8007890:	d040      	beq.n	8007914 <TIM_SlaveTimer_SetConfig+0xf0>
 8007892:	2b70      	cmp	r3, #112	; 0x70
 8007894:	d000      	beq.n	8007898 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8007896:	e048      	b.n	800792a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68d9      	ldr	r1, [r3, #12]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f000 f8a3 	bl	80079f2 <TIM_ETR_SetConfig>
      break;
 80078ac:	e03d      	b.n	800792a <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d101      	bne.n	80078ba <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e038      	b.n	800792c <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6a1a      	ldr	r2, [r3, #32]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078e0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	621a      	str	r2, [r3, #32]
      break;
 80078fe:	e014      	b.n	800792a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	6899      	ldr	r1, [r3, #8]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	461a      	mov	r2, r3
 800790e:	f000 f811 	bl	8007934 <TIM_TI1_ConfigInputStage>
      break;
 8007912:	e00a      	b.n	800792a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	6899      	ldr	r1, [r3, #8]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	461a      	mov	r2, r3
 8007922:	f000 f836 	bl	8007992 <TIM_TI2_ConfigInputStage>
      break;
 8007926:	e000      	b.n	800792a <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8007928:	bf00      	nop
  }
  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f023 0201 	bic.w	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800795e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	011b      	lsls	r3, r3, #4
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4313      	orrs	r3, r2
 8007968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f023 030a 	bic.w	r3, r3, #10
 8007970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007992:	b480      	push	{r7}
 8007994:	b087      	sub	sp, #28
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f023 0210 	bic.w	r2, r3, #16
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	031b      	lsls	r3, r3, #12
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b087      	sub	sp, #28
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	607a      	str	r2, [r7, #4]
 80079fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	021a      	lsls	r2, r3, #8
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	431a      	orrs	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	609a      	str	r2, [r3, #8]
}
 8007a26:	bf00      	nop
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e045      	b.n	8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a1c      	ldr	r2, [pc, #112]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d004      	beq.n	8007a80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d108      	bne.n	8007a92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aaa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	40012c00 	.word	0x40012c00
 8007ae8:	40013400 	.word	0x40013400

08007aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e040      	b.n	8007bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7f9 fbe2 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2224      	movs	r2, #36	; 0x24
 8007b54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f82c 	bl	8007bc4 <UART_SetConfig>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e022      	b.n	8007bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fb68 	bl	8008254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fbef 	bl	8008398 <UART_CheckIdleState>
 8007bba:	4603      	mov	r3, r0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bc4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007bc8:	b088      	sub	sp, #32
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	431a      	orrs	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	4bac      	ldr	r3, [pc, #688]	; (8007eac <UART_SetConfig+0x2e8>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6812      	ldr	r2, [r2, #0]
 8007c00:	69f9      	ldr	r1, [r7, #28]
 8007c02:	430b      	orrs	r3, r1
 8007c04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4aa2      	ldr	r2, [pc, #648]	; (8007eb0 <UART_SetConfig+0x2ec>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a99      	ldr	r2, [pc, #612]	; (8007eb4 <UART_SetConfig+0x2f0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d121      	bne.n	8007c98 <UART_SetConfig+0xd4>
 8007c54:	4b98      	ldr	r3, [pc, #608]	; (8007eb8 <UART_SetConfig+0x2f4>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d816      	bhi.n	8007c90 <UART_SetConfig+0xcc>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <UART_SetConfig+0xa4>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c85 	.word	0x08007c85
 8007c70:	08007c7f 	.word	0x08007c7f
 8007c74:	08007c8b 	.word	0x08007c8b
 8007c78:	2301      	movs	r3, #1
 8007c7a:	76fb      	strb	r3, [r7, #27]
 8007c7c:	e0e8      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	76fb      	strb	r3, [r7, #27]
 8007c82:	e0e5      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007c84:	2304      	movs	r3, #4
 8007c86:	76fb      	strb	r3, [r7, #27]
 8007c88:	e0e2      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	76fb      	strb	r3, [r7, #27]
 8007c8e:	e0df      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007c90:	2310      	movs	r3, #16
 8007c92:	76fb      	strb	r3, [r7, #27]
 8007c94:	bf00      	nop
 8007c96:	e0db      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a87      	ldr	r2, [pc, #540]	; (8007ebc <UART_SetConfig+0x2f8>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d134      	bne.n	8007d0c <UART_SetConfig+0x148>
 8007ca2:	4b85      	ldr	r3, [pc, #532]	; (8007eb8 <UART_SetConfig+0x2f4>)
 8007ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca8:	f003 030c 	and.w	r3, r3, #12
 8007cac:	2b0c      	cmp	r3, #12
 8007cae:	d829      	bhi.n	8007d04 <UART_SetConfig+0x140>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <UART_SetConfig+0xf4>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007ced 	.word	0x08007ced
 8007cbc:	08007d05 	.word	0x08007d05
 8007cc0:	08007d05 	.word	0x08007d05
 8007cc4:	08007d05 	.word	0x08007d05
 8007cc8:	08007cf9 	.word	0x08007cf9
 8007ccc:	08007d05 	.word	0x08007d05
 8007cd0:	08007d05 	.word	0x08007d05
 8007cd4:	08007d05 	.word	0x08007d05
 8007cd8:	08007cf3 	.word	0x08007cf3
 8007cdc:	08007d05 	.word	0x08007d05
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d05 	.word	0x08007d05
 8007ce8:	08007cff 	.word	0x08007cff
 8007cec:	2300      	movs	r3, #0
 8007cee:	76fb      	strb	r3, [r7, #27]
 8007cf0:	e0ae      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	76fb      	strb	r3, [r7, #27]
 8007cf6:	e0ab      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007cf8:	2304      	movs	r3, #4
 8007cfa:	76fb      	strb	r3, [r7, #27]
 8007cfc:	e0a8      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007cfe:	2308      	movs	r3, #8
 8007d00:	76fb      	strb	r3, [r7, #27]
 8007d02:	e0a5      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d04:	2310      	movs	r3, #16
 8007d06:	76fb      	strb	r3, [r7, #27]
 8007d08:	bf00      	nop
 8007d0a:	e0a1      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a6b      	ldr	r2, [pc, #428]	; (8007ec0 <UART_SetConfig+0x2fc>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d120      	bne.n	8007d58 <UART_SetConfig+0x194>
 8007d16:	4b68      	ldr	r3, [pc, #416]	; (8007eb8 <UART_SetConfig+0x2f4>)
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d00f      	beq.n	8007d44 <UART_SetConfig+0x180>
 8007d24:	2b10      	cmp	r3, #16
 8007d26:	d802      	bhi.n	8007d2e <UART_SetConfig+0x16a>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <UART_SetConfig+0x174>
 8007d2c:	e010      	b.n	8007d50 <UART_SetConfig+0x18c>
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	d005      	beq.n	8007d3e <UART_SetConfig+0x17a>
 8007d32:	2b30      	cmp	r3, #48	; 0x30
 8007d34:	d009      	beq.n	8007d4a <UART_SetConfig+0x186>
 8007d36:	e00b      	b.n	8007d50 <UART_SetConfig+0x18c>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	76fb      	strb	r3, [r7, #27]
 8007d3c:	e088      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	76fb      	strb	r3, [r7, #27]
 8007d42:	e085      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d44:	2304      	movs	r3, #4
 8007d46:	76fb      	strb	r3, [r7, #27]
 8007d48:	e082      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d4a:	2308      	movs	r3, #8
 8007d4c:	76fb      	strb	r3, [r7, #27]
 8007d4e:	e07f      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d50:	2310      	movs	r3, #16
 8007d52:	76fb      	strb	r3, [r7, #27]
 8007d54:	bf00      	nop
 8007d56:	e07b      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a59      	ldr	r2, [pc, #356]	; (8007ec4 <UART_SetConfig+0x300>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d120      	bne.n	8007da4 <UART_SetConfig+0x1e0>
 8007d62:	4b55      	ldr	r3, [pc, #340]	; (8007eb8 <UART_SetConfig+0x2f4>)
 8007d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d00f      	beq.n	8007d90 <UART_SetConfig+0x1cc>
 8007d70:	2b40      	cmp	r3, #64	; 0x40
 8007d72:	d802      	bhi.n	8007d7a <UART_SetConfig+0x1b6>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <UART_SetConfig+0x1c0>
 8007d78:	e010      	b.n	8007d9c <UART_SetConfig+0x1d8>
 8007d7a:	2b80      	cmp	r3, #128	; 0x80
 8007d7c:	d005      	beq.n	8007d8a <UART_SetConfig+0x1c6>
 8007d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d80:	d009      	beq.n	8007d96 <UART_SetConfig+0x1d2>
 8007d82:	e00b      	b.n	8007d9c <UART_SetConfig+0x1d8>
 8007d84:	2300      	movs	r3, #0
 8007d86:	76fb      	strb	r3, [r7, #27]
 8007d88:	e062      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	76fb      	strb	r3, [r7, #27]
 8007d8e:	e05f      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d90:	2304      	movs	r3, #4
 8007d92:	76fb      	strb	r3, [r7, #27]
 8007d94:	e05c      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d96:	2308      	movs	r3, #8
 8007d98:	76fb      	strb	r3, [r7, #27]
 8007d9a:	e059      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	76fb      	strb	r3, [r7, #27]
 8007da0:	bf00      	nop
 8007da2:	e055      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a47      	ldr	r2, [pc, #284]	; (8007ec8 <UART_SetConfig+0x304>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d124      	bne.n	8007df8 <UART_SetConfig+0x234>
 8007dae:	4b42      	ldr	r3, [pc, #264]	; (8007eb8 <UART_SetConfig+0x2f4>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbc:	d012      	beq.n	8007de4 <UART_SetConfig+0x220>
 8007dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc2:	d802      	bhi.n	8007dca <UART_SetConfig+0x206>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <UART_SetConfig+0x214>
 8007dc8:	e012      	b.n	8007df0 <UART_SetConfig+0x22c>
 8007dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dce:	d006      	beq.n	8007dde <UART_SetConfig+0x21a>
 8007dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd4:	d009      	beq.n	8007dea <UART_SetConfig+0x226>
 8007dd6:	e00b      	b.n	8007df0 <UART_SetConfig+0x22c>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	76fb      	strb	r3, [r7, #27]
 8007ddc:	e038      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007dde:	2302      	movs	r3, #2
 8007de0:	76fb      	strb	r3, [r7, #27]
 8007de2:	e035      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007de4:	2304      	movs	r3, #4
 8007de6:	76fb      	strb	r3, [r7, #27]
 8007de8:	e032      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007dea:	2308      	movs	r3, #8
 8007dec:	76fb      	strb	r3, [r7, #27]
 8007dee:	e02f      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007df0:	2310      	movs	r3, #16
 8007df2:	76fb      	strb	r3, [r7, #27]
 8007df4:	bf00      	nop
 8007df6:	e02b      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a2c      	ldr	r2, [pc, #176]	; (8007eb0 <UART_SetConfig+0x2ec>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d124      	bne.n	8007e4c <UART_SetConfig+0x288>
 8007e02:	4b2d      	ldr	r3, [pc, #180]	; (8007eb8 <UART_SetConfig+0x2f4>)
 8007e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e10:	d012      	beq.n	8007e38 <UART_SetConfig+0x274>
 8007e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e16:	d802      	bhi.n	8007e1e <UART_SetConfig+0x25a>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <UART_SetConfig+0x268>
 8007e1c:	e012      	b.n	8007e44 <UART_SetConfig+0x280>
 8007e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e22:	d006      	beq.n	8007e32 <UART_SetConfig+0x26e>
 8007e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e28:	d009      	beq.n	8007e3e <UART_SetConfig+0x27a>
 8007e2a:	e00b      	b.n	8007e44 <UART_SetConfig+0x280>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	76fb      	strb	r3, [r7, #27]
 8007e30:	e00e      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007e32:	2302      	movs	r3, #2
 8007e34:	76fb      	strb	r3, [r7, #27]
 8007e36:	e00b      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	76fb      	strb	r3, [r7, #27]
 8007e3c:	e008      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007e3e:	2308      	movs	r3, #8
 8007e40:	76fb      	strb	r3, [r7, #27]
 8007e42:	e005      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007e44:	2310      	movs	r3, #16
 8007e46:	76fb      	strb	r3, [r7, #27]
 8007e48:	bf00      	nop
 8007e4a:	e001      	b.n	8007e50 <UART_SetConfig+0x28c>
 8007e4c:	2310      	movs	r3, #16
 8007e4e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a16      	ldr	r2, [pc, #88]	; (8007eb0 <UART_SetConfig+0x2ec>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	f040 80fa 	bne.w	8008050 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e5c:	7efb      	ldrb	r3, [r7, #27]
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d836      	bhi.n	8007ed0 <UART_SetConfig+0x30c>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x2a4>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	08007ed1 	.word	0x08007ed1
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007ed1 	.word	0x08007ed1
 8007e78:	08007e9b 	.word	0x08007e9b
 8007e7c:	08007ed1 	.word	0x08007ed1
 8007e80:	08007ed1 	.word	0x08007ed1
 8007e84:	08007ed1 	.word	0x08007ed1
 8007e88:	08007ea3 	.word	0x08007ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007e8c:	f7fd fdb2 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8007e90:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007e92:	e020      	b.n	8007ed6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007e94:	4b0d      	ldr	r3, [pc, #52]	; (8007ecc <UART_SetConfig+0x308>)
 8007e96:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007e98:	e01d      	b.n	8007ed6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007e9a:	f7fd fd15 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8007e9e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ea0:	e019      	b.n	8007ed6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ea8:	e015      	b.n	8007ed6 <UART_SetConfig+0x312>
 8007eaa:	bf00      	nop
 8007eac:	efff69f3 	.word	0xefff69f3
 8007eb0:	40008000 	.word	0x40008000
 8007eb4:	40013800 	.word	0x40013800
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	40004400 	.word	0x40004400
 8007ec0:	40004800 	.word	0x40004800
 8007ec4:	40004c00 	.word	0x40004c00
 8007ec8:	40005000 	.word	0x40005000
 8007ecc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	74fb      	strb	r3, [r7, #19]
        break;
 8007ed4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 81ac 	beq.w	8008236 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	4413      	add	r3, r2
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d305      	bcc.n	8007efa <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d902      	bls.n	8007f00 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	74fb      	strb	r3, [r7, #19]
 8007efe:	e19a      	b.n	8008236 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8007f00:	7efb      	ldrb	r3, [r7, #27]
 8007f02:	2b08      	cmp	r3, #8
 8007f04:	f200 8091 	bhi.w	800802a <UART_SetConfig+0x466>
 8007f08:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <UART_SetConfig+0x34c>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f35 	.word	0x08007f35
 8007f14:	0800802b 	.word	0x0800802b
 8007f18:	08007f81 	.word	0x08007f81
 8007f1c:	0800802b 	.word	0x0800802b
 8007f20:	08007fb5 	.word	0x08007fb5
 8007f24:	0800802b 	.word	0x0800802b
 8007f28:	0800802b 	.word	0x0800802b
 8007f2c:	0800802b 	.word	0x0800802b
 8007f30:	08008001 	.word	0x08008001
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007f34:	f7fd fd5e 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	f04f 0400 	mov.w	r4, #0
 8007f48:	0214      	lsls	r4, r2, #8
 8007f4a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007f4e:	020b      	lsls	r3, r1, #8
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	6852      	ldr	r2, [r2, #4]
 8007f54:	0852      	lsrs	r2, r2, #1
 8007f56:	4611      	mov	r1, r2
 8007f58:	f04f 0200 	mov.w	r2, #0
 8007f5c:	eb13 0b01 	adds.w	fp, r3, r1
 8007f60:	eb44 0c02 	adc.w	ip, r4, r2
 8007f64:	4658      	mov	r0, fp
 8007f66:	4661      	mov	r1, ip
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f04f 0400 	mov.w	r4, #0
 8007f70:	461a      	mov	r2, r3
 8007f72:	4623      	mov	r3, r4
 8007f74:	f7f8 f928 	bl	80001c8 <__aeabi_uldivmod>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007f7e:	e057      	b.n	8008030 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	085b      	lsrs	r3, r3, #1
 8007f86:	f04f 0400 	mov.w	r4, #0
 8007f8a:	49b1      	ldr	r1, [pc, #708]	; (8008250 <UART_SetConfig+0x68c>)
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	eb13 0b01 	adds.w	fp, r3, r1
 8007f94:	eb44 0c02 	adc.w	ip, r4, r2
 8007f98:	4658      	mov	r0, fp
 8007f9a:	4661      	mov	r1, ip
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f04f 0400 	mov.w	r4, #0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4623      	mov	r3, r4
 8007fa8:	f7f8 f90e 	bl	80001c8 <__aeabi_uldivmod>
 8007fac:	4603      	mov	r3, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007fb2:	e03d      	b.n	8008030 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007fb4:	f7fd fc88 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	f04f 0400 	mov.w	r4, #0
 8007fc8:	0214      	lsls	r4, r2, #8
 8007fca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007fce:	020b      	lsls	r3, r1, #8
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6852      	ldr	r2, [r2, #4]
 8007fd4:	0852      	lsrs	r2, r2, #1
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	eb13 0b01 	adds.w	fp, r3, r1
 8007fe0:	eb44 0c02 	adc.w	ip, r4, r2
 8007fe4:	4658      	mov	r0, fp
 8007fe6:	4661      	mov	r1, ip
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f04f 0400 	mov.w	r4, #0
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	4623      	mov	r3, r4
 8007ff4:	f7f8 f8e8 	bl	80001c8 <__aeabi_uldivmod>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007ffe:	e017      	b.n	8008030 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	f04f 0400 	mov.w	r4, #0
 800800a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800800e:	f144 0100 	adc.w	r1, r4, #0
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f04f 0400 	mov.w	r4, #0
 800801a:	461a      	mov	r2, r3
 800801c:	4623      	mov	r3, r4
 800801e:	f7f8 f8d3 	bl	80001c8 <__aeabi_uldivmod>
 8008022:	4603      	mov	r3, r0
 8008024:	460c      	mov	r4, r1
 8008026:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008028:	e002      	b.n	8008030 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	74fb      	strb	r3, [r7, #19]
            break;
 800802e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008036:	d308      	bcc.n	800804a <UART_SetConfig+0x486>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800803e:	d204      	bcs.n	800804a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	60da      	str	r2, [r3, #12]
 8008048:	e0f5      	b.n	8008236 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	74fb      	strb	r3, [r7, #19]
 800804e:	e0f2      	b.n	8008236 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008058:	d17f      	bne.n	800815a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800805a:	7efb      	ldrb	r3, [r7, #27]
 800805c:	2b08      	cmp	r3, #8
 800805e:	d85c      	bhi.n	800811a <UART_SetConfig+0x556>
 8008060:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0x4a4>)
 8008062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008066:	bf00      	nop
 8008068:	0800808d 	.word	0x0800808d
 800806c:	080080ab 	.word	0x080080ab
 8008070:	080080c9 	.word	0x080080c9
 8008074:	0800811b 	.word	0x0800811b
 8008078:	080080e5 	.word	0x080080e5
 800807c:	0800811b 	.word	0x0800811b
 8008080:	0800811b 	.word	0x0800811b
 8008084:	0800811b 	.word	0x0800811b
 8008088:	08008103 	.word	0x08008103
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800808c:	f7fd fcb2 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8008090:	4603      	mov	r3, r0
 8008092:	005a      	lsls	r2, r3, #1
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	085b      	lsrs	r3, r3, #1
 800809a:	441a      	add	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80080a8:	e03a      	b.n	8008120 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80080aa:	f7fd fcb9 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 80080ae:	4603      	mov	r3, r0
 80080b0:	005a      	lsls	r2, r3, #1
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80080c6:	e02b      	b.n	8008120 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80080d2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6852      	ldr	r2, [r2, #4]
 80080da:	fbb3 f3f2 	udiv	r3, r3, r2
 80080de:	b29b      	uxth	r3, r3
 80080e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80080e2:	e01d      	b.n	8008120 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80080e4:	f7fd fbf0 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 80080e8:	4603      	mov	r3, r0
 80080ea:	005a      	lsls	r2, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	085b      	lsrs	r3, r3, #1
 80080f2:	441a      	add	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008100:	e00e      	b.n	8008120 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	fbb2 f3f3 	udiv	r3, r2, r3
 8008114:	b29b      	uxth	r3, r3
 8008116:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008118:	e002      	b.n	8008120 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	74fb      	strb	r3, [r7, #19]
        break;
 800811e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b0f      	cmp	r3, #15
 8008124:	d916      	bls.n	8008154 <UART_SetConfig+0x590>
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800812c:	d212      	bcs.n	8008154 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	b29b      	uxth	r3, r3
 8008132:	f023 030f 	bic.w	r3, r3, #15
 8008136:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	b29b      	uxth	r3, r3
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	b29a      	uxth	r2, r3
 8008144:	897b      	ldrh	r3, [r7, #10]
 8008146:	4313      	orrs	r3, r2
 8008148:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	897a      	ldrh	r2, [r7, #10]
 8008150:	60da      	str	r2, [r3, #12]
 8008152:	e070      	b.n	8008236 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	74fb      	strb	r3, [r7, #19]
 8008158:	e06d      	b.n	8008236 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800815a:	7efb      	ldrb	r3, [r7, #27]
 800815c:	2b08      	cmp	r3, #8
 800815e:	d859      	bhi.n	8008214 <UART_SetConfig+0x650>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <UART_SetConfig+0x5a4>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	0800818d 	.word	0x0800818d
 800816c:	080081a9 	.word	0x080081a9
 8008170:	080081c5 	.word	0x080081c5
 8008174:	08008215 	.word	0x08008215
 8008178:	080081e1 	.word	0x080081e1
 800817c:	08008215 	.word	0x08008215
 8008180:	08008215 	.word	0x08008215
 8008184:	08008215 	.word	0x08008215
 8008188:	080081fd 	.word	0x080081fd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800818c:	f7fd fc32 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8008190:	4602      	mov	r2, r0
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	085b      	lsrs	r3, r3, #1
 8008198:	441a      	add	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80081a6:	e038      	b.n	800821a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80081a8:	f7fd fc3a 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 80081ac:	4602      	mov	r2, r0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	085b      	lsrs	r3, r3, #1
 80081b4:	441a      	add	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80081be:	b29b      	uxth	r3, r3
 80081c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80081c2:	e02a      	b.n	800821a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	085b      	lsrs	r3, r3, #1
 80081ca:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80081ce:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6852      	ldr	r2, [r2, #4]
 80081d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80081da:	b29b      	uxth	r3, r3
 80081dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80081de:	e01c      	b.n	800821a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80081e0:	f7fd fb72 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 80081e4:	4602      	mov	r2, r0
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	441a      	add	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80081fa:	e00e      	b.n	800821a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	b29b      	uxth	r3, r3
 8008210:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008212:	e002      	b.n	800821a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	74fb      	strb	r3, [r7, #19]
        break;
 8008218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b0f      	cmp	r3, #15
 800821e:	d908      	bls.n	8008232 <UART_SetConfig+0x66e>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008226:	d204      	bcs.n	8008232 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	60da      	str	r2, [r3, #12]
 8008230:	e001      	b.n	8008236 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008242:	7cfb      	ldrb	r3, [r7, #19]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800824e:	bf00      	nop
 8008250:	f4240000 	.word	0xf4240000

08008254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01a      	beq.n	800836a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008352:	d10a      	bne.n	800836a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]
  }
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af02      	add	r7, sp, #8
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80083a6:	f7f9 f9bb 	bl	8001720 <HAL_GetTick>
 80083aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d10e      	bne.n	80083d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f82a 	bl	8008422 <UART_WaitOnFlagUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e020      	b.n	800841a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d10e      	bne.n	8008404 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f814 	bl	8008422 <UART_WaitOnFlagUntilTimeout>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e00a      	b.n	800841a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	603b      	str	r3, [r7, #0]
 800842e:	4613      	mov	r3, r2
 8008430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008432:	e02a      	b.n	800848a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d026      	beq.n	800848a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843c:	f7f9 f970 	bl	8001720 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	429a      	cmp	r2, r3
 800844a:	d302      	bcc.n	8008452 <UART_WaitOnFlagUntilTimeout+0x30>
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d11b      	bne.n	800848a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008460:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0201 	bic.w	r2, r2, #1
 8008470:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2220      	movs	r2, #32
 8008476:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2220      	movs	r2, #32
 800847c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e00f      	b.n	80084aa <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4013      	ands	r3, r2
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	429a      	cmp	r2, r3
 8008498:	bf0c      	ite	eq
 800849a:	2301      	moveq	r3, #1
 800849c:	2300      	movne	r3, #0
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d0c5      	beq.n	8008434 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084b2:	b084      	sub	sp, #16
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	f107 001c 	add.w	r0, r7, #28
 80084c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d122      	bne.n	8008510 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d105      	bne.n	8008504 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f937 	bl	8008778 <USB_CoreReset>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
 800850e:	e01a      	b.n	8008546 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f92b 	bl	8008778 <USB_CoreReset>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	639a      	str	r2, [r3, #56]	; 0x38
 8008538:	e005      	b.n	8008546 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008552:	b004      	add	sp, #16
 8008554:	4770      	bx	lr

08008556 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f043 0201 	orr.w	r2, r3, #1
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f023 0201 	bic.w	r2, r3, #1
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	460b      	mov	r3, r1
 80085a4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d106      	bne.n	80085c6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	60da      	str	r2, [r3, #12]
 80085c4:	e00b      	b.n	80085de <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60da      	str	r2, [r3, #12]
 80085d8:	e001      	b.n	80085de <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e003      	b.n	80085e6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80085de:	2032      	movs	r0, #50	; 0x32
 80085e0:	f7f9 f8aa 	bl	8001738 <HAL_Delay>

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	019b      	lsls	r3, r3, #6
 8008602:	f043 0220 	orr.w	r2, r3, #32
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4a09      	ldr	r2, [pc, #36]	; (8008638 <USB_FlushTxFifo+0x48>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d901      	bls.n	800861c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e006      	b.n	800862a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b20      	cmp	r3, #32
 8008626:	d0f0      	beq.n	800860a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	00030d40 	.word	0x00030d40

0800863c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2210      	movs	r2, #16
 800864c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3301      	adds	r3, #1
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4a09      	ldr	r2, [pc, #36]	; (800867c <USB_FlushRxFifo+0x40>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d901      	bls.n	8008660 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e006      	b.n	800866e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b10      	cmp	r3, #16
 800866a:	d0f0      	beq.n	800864e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	00030d40 	.word	0x00030d40

08008680 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8008680:	b480      	push	{r7}
 8008682:	b089      	sub	sp, #36	; 0x24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4611      	mov	r1, r2
 800868c:	461a      	mov	r2, r3
 800868e:	460b      	mov	r3, r1
 8008690:	71fb      	strb	r3, [r7, #7]
 8008692:	4613      	mov	r3, r2
 8008694:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800869e:	88bb      	ldrh	r3, [r7, #4]
 80086a0:	3303      	adds	r3, #3
 80086a2:	089b      	lsrs	r3, r3, #2
 80086a4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	e00f      	b.n	80086cc <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	031a      	lsls	r2, r3, #12
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b8:	461a      	mov	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6013      	str	r3, [r2, #0]
    pSrc++;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	3304      	adds	r3, #4
 80086c4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	3301      	adds	r3, #1
 80086ca:	61bb      	str	r3, [r7, #24]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3eb      	bcc.n	80086ac <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3724      	adds	r7, #36	; 0x24
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b089      	sub	sp, #36	; 0x24
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	4613      	mov	r3, r2
 80086ee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	3303      	adds	r3, #3
 80086fc:	089b      	lsrs	r3, r3, #2
 80086fe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008700:	2300      	movs	r3, #0
 8008702:	61bb      	str	r3, [r7, #24]
 8008704:	e00b      	b.n	800871e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	601a      	str	r2, [r3, #0]
    pDest++;
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	3304      	adds	r3, #4
 8008716:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	3301      	adds	r3, #1
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	429a      	cmp	r2, r3
 8008724:	d3ef      	bcc.n	8008706 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008726:	69fb      	ldr	r3, [r7, #28]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3724      	adds	r7, #36	; 0x24
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4013      	ands	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800874c:	68fb      	ldr	r3, [r7, #12]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f003 0301 	and.w	r3, r3, #1
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3301      	adds	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4a13      	ldr	r2, [pc, #76]	; (80087dc <USB_CoreReset+0x64>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d901      	bls.n	8008796 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e01b      	b.n	80087ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	daf2      	bge.n	8008784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f043 0201 	orr.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4a09      	ldr	r2, [pc, #36]	; (80087dc <USB_CoreReset+0x64>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d901      	bls.n	80087c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e006      	b.n	80087ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d0f0      	beq.n	80087ae <USB_CoreReset+0x36>

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	00030d40 	.word	0x00030d40

080087e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087e0:	b084      	sub	sp, #16
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	f107 001c 	add.w	r0, r7, #28
 80087ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087fc:	461a      	mov	r2, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008828:	f023 0304 	bic.w	r3, r3, #4
 800882c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800882e:	2110      	movs	r1, #16
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff fedd 	bl	80085f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff ff00 	bl	800863c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800883c:	2300      	movs	r3, #0
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	e015      	b.n	800886e <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884e:	461a      	mov	r2, r3
 8008850:	f04f 33ff 	mov.w	r3, #4294967295
 8008854:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4413      	add	r3, r2
 800885e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008862:	461a      	mov	r2, r3
 8008864:	2300      	movs	r3, #0
 8008866:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	429a      	cmp	r2, r3
 8008874:	d3e5      	bcc.n	8008842 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008876:	2101      	movs	r1, #1
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f893 	bl	80089a4 <USB_DriveVbus>

  HAL_Delay(200U);
 800887e:	20c8      	movs	r0, #200	; 0xc8
 8008880:	f7f8 ff5a 	bl	8001738 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f04f 32ff 	mov.w	r2, #4294967295
 8008890:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2280      	movs	r2, #128	; 0x80
 8008896:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a0d      	ldr	r2, [pc, #52]	; (80088d0 <USB_HostInit+0xf0>)
 800889c:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a0c      	ldr	r2, [pc, #48]	; (80088d4 <USB_HostInit+0xf4>)
 80088a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f043 0210 	orr.w	r2, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <USB_HostInit+0xf8>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088ca:	b004      	add	sp, #16
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	00600080 	.word	0x00600080
 80088d4:	004000e0 	.word	0x004000e0
 80088d8:	a3200008 	.word	0xa3200008

080088dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008914:	4313      	orrs	r3, r2
 8008916:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d107      	bne.n	800892e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008924:	461a      	mov	r2, r3
 8008926:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800892a:	6053      	str	r3, [r2, #4]
 800892c:	e009      	b.n	8008942 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d106      	bne.n	8008942 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800893a:	461a      	mov	r2, r3
 800893c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008940:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008970:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800897a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800897e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008980:	2064      	movs	r0, #100	; 0x64
 8008982:	f7f8 fed9 	bl	8001738 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800898e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008992:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008994:	200a      	movs	r0, #10
 8008996:	f7f8 fecf 	bl	8001738 <HAL_Delay>

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80089c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d109      	bne.n	80089e8 <USB_DriveVbus+0x44>
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d106      	bne.n	80089e8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80089e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089e6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f2:	d109      	bne.n	8008a08 <USB_DriveVbus+0x64>
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d106      	bne.n	8008a08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	0c5b      	lsrs	r3, r3, #17
 8008a34:	f003 0303 	and.w	r3, r3, #3
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	b29b      	uxth	r3, r3
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
	...

08008a68 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	461a      	mov	r2, r3
 8008a76:	4603      	mov	r3, r0
 8008a78:	70fb      	strb	r3, [r7, #3]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70bb      	strb	r3, [r7, #2]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a96:	461a      	mov	r2, r3
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008a9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d867      	bhi.n	8008b76 <USB_HC_Init+0x10e>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <USB_HC_Init+0x44>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008abd 	.word	0x08008abd
 8008ab0:	08008b39 	.word	0x08008b39
 8008ab4:	08008abd 	.word	0x08008abd
 8008ab8:	08008afb 	.word	0x08008afb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f240 439d 	movw	r3, #1181	; 0x49d
 8008ace:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ad0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da51      	bge.n	8008b7c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	0151      	lsls	r1, r2, #5
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	440a      	add	r2, r1
 8008aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af6:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008af8:	e040      	b.n	8008b7c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b06:	461a      	mov	r2, r3
 8008b08:	f240 639d 	movw	r3, #1693	; 0x69d
 8008b0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da34      	bge.n	8008b80 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	0151      	lsls	r1, r2, #5
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	440a      	add	r2, r1
 8008b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b34:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008b36:	e023      	b.n	8008b80 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b44:	461a      	mov	r2, r3
 8008b46:	f240 2325 	movw	r3, #549	; 0x225
 8008b4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	da17      	bge.n	8008b84 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	0151      	lsls	r1, r2, #5
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	440a      	add	r2, r1
 8008b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b6e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008b72:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008b74:	e006      	b.n	8008b84 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7a:	e004      	b.n	8008b86 <USB_HC_Init+0x11e>
      break;
 8008b7c:	bf00      	nop
 8008b7e:	e002      	b.n	8008b86 <USB_HC_Init+0x11e>
      break;
 8008b80:	bf00      	nop
 8008b82:	e000      	b.n	8008b86 <USB_HC_Init+0x11e>
      break;
 8008b84:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	f003 030f 	and.w	r3, r3, #15
 8008b94:	2101      	movs	r1, #1
 8008b96:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008bb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da03      	bge.n	8008bc0 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bbc:	613b      	str	r3, [r7, #16]
 8008bbe:	e001      	b.n	8008bc4 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008bc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d103      	bne.n	8008bd4 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	e001      	b.n	8008bd8 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bd8:	787b      	ldrb	r3, [r7, #1]
 8008bda:	059b      	lsls	r3, r3, #22
 8008bdc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008be0:	78bb      	ldrb	r3, [r7, #2]
 8008be2:	02db      	lsls	r3, r3, #11
 8008be4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008be8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bee:	049b      	lsls	r3, r3, #18
 8008bf0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008bf4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bfc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	0159      	lsls	r1, r3, #5
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	440b      	add	r3, r1
 8008c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c14:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008c16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d10f      	bne.n	8008c3e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c3c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c64:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d018      	beq.n	8008ca0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	8912      	ldrh	r2, [r2, #8]
 8008c76:	4413      	add	r3, r2
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	8912      	ldrh	r2, [r2, #8]
 8008c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c82:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8008c84:	8bfa      	ldrh	r2, [r7, #30]
 8008c86:	8a7b      	ldrh	r3, [r7, #18]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d90b      	bls.n	8008ca4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8008c8c:	8a7b      	ldrh	r3, [r7, #18]
 8008c8e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008c90:	8bfb      	ldrh	r3, [r7, #30]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	8912      	ldrh	r2, [r2, #8]
 8008c96:	fb02 f203 	mul.w	r2, r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	611a      	str	r2, [r3, #16]
 8008c9e:	e001      	b.n	8008ca4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	78db      	ldrb	r3, [r3, #3]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d006      	beq.n	8008cba <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008cac:	8bfb      	ldrh	r3, [r7, #30]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	8912      	ldrh	r2, [r2, #8]
 8008cb2:	fb02 f203 	mul.w	r2, r2, r3
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008cc2:	8bfb      	ldrh	r3, [r7, #30]
 8008cc4:	04d9      	lsls	r1, r3, #19
 8008cc6:	4b5f      	ldr	r3, [pc, #380]	; (8008e44 <USB_HC_StartXfer+0x1f8>)
 8008cc8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008cca:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	7a9b      	ldrb	r3, [r3, #10]
 8008cd0:	075b      	lsls	r3, r3, #29
 8008cd2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008cd6:	6979      	ldr	r1, [r7, #20]
 8008cd8:	0148      	lsls	r0, r1, #5
 8008cda:	69b9      	ldr	r1, [r7, #24]
 8008cdc:	4401      	add	r1, r0
 8008cde:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ce2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ce4:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2301      	moveq	r3, #1
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	7c7b      	ldrb	r3, [r7, #17]
 8008d2e:	075b      	lsls	r3, r3, #29
 8008d30:	6979      	ldr	r1, [r7, #20]
 8008d32:	0148      	lsls	r0, r1, #5
 8008d34:	69b9      	ldr	r1, [r7, #24]
 8008d36:	4401      	add	r1, r0
 8008d38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a3e      	ldr	r2, [pc, #248]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d50:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d52:	4b3d      	ldr	r3, [pc, #244]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d5a:	4a3b      	ldr	r2, [pc, #236]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d5c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	78db      	ldrb	r3, [r3, #3]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d006      	beq.n	8008d74 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008d66:	4b38      	ldr	r3, [pc, #224]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d6e:	4a36      	ldr	r2, [pc, #216]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	e005      	b.n	8008d80 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008d74:	4b34      	ldr	r3, [pc, #208]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d7c:	4a32      	ldr	r2, [pc, #200]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d7e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d80:	4b31      	ldr	r3, [pc, #196]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d88:	4a2f      	ldr	r2, [pc, #188]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d8a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4b2b      	ldr	r3, [pc, #172]	; (8008e48 <USB_HC_StartXfer+0x1fc>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	78db      	ldrb	r3, [r3, #3]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d148      	bne.n	8008e3a <USB_HC_StartXfer+0x1ee>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d044      	beq.n	8008e3a <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	79db      	ldrb	r3, [r3, #7]
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d831      	bhi.n	8008e1c <USB_HC_StartXfer+0x1d0>
 8008db8:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <USB_HC_StartXfer+0x174>)
 8008dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbe:	bf00      	nop
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008df5 	.word	0x08008df5
 8008dc8:	08008dd1 	.word	0x08008dd1
 8008dcc:	08008df5 	.word	0x08008df5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	3303      	adds	r3, #3
 8008dd6:	089b      	lsrs	r3, r3, #2
 8008dd8:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008dda:	89fa      	ldrh	r2, [r7, #14]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d91c      	bls.n	8008e20 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	f043 0220 	orr.w	r2, r3, #32
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	619a      	str	r2, [r3, #24]
          }
          break;
 8008df2:	e015      	b.n	8008e20 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	3303      	adds	r3, #3
 8008dfa:	089b      	lsrs	r3, r3, #2
 8008dfc:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008dfe:	89fa      	ldrh	r2, [r7, #14]
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d90a      	bls.n	8008e24 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	619a      	str	r2, [r3, #24]
          }
          break;
 8008e1a:	e003      	b.n	8008e24 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8008e1c:	bf00      	nop
 8008e1e:	e002      	b.n	8008e26 <USB_HC_StartXfer+0x1da>
          break;
 8008e20:	bf00      	nop
 8008e22:	e000      	b.n	8008e26 <USB_HC_StartXfer+0x1da>
          break;
 8008e24:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68d9      	ldr	r1, [r3, #12]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	785a      	ldrb	r2, [r3, #1]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fc23 	bl	8008680 <USB_WritePacket>
    }

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	1ff80000 	.word	0x1ff80000
 8008e48:	200000b4 	.word	0x200000b4

08008e4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	b29b      	uxth	r3, r3
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b087      	sub	sp, #28
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	460b      	mov	r3, r1
 8008e78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	0c9b      	lsrs	r3, r3, #18
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <USB_HC_Halt+0x3a>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d16c      	bne.n	8008f82 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ec2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ec6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d143      	bne.n	8008f5c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ef2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	0151      	lsls	r1, r2, #5
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	440a      	add	r2, r1
 8008f0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f32:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	3301      	adds	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f40:	d81d      	bhi.n	8008f7e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f58:	d0ec      	beq.n	8008f34 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f5a:	e080      	b.n	800905e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f7a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f7c:	e06f      	b.n	800905e <USB_HC_Halt+0x1f0>
          break;
 8008f7e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f80:	e06d      	b.n	800905e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	0151      	lsls	r1, r2, #5
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	440a      	add	r2, r1
 8008f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fa0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d143      	bne.n	800903a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	0151      	lsls	r1, r2, #5
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	440a      	add	r2, r1
 8008fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fd0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	0151      	lsls	r1, r2, #5
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	440a      	add	r2, r1
 8008fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ff0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	0151      	lsls	r1, r2, #5
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	440a      	add	r2, r1
 8009008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800900c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009010:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	3301      	adds	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800901e:	d81d      	bhi.n	800905c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	4413      	add	r3, r2
 8009028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009036:	d0ec      	beq.n	8009012 <USB_HC_Halt+0x1a4>
 8009038:	e011      	b.n	800905e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4413      	add	r3, r2
 8009042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	440a      	add	r2, r1
 8009050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	e000      	b.n	800905e <USB_HC_Halt+0x1f0>
          break;
 800905c:	bf00      	nop
    }
  }

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff fa7b 	bl	8008578 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009082:	2110      	movs	r1, #16
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fab3 	bl	80085f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff fad6 	bl	800863c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009090:	2300      	movs	r3, #0
 8009092:	613b      	str	r3, [r7, #16]
 8009094:	e01f      	b.n	80090d6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4413      	add	r3, r2
 800909e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ca:	461a      	mov	r2, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	3301      	adds	r3, #1
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2b0f      	cmp	r3, #15
 80090da:	d9dc      	bls.n	8009096 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	e034      	b.n	800914c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009100:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009108:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4413      	add	r3, r2
 8009112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009116:	461a      	mov	r2, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	3301      	adds	r3, #1
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009128:	d80c      	bhi.n	8009144 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4413      	add	r3, r2
 8009132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800913c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009140:	d0ec      	beq.n	800911c <USB_StopHost+0xb0>
 8009142:	e000      	b.n	8009146 <USB_StopHost+0xda>
        break;
 8009144:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	3301      	adds	r3, #1
 800914a:	613b      	str	r3, [r7, #16]
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b0f      	cmp	r3, #15
 8009150:	d9c7      	bls.n	80090e2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009158:	461a      	mov	r2, r3
 800915a:	f04f 33ff 	mov.w	r3, #4294967295
 800915e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f04f 32ff 	mov.w	r2, #4294967295
 8009166:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7ff f9f4 	bl	8008556 <USB_EnableGlobalInt>

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8009178:	b590      	push	{r4, r7, lr}
 800917a:	b089      	sub	sp, #36	; 0x24
 800917c:	af04      	add	r7, sp, #16
 800917e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8009180:	2302      	movs	r3, #2
 8009182:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8009184:	2301      	movs	r3, #1
 8009186:	2202      	movs	r2, #2
 8009188:	2102      	movs	r1, #2
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fc3a 	bl	8009a04 <USBH_FindInterface>
 8009190:	4603      	mov	r3, r0
 8009192:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2bff      	cmp	r3, #255	; 0xff
 8009198:	f000 812a 	beq.w	80093f0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fc13 	bl	80099cc <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80091ac:	2050      	movs	r0, #80	; 0x50
 80091ae:	f002 f8e3 	bl	800b378 <malloc>
 80091b2:	4603      	mov	r3, r0
 80091b4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	211a      	movs	r1, #26
 80091c6:	fb01 f303 	mul.w	r3, r1, r3
 80091ca:	4413      	add	r3, r2
 80091cc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b25b      	sxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	da15      	bge.n	8009204 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	211a      	movs	r1, #26
 80091de:	fb01 f303 	mul.w	r3, r1, r3
 80091e2:	4413      	add	r3, r2
 80091e4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80091e8:	781a      	ldrb	r2, [r3, #0]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	211a      	movs	r1, #26
 80091f4:	fb01 f303 	mul.w	r3, r1, r3
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80091fe:	881a      	ldrh	r2, [r3, #0]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	785b      	ldrb	r3, [r3, #1]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 fd21 	bl	800ac52 <USBH_AllocPipe>
 8009210:	4603      	mov	r3, r0
 8009212:	461a      	mov	r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	7819      	ldrb	r1, [r3, #0]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	7858      	ldrb	r0, [r3, #1]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	8952      	ldrh	r2, [r2, #10]
 8009230:	9202      	str	r2, [sp, #8]
 8009232:	2203      	movs	r2, #3
 8009234:	9201      	str	r2, [sp, #4]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4623      	mov	r3, r4
 800923a:	4602      	mov	r2, r0
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fcd9 	bl	800abf4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2200      	movs	r2, #0
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 ffe4 	bl	800b218 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8009250:	2300      	movs	r3, #0
 8009252:	2200      	movs	r2, #0
 8009254:	210a      	movs	r1, #10
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fbd4 	bl	8009a04 <USBH_FindInterface>
 800925c:	4603      	mov	r3, r0
 800925e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2bff      	cmp	r3, #255	; 0xff
 8009264:	f000 80c4 	beq.w	80093f0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	211a      	movs	r1, #26
 800926e:	fb01 f303 	mul.w	r3, r1, r3
 8009272:	4413      	add	r3, r2
 8009274:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	b25b      	sxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	da16      	bge.n	80092ae <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	211a      	movs	r1, #26
 8009286:	fb01 f303 	mul.w	r3, r1, r3
 800928a:	4413      	add	r3, r2
 800928c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009290:	781a      	ldrb	r2, [r3, #0]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	211a      	movs	r1, #26
 800929c:	fb01 f303 	mul.w	r3, r1, r3
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80092a6:	881a      	ldrh	r2, [r3, #0]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	835a      	strh	r2, [r3, #26]
 80092ac:	e015      	b.n	80092da <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	211a      	movs	r1, #26
 80092b4:	fb01 f303 	mul.w	r3, r1, r3
 80092b8:	4413      	add	r3, r2
 80092ba:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80092be:	781a      	ldrb	r2, [r3, #0]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	211a      	movs	r1, #26
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80092d4:	881a      	ldrh	r2, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	211a      	movs	r1, #26
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	4413      	add	r3, r2
 80092e6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	b25b      	sxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da16      	bge.n	8009320 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	211a      	movs	r1, #26
 80092f8:	fb01 f303 	mul.w	r3, r1, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009302:	781a      	ldrb	r2, [r3, #0]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	211a      	movs	r1, #26
 800930e:	fb01 f303 	mul.w	r3, r1, r3
 8009312:	4413      	add	r3, r2
 8009314:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009318:	881a      	ldrh	r2, [r3, #0]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	835a      	strh	r2, [r3, #26]
 800931e:	e015      	b.n	800934c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	211a      	movs	r1, #26
 8009326:	fb01 f303 	mul.w	r3, r1, r3
 800932a:	4413      	add	r3, r2
 800932c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009330:	781a      	ldrb	r2, [r3, #0]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	211a      	movs	r1, #26
 800933c:	fb01 f303 	mul.w	r3, r1, r3
 8009340:	4413      	add	r3, r2
 8009342:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009346:	881a      	ldrh	r2, [r3, #0]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	7b9b      	ldrb	r3, [r3, #14]
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fc7d 	bl	800ac52 <USBH_AllocPipe>
 8009358:	4603      	mov	r3, r0
 800935a:	461a      	mov	r2, r3
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	7bdb      	ldrb	r3, [r3, #15]
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 fc73 	bl	800ac52 <USBH_AllocPipe>
 800936c:	4603      	mov	r3, r0
 800936e:	461a      	mov	r2, r3
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	7b59      	ldrb	r1, [r3, #13]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	7b98      	ldrb	r0, [r3, #14]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	8b12      	ldrh	r2, [r2, #24]
 800938c:	9202      	str	r2, [sp, #8]
 800938e:	2202      	movs	r2, #2
 8009390:	9201      	str	r2, [sp, #4]
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	4623      	mov	r3, r4
 8009396:	4602      	mov	r2, r0
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fc2b 	bl	800abf4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	7b19      	ldrb	r1, [r3, #12]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	7bd8      	ldrb	r0, [r3, #15]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	8b52      	ldrh	r2, [r2, #26]
 80093b6:	9202      	str	r2, [sp, #8]
 80093b8:	2202      	movs	r2, #2
 80093ba:	9201      	str	r2, [sp, #4]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	4623      	mov	r3, r4
 80093c0:	4602      	mov	r2, r0
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 fc16 	bl	800abf4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	7b5b      	ldrb	r3, [r3, #13]
 80093d4:	2200      	movs	r2, #0
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 ff1d 	bl	800b218 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	7b1b      	ldrb	r3, [r3, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 ff16 	bl	800b218 <USBH_LL_SetToggle>
      status = USBH_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd90      	pop	{r4, r7, pc}

080093fa <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00e      	beq.n	8009432 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 fc09 	bl	800ac32 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fc31 	bl	800ac8e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	7b1b      	ldrb	r3, [r3, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00e      	beq.n	8009458 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	7b1b      	ldrb	r3, [r3, #12]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 fbf6 	bl	800ac32 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	7b1b      	ldrb	r3, [r3, #12]
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f001 fc1e 	bl	800ac8e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	7b5b      	ldrb	r3, [r3, #13]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00e      	beq.n	800947e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	7b5b      	ldrb	r3, [r3, #13]
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 fbe3 	bl	800ac32 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	7b5b      	ldrb	r3, [r3, #13]
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 fc0b 	bl	800ac8e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00b      	beq.n	80094a2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	4618      	mov	r0, r3
 8009494:	f001 ff78 	bl	800b388 <free>
    phost->pActiveClass->pData = 0U;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800949e:	2200      	movs	r2, #0
 80094a0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80094b4:	2302      	movs	r3, #2
 80094b6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	3340      	adds	r3, #64	; 0x40
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f8b2 	bl	8009632 <GetLineCoding>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094de:	2102      	movs	r1, #2
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
  }
  return status;
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80094f8:	2301      	movs	r3, #1
 80094fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009510:	2b04      	cmp	r3, #4
 8009512:	d877      	bhi.n	8009604 <USBH_CDC_Process+0x114>
 8009514:	a201      	add	r2, pc, #4	; (adr r2, 800951c <USBH_CDC_Process+0x2c>)
 8009516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951a:	bf00      	nop
 800951c:	08009531 	.word	0x08009531
 8009520:	08009537 	.word	0x08009537
 8009524:	08009567 	.word	0x08009567
 8009528:	080095db 	.word	0x080095db
 800952c:	080095e9 	.word	0x080095e9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]
    break;
 8009534:	e06d      	b.n	8009612 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f897 	bl	8009670 <SetLineCoding>
 8009542:	4603      	mov	r3, r0
 8009544:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8009554:	e058      	b.n	8009608 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d055      	beq.n	8009608 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2204      	movs	r2, #4
 8009560:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8009564:	e050      	b.n	8009608 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	3340      	adds	r3, #64	; 0x40
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f860 	bl	8009632 <GetLineCoding>
 8009572:	4603      	mov	r3, r0
 8009574:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d126      	bne.n	80095ca <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958e:	791b      	ldrb	r3, [r3, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d13b      	bne.n	800960c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800959e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d133      	bne.n	800960c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ae:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d12b      	bne.n	800960c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095bc:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80095be:	429a      	cmp	r2, r3
 80095c0:	d124      	bne.n	800960c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f95a 	bl	800987c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80095c8:	e020      	b.n	800960c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d01d      	beq.n	800960c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2204      	movs	r2, #4
 80095d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80095d8:	e018      	b.n	800960c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f867 	bl	80096ae <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f8dc 	bl	800979e <CDC_ProcessReception>
    break;
 80095e6:	e014      	b.n	8009612 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80095e8:	2100      	movs	r1, #0
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fece 	bl	800a38c <USBH_ClrFeature>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8009602:	e005      	b.n	8009610 <USBH_CDC_Process+0x120>

  default:
    break;
 8009604:	bf00      	nop
 8009606:	e004      	b.n	8009612 <USBH_CDC_Process+0x122>
    break;
 8009608:	bf00      	nop
 800960a:	e002      	b.n	8009612 <USBH_CDC_Process+0x122>
    break;
 800960c:	bf00      	nop
 800960e:	e000      	b.n	8009612 <USBH_CDC_Process+0x122>
    break;
 8009610:	bf00      	nop

  }

  return status;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	22a1      	movs	r2, #161	; 0xa1
 8009640:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2221      	movs	r2, #33	; 0x21
 8009646:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2207      	movs	r2, #7
 8009658:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2207      	movs	r2, #7
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 f873 	bl	800a74c <USBH_CtlReq>
 8009666:	4603      	mov	r3, r0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2221      	movs	r2, #33	; 0x21
 800967e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2207      	movs	r2, #7
 8009696:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2207      	movs	r2, #7
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f001 f854 	bl	800a74c <USBH_CtlReq>
 80096a4:	4603      	mov	r3, r0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b086      	sub	sp, #24
 80096b2:	af02      	add	r7, sp, #8
 80096b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096c0:	2300      	movs	r3, #0
 80096c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d002      	beq.n	80096d4 <CDC_ProcessTransmission+0x26>
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d025      	beq.n	800971e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80096d2:	e060      	b.n	8009796 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	8b12      	ldrh	r2, [r2, #24]
 80096dc:	4293      	cmp	r3, r2
 80096de:	d90c      	bls.n	80096fa <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	69d9      	ldr	r1, [r3, #28]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8b1a      	ldrh	r2, [r3, #24]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	7b58      	ldrb	r0, [r3, #13]
 80096ec:	2301      	movs	r3, #1
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	4603      	mov	r3, r0
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 fa3b 	bl	800ab6e <USBH_BulkSendData>
 80096f8:	e00c      	b.n	8009714 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8009702:	b29a      	uxth	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	7b58      	ldrb	r0, [r3, #13]
 8009708:	2301      	movs	r3, #1
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	4603      	mov	r3, r0
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 fa2d 	bl	800ab6e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800971c:	e03b      	b.n	8009796 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	7b5b      	ldrb	r3, [r3, #13]
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 fd4d 	bl	800b1c4 <USBH_LL_GetURBState>
 800972a:	4603      	mov	r3, r0
 800972c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800972e:	7afb      	ldrb	r3, [r7, #11]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d128      	bne.n	8009786 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	8b12      	ldrh	r2, [r2, #24]
 800973c:	4293      	cmp	r3, r2
 800973e:	d90e      	bls.n	800975e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	8b12      	ldrh	r2, [r2, #24]
 8009748:	1a9a      	subs	r2, r3, r2
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	8b12      	ldrh	r2, [r2, #24]
 8009756:	441a      	add	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	61da      	str	r2, [r3, #28]
 800975c:	e002      	b.n	8009764 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8009774:	e00e      	b.n	8009794 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f868 	bl	8009854 <USBH_CDC_TransmitCallback>
    break;
 8009784:	e006      	b.n	8009794 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d103      	bne.n	8009794 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8009794:	bf00      	nop
  }
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d002      	beq.n	80097c4 <CDC_ProcessReception+0x26>
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d00e      	beq.n	80097e0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80097c2:	e043      	b.n	800984c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	6a19      	ldr	r1, [r3, #32]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	8b5a      	ldrh	r2, [r3, #26]
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	7b1b      	ldrb	r3, [r3, #12]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 f9f1 	bl	800abb8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2204      	movs	r2, #4
 80097da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80097de:	e035      	b.n	800984c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	7b1b      	ldrb	r3, [r3, #12]
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fcec 	bl	800b1c4 <USBH_LL_GetURBState>
 80097ec:	4603      	mov	r3, r0
 80097ee:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80097f0:	7cfb      	ldrb	r3, [r7, #19]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d129      	bne.n	800984a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	7b1b      	ldrb	r3, [r3, #12]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 fc4f 	bl	800b0a0 <USBH_LL_GetLastXferSize>
 8009802:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	429a      	cmp	r2, r3
 800980c:	d016      	beq.n	800983c <CDC_ProcessReception+0x9e>
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	8b5b      	ldrh	r3, [r3, #26]
 8009812:	461a      	mov	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4293      	cmp	r3, r2
 8009818:	d910      	bls.n	800983c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1ad2      	subs	r2, r2, r3
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	6a1a      	ldr	r2, [r3, #32]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	441a      	add	r2, r3
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2203      	movs	r2, #3
 8009836:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800983a:	e006      	b.n	800984a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f80f 	bl	8009868 <USBH_CDC_ReceiveCallback>
    break;
 800984a:	bf00      	nop
  }
}
 800984c:	bf00      	nop
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]

}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]

}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4613      	mov	r3, r2
 800989c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80098a4:	2302      	movs	r3, #2
 80098a6:	e019      	b.n	80098dc <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	79fa      	ldrb	r2, [r7, #7]
 80098ac:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f80f 	bl	80098e4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f001 fb31 	bl	800af3c <USBH_LL_Init>

  return USBH_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80098f0:	e008      	b.n	8009904 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	32e0      	adds	r2, #224	; 0xe0
 80098f8:	2100      	movs	r1, #0
 80098fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3301      	adds	r3, #1
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b0e      	cmp	r3, #14
 8009908:	d9f3      	bls.n	80098f2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	e009      	b.n	8009924 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	4413      	add	r3, r2
 8009916:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800991a:	2200      	movs	r2, #0
 800991c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800992a:	d3f1      	bcc.n	8009910 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2240      	movs	r2, #64	; 0x40
 8009950:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d017      	beq.n	80099ba <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10f      	bne.n	80099b4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999a:	1c59      	adds	r1, r3, #1
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	33dc      	adds	r3, #220	; 0xdc
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]
 80099b2:	e004      	b.n	80099be <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80099b4:	2302      	movs	r3, #2
 80099b6:	73fb      	strb	r3, [r7, #15]
 80099b8:	e001      	b.n	80099be <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80099ba:	2302      	movs	r3, #2
 80099bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099be:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d204      	bcs.n	80099f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	78fa      	ldrb	r2, [r7, #3]
 80099ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80099f0:	e001      	b.n	80099f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80099f2:	2302      	movs	r3, #2
 80099f4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	461a      	mov	r2, r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	70fb      	strb	r3, [r7, #3]
 8009a16:	460b      	mov	r3, r1
 8009a18:	70bb      	strb	r3, [r7, #2]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009a2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a2e:	e025      	b.n	8009a7c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	221a      	movs	r2, #26
 8009a34:	fb02 f303 	mul.w	r3, r2, r3
 8009a38:	3308      	adds	r3, #8
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3302      	adds	r3, #2
 8009a40:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	795b      	ldrb	r3, [r3, #5]
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d002      	beq.n	8009a52 <USBH_FindInterface+0x4e>
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	2bff      	cmp	r3, #255	; 0xff
 8009a50:	d111      	bne.n	8009a76 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009a56:	78ba      	ldrb	r2, [r7, #2]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d002      	beq.n	8009a62 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009a5c:	78bb      	ldrb	r3, [r7, #2]
 8009a5e:	2bff      	cmp	r3, #255	; 0xff
 8009a60:	d109      	bne.n	8009a76 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009a66:	787a      	ldrb	r2, [r7, #1]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d002      	beq.n	8009a72 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a6c:	787b      	ldrb	r3, [r7, #1]
 8009a6e:	2bff      	cmp	r3, #255	; 0xff
 8009a70:	d101      	bne.n	8009a76 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	e006      	b.n	8009a84 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d9d6      	bls.n	8009a30 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a82:	23ff      	movs	r3, #255	; 0xff
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	371c      	adds	r7, #28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 fa8b 	bl	800afb4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 fba2 	bl	800b1ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af04      	add	r7, sp, #16
 8009ab6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 faec 	bl	800a09e <USBH_IsPortEnabled>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10c      	bne.n	8009ae6 <USBH_Process+0x36>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d007      	beq.n	8009ae6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d002      	beq.n	8009ae6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2203      	movs	r2, #3
 8009ae4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b0b      	cmp	r3, #11
 8009aee:	f200 814c 	bhi.w	8009d8a <USBH_Process+0x2da>
 8009af2:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <USBH_Process+0x48>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009b29 	.word	0x08009b29
 8009afc:	08009b4b 	.word	0x08009b4b
 8009b00:	08009b5f 	.word	0x08009b5f
 8009b04:	08009d65 	.word	0x08009d65
 8009b08:	08009d8b 	.word	0x08009d8b
 8009b0c:	08009bed 	.word	0x08009bed
 8009b10:	08009d1b 	.word	0x08009d1b
 8009b14:	08009c1d 	.word	0x08009c1d
 8009b18:	08009c3d 	.word	0x08009c3d
 8009b1c:	08009c5d 	.word	0x08009c5d
 8009b20:	08009c8b 	.word	0x08009c8b
 8009b24:	08009d4d 	.word	0x08009d4d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 812c 	beq.w	8009d8e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8009b3c:	20c8      	movs	r0, #200	; 0xc8
 8009b3e:	f001 fb9e 	bl	800b27e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f001 fa91 	bl	800b06a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009b48:	e121      	b.n	8009d8e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	f040 811e 	bne.w	8009d92 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8009b5c:	e119      	b.n	8009d92 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8009b5e:	2064      	movs	r0, #100	; 0x64
 8009b60:	f001 fb8d 	bl	800b27e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f001 fa5b 	bl	800b020 <USBH_LL_GetSpeed>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2205      	movs	r2, #5
 8009b78:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f001 f868 	bl	800ac52 <USBH_AllocPipe>
 8009b82:	4603      	mov	r3, r0
 8009b84:	461a      	mov	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8009b8a:	2180      	movs	r1, #128	; 0x80
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f001 f860 	bl	800ac52 <USBH_AllocPipe>
 8009b92:	4603      	mov	r3, r0
 8009b94:	461a      	mov	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	7919      	ldrb	r1, [r3, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8009bae:	b292      	uxth	r2, r2
 8009bb0:	9202      	str	r2, [sp, #8]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	9201      	str	r2, [sp, #4]
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2280      	movs	r2, #128	; 0x80
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 f819 	bl	800abf4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	7959      	ldrb	r1, [r3, #5]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8009bd6:	b292      	uxth	r2, r2
 8009bd8:	9202      	str	r2, [sp, #8]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	9201      	str	r2, [sp, #4]
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	4603      	mov	r3, r0
 8009be2:	2200      	movs	r2, #0
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 f805 	bl	800abf4 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009bea:	e0e3      	b.n	8009db4 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f8e7 	bl	8009dc0 <USBH_HandleEnum>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f040 80ce 	bne.w	8009d96 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d103      	bne.n	8009c14 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2208      	movs	r2, #8
 8009c10:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8009c12:	e0c0      	b.n	8009d96 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2207      	movs	r2, #7
 8009c18:	701a      	strb	r2, [r3, #0]
    break;
 8009c1a:	e0bc      	b.n	8009d96 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 80b9 	beq.w	8009d9a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009c2e:	2101      	movs	r1, #1
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2208      	movs	r2, #8
 8009c38:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009c3a:	e0ae      	b.n	8009d9a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fb59 	bl	800a2fe <USBH_SetCfg>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f040 80a5 	bne.w	8009d9e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2209      	movs	r2, #9
 8009c58:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009c5a:	e0a0      	b.n	8009d9e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00b      	beq.n	8009c82 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fb69 	bl	800a344 <USBH_SetFeature>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f040 8094 	bne.w	8009da2 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009c80:	e08f      	b.n	8009da2 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	220a      	movs	r2, #10
 8009c86:	701a      	strb	r2, [r3, #0]
    break;
 8009c88:	e08b      	b.n	8009da2 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 8088 	beq.w	8009da6 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
 8009ca2:	e017      	b.n	8009cd4 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	33dc      	adds	r3, #220	; 0xdc
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	791a      	ldrb	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d108      	bne.n	8009cce <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	33dc      	adds	r3, #220	; 0xdc
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0e4      	beq.n	8009ca4 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d016      	beq.n	8009d12 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	4798      	blx	r3
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d109      	bne.n	8009d0a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2206      	movs	r2, #6
 8009cfa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d02:	2103      	movs	r1, #3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009d08:	e04d      	b.n	8009da6 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	220d      	movs	r2, #13
 8009d0e:	701a      	strb	r2, [r3, #0]
    break;
 8009d10:	e049      	b.n	8009da6 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	220d      	movs	r2, #13
 8009d16:	701a      	strb	r2, [r3, #0]
    break;
 8009d18:	e045      	b.n	8009da6 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00f      	beq.n	8009d44 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	4798      	blx	r3
 8009d30:	4603      	mov	r3, r0
 8009d32:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d136      	bne.n	8009daa <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	220b      	movs	r2, #11
 8009d40:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8009d42:	e032      	b.n	8009daa <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	220d      	movs	r2, #13
 8009d48:	701a      	strb	r2, [r3, #0]
    break;
 8009d4a:	e02e      	b.n	8009daa <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d02b      	beq.n	8009dae <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
    }
    break;
 8009d62:	e024      	b.n	8009dae <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fdbd 	bl	80098e4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d01e      	beq.n	8009db2 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8009d88:	e013      	b.n	8009db2 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8009d8a:	bf00      	nop
 8009d8c:	e012      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009d8e:	bf00      	nop
 8009d90:	e010      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009d92:	bf00      	nop
 8009d94:	e00e      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009d96:	bf00      	nop
 8009d98:	e00c      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009d9a:	bf00      	nop
 8009d9c:	e00a      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009d9e:	bf00      	nop
 8009da0:	e008      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009da2:	bf00      	nop
 8009da4:	e006      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009da6:	bf00      	nop
 8009da8:	e004      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009daa:	bf00      	nop
 8009dac:	e002      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009dae:	bf00      	nop
 8009db0:	e000      	b.n	8009db4 <USBH_Process+0x304>
    break;
 8009db2:	bf00      	nop
  }
 return USBH_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop

08009dc0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af04      	add	r7, sp, #16
 8009dc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	2b07      	cmp	r3, #7
 8009dd2:	f200 80f8 	bhi.w	8009fc6 <USBH_HandleEnum+0x206>
 8009dd6:	a201      	add	r2, pc, #4	; (adr r2, 8009ddc <USBH_HandleEnum+0x1c>)
 8009dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ddc:	08009dfd 	.word	0x08009dfd
 8009de0:	08009e6f 	.word	0x08009e6f
 8009de4:	08009e87 	.word	0x08009e87
 8009de8:	08009efd 	.word	0x08009efd
 8009dec:	08009f13 	.word	0x08009f13
 8009df0:	08009f2f 	.word	0x08009f2f
 8009df4:	08009f63 	.word	0x08009f63
 8009df8:	08009f97 	.word	0x08009f97
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8009dfc:	2108      	movs	r1, #8
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f9ad 	bl	800a15e <USBH_Get_DevDesc>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 80df 	bne.w	8009fca <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7919      	ldrb	r1, [r3, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009e30:	b292      	uxth	r2, r2
 8009e32:	9202      	str	r2, [sp, #8]
 8009e34:	2200      	movs	r2, #0
 8009e36:	9201      	str	r2, [sp, #4]
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2280      	movs	r2, #128	; 0x80
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fed8 	bl	800abf4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	7959      	ldrb	r1, [r3, #5]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009e58:	b292      	uxth	r2, r2
 8009e5a:	9202      	str	r2, [sp, #8]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	9201      	str	r2, [sp, #4]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	4603      	mov	r3, r0
 8009e64:	2200      	movs	r2, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fec4 	bl	800abf4 <USBH_OpenPipe>

    }
    break;
 8009e6c:	e0ad      	b.n	8009fca <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009e6e:	2112      	movs	r1, #18
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f974 	bl	800a15e <USBH_Get_DevDesc>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f040 80a8 	bne.w	8009fce <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2202      	movs	r2, #2
 8009e82:	705a      	strb	r2, [r3, #1]

    }
    break;
 8009e84:	e0a3      	b.n	8009fce <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009e86:	2101      	movs	r1, #1
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fa14 	bl	800a2b6 <USBH_SetAddress>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f040 809e 	bne.w	8009fd2 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8009e96:	2002      	movs	r0, #2
 8009e98:	f001 f9f1 	bl	800b27e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2203      	movs	r2, #3
 8009ea8:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7919      	ldrb	r1, [r3, #4]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009ebe:	b292      	uxth	r2, r2
 8009ec0:	9202      	str	r2, [sp, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	9201      	str	r2, [sp, #4]
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2280      	movs	r2, #128	; 0x80
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fe91 	bl	800abf4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7959      	ldrb	r1, [r3, #5]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009ee6:	b292      	uxth	r2, r2
 8009ee8:	9202      	str	r2, [sp, #8]
 8009eea:	2200      	movs	r2, #0
 8009eec:	9201      	str	r2, [sp, #4]
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fe7d 	bl	800abf4 <USBH_OpenPipe>
    }
    break;
 8009efa:	e06a      	b.n	8009fd2 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8009efc:	2109      	movs	r1, #9
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f955 	bl	800a1ae <USBH_Get_CfgDesc>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d165      	bne.n	8009fd6 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009f10:	e061      	b.n	8009fd6 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f947 	bl	800a1ae <USBH_Get_CfgDesc>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d159      	bne.n	8009fda <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2205      	movs	r2, #5
 8009f2a:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009f2c:	e055      	b.n	8009fda <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d010      	beq.n	8009f5a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009f44:	23ff      	movs	r3, #255	; 0xff
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f955 	bl	800a1f6 <USBH_Get_StringDesc>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d145      	bne.n	8009fde <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2206      	movs	r2, #6
 8009f56:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009f58:	e041      	b.n	8009fde <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2206      	movs	r2, #6
 8009f5e:	705a      	strb	r2, [r3, #1]
    break;
 8009f60:	e03d      	b.n	8009fde <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d010      	beq.n	8009f8e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009f78:	23ff      	movs	r3, #255	; 0xff
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f93b 	bl	800a1f6 <USBH_Get_StringDesc>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d12d      	bne.n	8009fe2 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2207      	movs	r2, #7
 8009f8a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009f8c:	e029      	b.n	8009fe2 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2207      	movs	r2, #7
 8009f92:	705a      	strb	r2, [r3, #1]
    break;
 8009f94:	e025      	b.n	8009fe2 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00f      	beq.n	8009fc0 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009fac:	23ff      	movs	r3, #255	; 0xff
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f921 	bl	800a1f6 <USBH_Get_StringDesc>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d115      	bne.n	8009fe6 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009fbe:	e012      	b.n	8009fe6 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc4:	e00f      	b.n	8009fe6 <USBH_HandleEnum+0x226>

  default:
    break;
 8009fc6:	bf00      	nop
 8009fc8:	e00e      	b.n	8009fe8 <USBH_HandleEnum+0x228>
    break;
 8009fca:	bf00      	nop
 8009fcc:	e00c      	b.n	8009fe8 <USBH_HandleEnum+0x228>
    break;
 8009fce:	bf00      	nop
 8009fd0:	e00a      	b.n	8009fe8 <USBH_HandleEnum+0x228>
    break;
 8009fd2:	bf00      	nop
 8009fd4:	e008      	b.n	8009fe8 <USBH_HandleEnum+0x228>
    break;
 8009fd6:	bf00      	nop
 8009fd8:	e006      	b.n	8009fe8 <USBH_HandleEnum+0x228>
    break;
 8009fda:	bf00      	nop
 8009fdc:	e004      	b.n	8009fe8 <USBH_HandleEnum+0x228>
    break;
 8009fde:	bf00      	nop
 8009fe0:	e002      	b.n	8009fe8 <USBH_HandleEnum+0x228>
    break;
 8009fe2:	bf00      	nop
 8009fe4:	e000      	b.n	8009fe8 <USBH_HandleEnum+0x228>
    break;
 8009fe6:	bf00      	nop
  }
  return Status;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop

08009ff4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f804 	bl	800a036 <USBH_HandleSof>
}
 800a02e:	bf00      	nop
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b0b      	cmp	r3, #11
 800a046:	d10a      	bne.n	800a05e <USBH_HandleSof+0x28>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d005      	beq.n	800a05e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	4798      	blx	r3
  }
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800a066:	b480      	push	{r7}
 800a068:	b083      	sub	sp, #12
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800a076:	bf00      	nop
}
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800a092:	bf00      	nop
}
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10f      	bne.n	800a0ea <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00e      	beq.n	800a0fa <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a0e2:	2104      	movs	r1, #4
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	4798      	blx	r3
 800a0e8:	e007      	b.n	800a0fa <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d102      	bne.n	800a0fa <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 ff6c 	bl	800afea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	791b      	ldrb	r3, [r3, #4]
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fdb8 	bl	800ac8e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	795b      	ldrb	r3, [r3, #5]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fdb2 	bl	800ac8e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d005      	beq.n	800a148 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a142:	2105      	movs	r1, #5
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 ff33 	bl	800afb4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2203      	movs	r2, #3
 800a152:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b086      	sub	sp, #24
 800a162:	af02      	add	r7, sp, #8
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	460b      	mov	r3, r1
 800a168:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	b29b      	uxth	r3, r3
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	4613      	mov	r3, r2
 800a178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a17c:	2100      	movs	r1, #0
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f864 	bl	800a24c <USBH_GetDescriptor>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f203 3022 	addw	r0, r3, #802	; 0x322
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	b292      	uxth	r2, r2
 800a19e:	4619      	mov	r1, r3
 800a1a0:	f000 f918 	bl	800a3d4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b086      	sub	sp, #24
 800a1b2:	af02      	add	r7, sp, #8
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	331c      	adds	r3, #28
 800a1be:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800a1c0:	887b      	ldrh	r3, [r7, #2]
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f83d 	bl	800a24c <USBH_GetDescriptor>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	72fb      	strb	r3, [r7, #11]
 800a1d6:	7afb      	ldrb	r3, [r7, #11]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d107      	bne.n	800a1ec <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a1e2:	887a      	ldrh	r2, [r7, #2]
 800a1e4:	68f9      	ldr	r1, [r7, #12]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 f964 	bl	800a4b4 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b088      	sub	sp, #32
 800a1fa:	af02      	add	r7, sp, #8
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	461a      	mov	r2, r3
 800a202:	460b      	mov	r3, r1
 800a204:	72fb      	strb	r3, [r7, #11]
 800a206:	4613      	mov	r3, r2
 800a208:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800a20a:	7afb      	ldrb	r3, [r7, #11]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a212:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800a21a:	893b      	ldrh	r3, [r7, #8]
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	460b      	mov	r3, r1
 800a220:	2100      	movs	r1, #0
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 f812 	bl	800a24c <USBH_GetDescriptor>
 800a228:	4603      	mov	r3, r0
 800a22a:	75fb      	strb	r3, [r7, #23]
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d107      	bne.n	800a242 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a238:	893a      	ldrh	r2, [r7, #8]
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 fa37 	bl	800a6b0 <USBH_ParseStringDesc>
  }
  return status;
 800a242:	7dfb      	ldrb	r3, [r7, #23]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	607b      	str	r3, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	72fb      	strb	r3, [r7, #11]
 800a25a:	4613      	mov	r3, r2
 800a25c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	789b      	ldrb	r3, [r3, #2]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d11c      	bne.n	800a2a0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2206      	movs	r2, #6
 800a276:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	893a      	ldrh	r2, [r7, #8]
 800a27c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a27e:	893b      	ldrh	r3, [r7, #8]
 800a280:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a288:	d104      	bne.n	800a294 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f240 4209 	movw	r2, #1033	; 0x409
 800a290:	829a      	strh	r2, [r3, #20]
 800a292:	e002      	b.n	800a29a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8b3a      	ldrh	r2, [r7, #24]
 800a29e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800a2a0:	8b3b      	ldrh	r3, [r7, #24]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 fa50 	bl	800a74c <USBH_CtlReq>
 800a2ac:	4603      	mov	r3, r0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	789b      	ldrb	r3, [r3, #2]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d10f      	bne.n	800a2ea <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2205      	movs	r2, #5
 800a2d4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a2d6:	78fb      	ldrb	r3, [r7, #3]
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa2c 	bl	800a74c <USBH_CtlReq>
 800a2f4:	4603      	mov	r3, r0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	789b      	ldrb	r3, [r3, #2]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d10e      	bne.n	800a330 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2209      	movs	r2, #9
 800a31c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	887a      	ldrh	r2, [r7, #2]
 800a322:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800a330:	2200      	movs	r2, #0
 800a332:	2100      	movs	r1, #0
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fa09 	bl	800a74c <USBH_CtlReq>
 800a33a:	4603      	mov	r3, r0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	789b      	ldrb	r3, [r3, #2]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d10f      	bne.n	800a378 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2203      	movs	r2, #3
 800a362:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	b29a      	uxth	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a378:	2200      	movs	r2, #0
 800a37a:	2100      	movs	r1, #0
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f9e5 	bl	800a74c <USBH_CtlReq>
 800a382:	4603      	mov	r3, r0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	789b      	ldrb	r3, [r3, #2]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d10f      	bne.n	800a3c0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a3b2:	78fb      	ldrb	r3, [r7, #3]
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f9c1 	bl	800a74c <USBH_CtlReq>
 800a3ca:	4603      	mov	r3, r0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	785a      	ldrb	r2, [r3, #1]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	3303      	adds	r3, #3
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	b29b      	uxth	r3, r3
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	b29b      	uxth	r3, r3
 800a406:	4313      	orrs	r3, r2
 800a408:	b29a      	uxth	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	791a      	ldrb	r2, [r3, #4]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	795a      	ldrb	r2, [r3, #5]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	799a      	ldrb	r2, [r3, #6]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	79da      	ldrb	r2, [r3, #7]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a42e:	88fb      	ldrh	r3, [r7, #6]
 800a430:	2b08      	cmp	r3, #8
 800a432:	d939      	bls.n	800a4a8 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	3308      	adds	r3, #8
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	3309      	adds	r3, #9
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	b29b      	uxth	r3, r3
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	b29b      	uxth	r3, r3
 800a448:	4313      	orrs	r3, r2
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	330a      	adds	r3, #10
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	b29a      	uxth	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	330b      	adds	r3, #11
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	b29b      	uxth	r3, r3
 800a464:	4313      	orrs	r3, r2
 800a466:	b29a      	uxth	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	330c      	adds	r3, #12
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	b29a      	uxth	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	330d      	adds	r3, #13
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	b29b      	uxth	r3, r3
 800a480:	4313      	orrs	r3, r2
 800a482:	b29a      	uxth	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	7b9a      	ldrb	r2, [r3, #14]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	7bda      	ldrb	r2, [r3, #15]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	7c1a      	ldrb	r2, [r3, #16]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	7c5a      	ldrb	r2, [r3, #17]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	745a      	strb	r2, [r3, #17]
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08a      	sub	sp, #40	; 0x28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	781a      	ldrb	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	785a      	ldrb	r2, [r3, #1]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	3302      	adds	r3, #2
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	3303      	adds	r3, #3
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	021b      	lsls	r3, r3, #8
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	791a      	ldrb	r2, [r3, #4]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	795a      	ldrb	r2, [r3, #5]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	799a      	ldrb	r2, [r3, #6]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	79da      	ldrb	r2, [r3, #7]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	7a1a      	ldrb	r2, [r3, #8]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a52a:	88fb      	ldrh	r3, [r7, #6]
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	d95f      	bls.n	800a5f0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a530:	2309      	movs	r3, #9
 800a532:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a534:	2300      	movs	r3, #0
 800a536:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a538:	e051      	b.n	800a5de <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a53a:	f107 0316 	add.w	r3, r7, #22
 800a53e:	4619      	mov	r1, r3
 800a540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a542:	f000 f8e8 	bl	800a716 <USBH_GetNextDesc>
 800a546:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	785b      	ldrb	r3, [r3, #1]
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d146      	bne.n	800a5de <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a554:	221a      	movs	r2, #26
 800a556:	fb02 f303 	mul.w	r3, r2, r3
 800a55a:	3308      	adds	r3, #8
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	3302      	adds	r3, #2
 800a562:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800a564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a566:	69f8      	ldr	r0, [r7, #28]
 800a568:	f000 f846 	bl	800a5f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a572:	2300      	movs	r3, #0
 800a574:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a576:	e022      	b.n	800a5be <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800a578:	f107 0316 	add.w	r3, r7, #22
 800a57c:	4619      	mov	r1, r3
 800a57e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a580:	f000 f8c9 	bl	800a716 <USBH_GetNextDesc>
 800a584:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	2b05      	cmp	r3, #5
 800a58c:	d117      	bne.n	800a5be <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a58e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a592:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a596:	3201      	adds	r2, #1
 800a598:	00d2      	lsls	r2, r2, #3
 800a59a:	211a      	movs	r1, #26
 800a59c:	fb01 f303 	mul.w	r3, r1, r3
 800a5a0:	4413      	add	r3, r2
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800a5ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5ae:	69b8      	ldr	r0, [r7, #24]
 800a5b0:	f000 f851 	bl	800a656 <USBH_ParseEPDesc>
            ep_ix++;
 800a5b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	791b      	ldrb	r3, [r3, #4]
 800a5c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d204      	bcs.n	800a5d4 <USBH_ParseCfgDesc+0x120>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	885a      	ldrh	r2, [r3, #2]
 800a5ce:	8afb      	ldrh	r3, [r7, #22]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d8d1      	bhi.n	800a578 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a5d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5d8:	3301      	adds	r3, #1
 800a5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a5de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d804      	bhi.n	800a5f0 <USBH_ParseCfgDesc+0x13c>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	885a      	ldrh	r2, [r3, #2]
 800a5ea:	8afb      	ldrh	r3, [r7, #22]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d8a4      	bhi.n	800a53a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a5f0:	bf00      	nop
 800a5f2:	3728      	adds	r7, #40	; 0x28
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781a      	ldrb	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	785a      	ldrb	r2, [r3, #1]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	789a      	ldrb	r2, [r3, #2]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	78da      	ldrb	r2, [r3, #3]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	791a      	ldrb	r2, [r3, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	795a      	ldrb	r2, [r3, #5]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	799a      	ldrb	r2, [r3, #6]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	79da      	ldrb	r2, [r3, #7]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	7a1a      	ldrb	r2, [r3, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	721a      	strb	r2, [r3, #8]
}
 800a64a:	bf00      	nop
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	781a      	ldrb	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	785a      	ldrb	r2, [r3, #1]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	789a      	ldrb	r2, [r3, #2]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	78da      	ldrb	r2, [r3, #3]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	3304      	adds	r3, #4
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	b29a      	uxth	r2, r3
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	3305      	adds	r3, #5
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	021b      	lsls	r3, r3, #8
 800a692:	b29b      	uxth	r3, r3
 800a694:	4313      	orrs	r3, r2
 800a696:	b29a      	uxth	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	799a      	ldrb	r2, [r3, #6]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	719a      	strb	r2, [r3, #6]
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d120      	bne.n	800a70a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	1e9a      	subs	r2, r3, #2
 800a6ce:	88fb      	ldrh	r3, [r7, #6]
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	bf28      	it	cs
 800a6d4:	4613      	movcs	r3, r2
 800a6d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	3302      	adds	r3, #2
 800a6dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a6de:	2300      	movs	r3, #0
 800a6e0:	82fb      	strh	r3, [r7, #22]
 800a6e2:	e00b      	b.n	800a6fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a6e4:	8afb      	ldrh	r3, [r7, #22]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a6f6:	8afb      	ldrh	r3, [r7, #22]
 800a6f8:	3302      	adds	r3, #2
 800a6fa:	82fb      	strh	r3, [r7, #22]
 800a6fc:	8afa      	ldrh	r2, [r7, #22]
 800a6fe:	8abb      	ldrh	r3, [r7, #20]
 800a700:	429a      	cmp	r2, r3
 800a702:	d3ef      	bcc.n	800a6e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2200      	movs	r2, #0
 800a708:	701a      	strb	r2, [r3, #0]
  }
}
 800a70a:	bf00      	nop
 800a70c:	371c      	adds	r7, #28
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800a716:	b480      	push	{r7}
 800a718:	b085      	sub	sp, #20
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	881a      	ldrh	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	4413      	add	r3, r2
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4413      	add	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800a73e:	68fb      	ldr	r3, [r7, #12]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	4613      	mov	r3, r2
 800a758:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a75a:	2301      	movs	r3, #1
 800a75c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	789b      	ldrb	r3, [r3, #2]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d002      	beq.n	800a76c <USBH_CtlReq+0x20>
 800a766:	2b02      	cmp	r3, #2
 800a768:	d00f      	beq.n	800a78a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800a76a:	e034      	b.n	800a7d6 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	88fa      	ldrh	r2, [r7, #6]
 800a776:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2201      	movs	r2, #1
 800a77c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2202      	movs	r2, #2
 800a782:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800a784:	2301      	movs	r3, #1
 800a786:	75fb      	strb	r3, [r7, #23]
    break;
 800a788:	e025      	b.n	800a7d6 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f828 	bl	800a7e0 <USBH_HandleControl>
 800a790:	4603      	mov	r3, r0
 800a792:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800a794:	7dfb      	ldrb	r3, [r7, #23]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d108      	bne.n	800a7ac <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2201      	movs	r2, #1
 800a79e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	75fb      	strb	r3, [r7, #23]
    break;
 800a7aa:	e013      	b.n	800a7d4 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	d108      	bne.n	800a7c4 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	75fb      	strb	r3, [r7, #23]
    break;
 800a7c2:	e007      	b.n	800a7d4 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800a7c4:	7dfb      	ldrb	r3, [r7, #23]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d104      	bne.n	800a7d4 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	75fb      	strb	r3, [r7, #23]
    break;
 800a7d4:	bf00      	nop
  }
  return status;
 800a7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af02      	add	r7, sp, #8
 800a7e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	7e1b      	ldrb	r3, [r3, #24]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	2b0a      	cmp	r3, #10
 800a7f8:	f200 814c 	bhi.w	800aa94 <USBH_HandleControl+0x2b4>
 800a7fc:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <USBH_HandleControl+0x24>)
 800a7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a802:	bf00      	nop
 800a804:	0800a831 	.word	0x0800a831
 800a808:	0800a84b 	.word	0x0800a84b
 800a80c:	0800a8b5 	.word	0x0800a8b5
 800a810:	0800a8db 	.word	0x0800a8db
 800a814:	0800a913 	.word	0x0800a913
 800a818:	0800a93f 	.word	0x0800a93f
 800a81c:	0800a991 	.word	0x0800a991
 800a820:	0800a9b3 	.word	0x0800a9b3
 800a824:	0800a9ef 	.word	0x0800a9ef
 800a828:	0800aa17 	.word	0x0800aa17
 800a82c:	0800aa55 	.word	0x0800aa55
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f103 0110 	add.w	r1, r3, #16
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	795b      	ldrb	r3, [r3, #5]
 800a83a:	461a      	mov	r2, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f939 	bl	800aab4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2202      	movs	r2, #2
 800a846:	761a      	strb	r2, [r3, #24]
    break;
 800a848:	e12f      	b.n	800aaaa <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	795b      	ldrb	r3, [r3, #5]
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fcb7 	bl	800b1c4 <USBH_LL_GetURBState>
 800a856:	4603      	mov	r3, r0
 800a858:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d11e      	bne.n	800a89e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	7c1b      	ldrb	r3, [r3, #16]
 800a864:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a868:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8adb      	ldrh	r3, [r3, #22]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00a      	beq.n	800a888 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800a872:	7b7b      	ldrb	r3, [r7, #13]
 800a874:	2b80      	cmp	r3, #128	; 0x80
 800a876:	d103      	bne.n	800a880 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2203      	movs	r2, #3
 800a87c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a87e:	e10b      	b.n	800aa98 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2205      	movs	r2, #5
 800a884:	761a      	strb	r2, [r3, #24]
    break;
 800a886:	e107      	b.n	800aa98 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800a888:	7b7b      	ldrb	r3, [r7, #13]
 800a88a:	2b80      	cmp	r3, #128	; 0x80
 800a88c:	d103      	bne.n	800a896 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2209      	movs	r2, #9
 800a892:	761a      	strb	r2, [r3, #24]
    break;
 800a894:	e100      	b.n	800aa98 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2207      	movs	r2, #7
 800a89a:	761a      	strb	r2, [r3, #24]
    break;
 800a89c:	e0fc      	b.n	800aa98 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	2b04      	cmp	r3, #4
 800a8a2:	d003      	beq.n	800a8ac <USBH_HandleControl+0xcc>
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	f040 80f6 	bne.w	800aa98 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	220b      	movs	r2, #11
 800a8b0:	761a      	strb	r2, [r3, #24]
    break;
 800a8b2:	e0f1      	b.n	800aa98 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6899      	ldr	r1, [r3, #8]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	899a      	ldrh	r2, [r3, #12]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	791b      	ldrb	r3, [r3, #4]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f930 	bl	800ab32 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2204      	movs	r2, #4
 800a8d6:	761a      	strb	r2, [r3, #24]
    break;
 800a8d8:	e0e7      	b.n	800aaaa <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	791b      	ldrb	r3, [r3, #4]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fc6f 	bl	800b1c4 <USBH_LL_GetURBState>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d102      	bne.n	800a8f6 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2209      	movs	r2, #9
 800a8f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	2b05      	cmp	r3, #5
 800a8fa:	d102      	bne.n	800a902 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a900:	e0cc      	b.n	800aa9c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	2b04      	cmp	r3, #4
 800a906:	f040 80c9 	bne.w	800aa9c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	220b      	movs	r2, #11
 800a90e:	761a      	strb	r2, [r3, #24]
    break;
 800a910:	e0c4      	b.n	800aa9c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6899      	ldr	r1, [r3, #8]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	899a      	ldrh	r2, [r3, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	7958      	ldrb	r0, [r3, #5]
 800a91e:	2301      	movs	r3, #1
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	4603      	mov	r3, r0
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f8df 	bl	800aae8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a930:	b29a      	uxth	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2206      	movs	r2, #6
 800a93a:	761a      	strb	r2, [r3, #24]
    break;
 800a93c:	e0b5      	b.n	800aaaa <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	795b      	ldrb	r3, [r3, #5]
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fc3d 	bl	800b1c4 <USBH_LL_GetURBState>
 800a94a:	4603      	mov	r3, r0
 800a94c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d103      	bne.n	800a95c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2207      	movs	r2, #7
 800a958:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a95a:	e0a1      	b.n	800aaa0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	2b05      	cmp	r3, #5
 800a960:	d105      	bne.n	800a96e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	220c      	movs	r2, #12
 800a966:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a968:	2303      	movs	r3, #3
 800a96a:	73fb      	strb	r3, [r7, #15]
    break;
 800a96c:	e098      	b.n	800aaa0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d103      	bne.n	800a97c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2205      	movs	r2, #5
 800a978:	761a      	strb	r2, [r3, #24]
    break;
 800a97a:	e091      	b.n	800aaa0 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b04      	cmp	r3, #4
 800a980:	f040 808e 	bne.w	800aaa0 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	220b      	movs	r2, #11
 800a988:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800a98a:	2302      	movs	r3, #2
 800a98c:	73fb      	strb	r3, [r7, #15]
    break;
 800a98e:	e087      	b.n	800aaa0 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	791b      	ldrb	r3, [r3, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	2100      	movs	r1, #0
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f8ca 	bl	800ab32 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2208      	movs	r2, #8
 800a9ae:	761a      	strb	r2, [r3, #24]

    break;
 800a9b0:	e07b      	b.n	800aaaa <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	791b      	ldrb	r3, [r3, #4]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc03 	bl	800b1c4 <USBH_LL_GetURBState>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d105      	bne.n	800a9d4 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	220d      	movs	r2, #13
 800a9cc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a9d2:	e067      	b.n	800aaa4 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	2b04      	cmp	r3, #4
 800a9d8:	d103      	bne.n	800a9e2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	220b      	movs	r2, #11
 800a9de:	761a      	strb	r2, [r3, #24]
    break;
 800a9e0:	e060      	b.n	800aaa4 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	2b05      	cmp	r3, #5
 800a9e6:	d15d      	bne.n	800aaa4 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ec:	e05a      	b.n	800aaa4 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	795a      	ldrb	r2, [r3, #5]
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f873 	bl	800aae8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	220a      	movs	r2, #10
 800aa12:	761a      	strb	r2, [r3, #24]
    break;
 800aa14:	e049      	b.n	800aaaa <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	795b      	ldrb	r3, [r3, #5]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fbd1 	bl	800b1c4 <USBH_LL_GetURBState>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d105      	bne.n	800aa38 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	220d      	movs	r2, #13
 800aa34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800aa36:	e037      	b.n	800aaa8 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d103      	bne.n	800aa46 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2209      	movs	r2, #9
 800aa42:	761a      	strb	r2, [r3, #24]
    break;
 800aa44:	e030      	b.n	800aaa8 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
 800aa48:	2b04      	cmp	r3, #4
 800aa4a:	d12d      	bne.n	800aaa8 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	220b      	movs	r2, #11
 800aa50:	761a      	strb	r2, [r3, #24]
    break;
 800aa52:	e029      	b.n	800aaa8 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	7e5b      	ldrb	r3, [r3, #25]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	765a      	strb	r2, [r3, #25]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	7e5b      	ldrb	r3, [r3, #25]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d809      	bhi.n	800aa7c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fabe 	bl	800afea <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800aa7a:	e016      	b.n	800aaaa <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aa82:	2106      	movs	r1, #6
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800aa8e:	2302      	movs	r3, #2
 800aa90:	73fb      	strb	r3, [r7, #15]
    break;
 800aa92:	e00a      	b.n	800aaaa <USBH_HandleControl+0x2ca>

  default:
    break;
 800aa94:	bf00      	nop
 800aa96:	e008      	b.n	800aaaa <USBH_HandleControl+0x2ca>
    break;
 800aa98:	bf00      	nop
 800aa9a:	e006      	b.n	800aaaa <USBH_HandleControl+0x2ca>
    break;
 800aa9c:	bf00      	nop
 800aa9e:	e004      	b.n	800aaaa <USBH_HandleControl+0x2ca>
    break;
 800aaa0:	bf00      	nop
 800aaa2:	e002      	b.n	800aaaa <USBH_HandleControl+0x2ca>
    break;
 800aaa4:	bf00      	nop
 800aaa6:	e000      	b.n	800aaaa <USBH_HandleControl+0x2ca>
    break;
 800aaa8:	bf00      	nop
  }
  return status;
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af04      	add	r7, sp, #16
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	4613      	mov	r3, r2
 800aac0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800aac2:	79f9      	ldrb	r1, [r7, #7]
 800aac4:	2300      	movs	r3, #0
 800aac6:	9303      	str	r3, [sp, #12]
 800aac8:	2308      	movs	r3, #8
 800aaca:	9302      	str	r3, [sp, #8]
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	2300      	movs	r3, #0
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	2300      	movs	r3, #0
 800aad6:	2200      	movs	r2, #0
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 fb42 	bl	800b162 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b088      	sub	sp, #32
 800aaec:	af04      	add	r7, sp, #16
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	80fb      	strh	r3, [r7, #6]
 800aafa:	4613      	mov	r3, r2
 800aafc:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ab0c:	7979      	ldrb	r1, [r7, #5]
 800ab0e:	7e3b      	ldrb	r3, [r7, #24]
 800ab10:	9303      	str	r3, [sp, #12]
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	9302      	str	r3, [sp, #8]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2200      	movs	r2, #0
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 fb1d 	bl	800b162 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b088      	sub	sp, #32
 800ab36:	af04      	add	r7, sp, #16
 800ab38:	60f8      	str	r0, [r7, #12]
 800ab3a:	60b9      	str	r1, [r7, #8]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	461a      	mov	r2, r3
 800ab40:	460b      	mov	r3, r1
 800ab42:	80fb      	strh	r3, [r7, #6]
 800ab44:	4613      	mov	r3, r2
 800ab46:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ab48:	7979      	ldrb	r1, [r7, #5]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	9303      	str	r3, [sp, #12]
 800ab4e:	88fb      	ldrh	r3, [r7, #6]
 800ab50:	9302      	str	r3, [sp, #8]
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	2301      	movs	r3, #1
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 faff 	bl	800b162 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab64:	2300      	movs	r3, #0

}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b088      	sub	sp, #32
 800ab72:	af04      	add	r7, sp, #16
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	4611      	mov	r1, r2
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	80fb      	strh	r3, [r7, #6]
 800ab80:	4613      	mov	r3, r2
 800ab82:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ab92:	7979      	ldrb	r1, [r7, #5]
 800ab94:	7e3b      	ldrb	r3, [r7, #24]
 800ab96:	9303      	str	r3, [sp, #12]
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	9302      	str	r3, [sp, #8]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	2301      	movs	r3, #1
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	2302      	movs	r3, #2
 800aba6:	2200      	movs	r2, #0
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 fada 	bl	800b162 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b088      	sub	sp, #32
 800abbc:	af04      	add	r7, sp, #16
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4611      	mov	r1, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	460b      	mov	r3, r1
 800abc8:	80fb      	strh	r3, [r7, #6]
 800abca:	4613      	mov	r3, r2
 800abcc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800abce:	7979      	ldrb	r1, [r7, #5]
 800abd0:	2300      	movs	r3, #0
 800abd2:	9303      	str	r3, [sp, #12]
 800abd4:	88fb      	ldrh	r3, [r7, #6]
 800abd6:	9302      	str	r3, [sp, #8]
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	9301      	str	r3, [sp, #4]
 800abdc:	2301      	movs	r3, #1
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	2302      	movs	r3, #2
 800abe2:	2201      	movs	r2, #1
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f000 fabc 	bl	800b162 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af04      	add	r7, sp, #16
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	4608      	mov	r0, r1
 800abfe:	4611      	mov	r1, r2
 800ac00:	461a      	mov	r2, r3
 800ac02:	4603      	mov	r3, r0
 800ac04:	70fb      	strb	r3, [r7, #3]
 800ac06:	460b      	mov	r3, r1
 800ac08:	70bb      	strb	r3, [r7, #2]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800ac0e:	7878      	ldrb	r0, [r7, #1]
 800ac10:	78ba      	ldrb	r2, [r7, #2]
 800ac12:	78f9      	ldrb	r1, [r7, #3]
 800ac14:	8b3b      	ldrh	r3, [r7, #24]
 800ac16:	9302      	str	r3, [sp, #8]
 800ac18:	7d3b      	ldrb	r3, [r7, #20]
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	7c3b      	ldrb	r3, [r7, #16]
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	4603      	mov	r3, r0
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fa4f 	bl	800b0c6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800ac28:	2300      	movs	r3, #0

}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b082      	sub	sp, #8
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800ac3e:	78fb      	ldrb	r3, [r7, #3]
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fa6e 	bl	800b124 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ac48:	2300      	movs	r3, #0

}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f831 	bl	800acc6 <USBH_GetFreePipe>
 800ac64:	4603      	mov	r3, r0
 800ac66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ac68:	89fb      	ldrh	r3, [r7, #14]
 800ac6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d007      	beq.n	800ac82 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800ac72:	78fb      	ldrb	r3, [r7, #3]
 800ac74:	89fa      	ldrh	r2, [r7, #14]
 800ac76:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	32e0      	adds	r2, #224	; 0xe0
 800ac7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800ac82:	89fb      	ldrh	r3, [r7, #14]
 800ac84:	b2db      	uxtb	r3, r3
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b083      	sub	sp, #12
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	460b      	mov	r3, r1
 800ac98:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	2b0a      	cmp	r3, #10
 800ac9e:	d80b      	bhi.n	800acb8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800aca0:	78fa      	ldrb	r2, [r7, #3]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	32e0      	adds	r2, #224	; 0xe0
 800aca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acaa:	78fa      	ldrb	r2, [r7, #3]
 800acac:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	32e0      	adds	r2, #224	; 0xe0
 800acb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b085      	sub	sp, #20
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
 800acd6:	e00e      	b.n	800acf6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800acd8:	7bfa      	ldrb	r2, [r7, #15]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	32e0      	adds	r2, #224	; 0xe0
 800acde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d102      	bne.n	800acf0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	b29b      	uxth	r3, r3
 800acee:	e007      	b.n	800ad00 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	3301      	adds	r3, #1
 800acf4:	73fb      	strb	r3, [r7, #15]
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
 800acf8:	2b0a      	cmp	r3, #10
 800acfa:	d9ed      	bls.n	800acd8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800acfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ad10:	2201      	movs	r2, #1
 800ad12:	490e      	ldr	r1, [pc, #56]	; (800ad4c <MX_USB_HOST_Init+0x40>)
 800ad14:	480e      	ldr	r0, [pc, #56]	; (800ad50 <MX_USB_HOST_Init+0x44>)
 800ad16:	f7fe fdbb 	bl	8009890 <USBH_Init>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ad20:	f7f6 f8a8 	bl	8000e74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ad24:	490b      	ldr	r1, [pc, #44]	; (800ad54 <MX_USB_HOST_Init+0x48>)
 800ad26:	480a      	ldr	r0, [pc, #40]	; (800ad50 <MX_USB_HOST_Init+0x44>)
 800ad28:	f7fe fe25 	bl	8009976 <USBH_RegisterClass>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ad32:	f7f6 f89f 	bl	8000e74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ad36:	4806      	ldr	r0, [pc, #24]	; (800ad50 <MX_USB_HOST_Init+0x44>)
 800ad38:	f7fe feaa 	bl	8009a90 <USBH_Start>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ad42:	f7f6 f897 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ad46:	bf00      	nop
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	0800ad6d 	.word	0x0800ad6d
 800ad50:	20000470 	.word	0x20000470
 800ad54:	2000000c 	.word	0x2000000c

0800ad58 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ad5c:	4802      	ldr	r0, [pc, #8]	; (800ad68 <MX_USB_HOST_Process+0x10>)
 800ad5e:	f7fe fea7 	bl	8009ab0 <USBH_Process>
}
 800ad62:	bf00      	nop
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000470 	.word	0x20000470

0800ad6c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ad78:	78fb      	ldrb	r3, [r7, #3]
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d819      	bhi.n	800adb4 <USBH_UserProcess+0x48>
 800ad80:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <USBH_UserProcess+0x1c>)
 800ad82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad86:	bf00      	nop
 800ad88:	0800adb5 	.word	0x0800adb5
 800ad8c:	0800ada5 	.word	0x0800ada5
 800ad90:	0800adb5 	.word	0x0800adb5
 800ad94:	0800adad 	.word	0x0800adad
 800ad98:	0800ad9d 	.word	0x0800ad9d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ad9c:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <USBH_UserProcess+0x58>)
 800ad9e:	2203      	movs	r2, #3
 800ada0:	701a      	strb	r2, [r3, #0]
  break;
 800ada2:	e008      	b.n	800adb6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ada4:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <USBH_UserProcess+0x58>)
 800ada6:	2202      	movs	r2, #2
 800ada8:	701a      	strb	r2, [r3, #0]
  break;
 800adaa:	e004      	b.n	800adb6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800adac:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <USBH_UserProcess+0x58>)
 800adae:	2201      	movs	r2, #1
 800adb0:	701a      	strb	r2, [r3, #0]
  break;
 800adb2:	e000      	b.n	800adb6 <USBH_UserProcess+0x4a>

  default:
  break;
 800adb4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	200000b8 	.word	0x200000b8

0800adc8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08a      	sub	sp, #40	; 0x28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800add0:	f107 0314 	add.w	r3, r7, #20
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	605a      	str	r2, [r3, #4]
 800adda:	609a      	str	r2, [r3, #8]
 800addc:	60da      	str	r2, [r3, #12]
 800adde:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ade8:	d14e      	bne.n	800ae88 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adea:	4b29      	ldr	r3, [pc, #164]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800adec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adee:	4a28      	ldr	r2, [pc, #160]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800adf0:	f043 0301 	orr.w	r3, r3, #1
 800adf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800adf6:	4b26      	ldr	r3, [pc, #152]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800adf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	613b      	str	r3, [r7, #16]
 800ae00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ae02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ae06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae10:	2303      	movs	r3, #3
 800ae12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae14:	230a      	movs	r3, #10
 800ae16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae18:	f107 0314 	add.w	r3, r7, #20
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae22:	f7f7 ff73 	bl	8002d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae26:	4b1a      	ldr	r3, [pc, #104]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae2a:	4a19      	ldr	r2, [pc, #100]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae30:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae32:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae3e:	4b14      	ldr	r3, [pc, #80]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d114      	bne.n	800ae74 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae4a:	4b11      	ldr	r3, [pc, #68]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4e:	4a10      	ldr	r2, [pc, #64]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae54:	6593      	str	r3, [r2, #88]	; 0x58
 800ae56:	4b0e      	ldr	r3, [pc, #56]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae5e:	60bb      	str	r3, [r7, #8]
 800ae60:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800ae62:	f7f9 ffc7 	bl	8004df4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae66:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae6a:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <HAL_HCD_MspInit+0xc8>)
 800ae6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae70:	6593      	str	r3, [r2, #88]	; 0x58
 800ae72:	e001      	b.n	800ae78 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ae74:	f7f9 ffbe 	bl	8004df4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	2043      	movs	r0, #67	; 0x43
 800ae7e:	f7f7 ff0e 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ae82:	2043      	movs	r0, #67	; 0x43
 800ae84:	f7f7 ff27 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ae88:	bf00      	nop
 800ae8a:	3728      	adds	r7, #40	; 0x28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	40021000 	.word	0x40021000

0800ae94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff f8b5 	bl	800a012 <USBH_LL_IncTimer>
}
 800aea8:	bf00      	nop
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7ff f8fa 	bl	800a0b8 <USBH_LL_Connect>
}
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff f912 	bl	800a104 <USBH_LL_Disconnect>
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
 800aef4:	4613      	mov	r3, r2
 800aef6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af12:	4618      	mov	r0, r3
 800af14:	f7ff f8a7 	bl	800a066 <USBH_LL_PortEnabled>
} 
 800af18:	bf00      	nop
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff f8a7 	bl	800a082 <USBH_LL_PortDisabled>
} 
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d12a      	bne.n	800afa4 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800af4e:	4a18      	ldr	r2, [pc, #96]	; (800afb0 <USBH_LL_Init+0x74>)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a15      	ldr	r2, [pc, #84]	; (800afb0 <USBH_LL_Init+0x74>)
 800af5a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af5e:	4b14      	ldr	r3, [pc, #80]	; (800afb0 <USBH_LL_Init+0x74>)
 800af60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800af66:	4b12      	ldr	r3, [pc, #72]	; (800afb0 <USBH_LL_Init+0x74>)
 800af68:	2208      	movs	r2, #8
 800af6a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800af6c:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <USBH_LL_Init+0x74>)
 800af6e:	2201      	movs	r2, #1
 800af70:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af72:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <USBH_LL_Init+0x74>)
 800af74:	2200      	movs	r2, #0
 800af76:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800af78:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <USBH_LL_Init+0x74>)
 800af7a:	2202      	movs	r2, #2
 800af7c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af7e:	4b0c      	ldr	r3, [pc, #48]	; (800afb0 <USBH_LL_Init+0x74>)
 800af80:	2200      	movs	r2, #0
 800af82:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800af84:	480a      	ldr	r0, [pc, #40]	; (800afb0 <USBH_LL_Init+0x74>)
 800af86:	f7f8 f89a 	bl	80030be <HAL_HCD_Init>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800af90:	f7f5 ff70 	bl	8000e74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800af94:	4806      	ldr	r0, [pc, #24]	; (800afb0 <USBH_LL_Init+0x74>)
 800af96:	f7f8 fc91 	bl	80038bc <HAL_HCD_GetCurrentFrame>
 800af9a:	4603      	mov	r3, r0
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff f828 	bl	8009ff4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	2000083c 	.word	0x2000083c

0800afb4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f8 fbfe 	bl	80037cc <HAL_HCD_Start>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 f95c 	bl	800b294 <USBH_Get_USB_Status>
 800afdc:	4603      	mov	r3, r0
 800afde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b000:	4618      	mov	r0, r3
 800b002:	f7f8 fc06 	bl	8003812 <HAL_HCD_Stop>
 800b006:	4603      	mov	r3, r0
 800b008:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f000 f941 	bl	800b294 <USBH_Get_USB_Status>
 800b012:	4603      	mov	r3, r0
 800b014:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b016:	7bbb      	ldrb	r3, [r7, #14]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b028:	2301      	movs	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b032:	4618      	mov	r0, r3
 800b034:	f7f8 fc50 	bl	80038d8 <HAL_HCD_GetCurrentSpeed>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d007      	beq.n	800b04e <USBH_LL_GetSpeed+0x2e>
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d302      	bcc.n	800b048 <USBH_LL_GetSpeed+0x28>
 800b042:	2b02      	cmp	r3, #2
 800b044:	d006      	beq.n	800b054 <USBH_LL_GetSpeed+0x34>
 800b046:	e008      	b.n	800b05a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b048:	2300      	movs	r3, #0
 800b04a:	73fb      	strb	r3, [r7, #15]
    break;
 800b04c:	e008      	b.n	800b060 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b04e:	2301      	movs	r3, #1
 800b050:	73fb      	strb	r3, [r7, #15]
    break;
 800b052:	e005      	b.n	800b060 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b054:	2302      	movs	r3, #2
 800b056:	73fb      	strb	r3, [r7, #15]
    break;
 800b058:	e002      	b.n	800b060 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b05a:	2301      	movs	r3, #1
 800b05c:	73fb      	strb	r3, [r7, #15]
    break;
 800b05e:	bf00      	nop
  }
  return  speed;
 800b060:	7bfb      	ldrb	r3, [r7, #15]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b080:	4618      	mov	r0, r3
 800b082:	f7f8 fbe3 	bl	800384c <HAL_HCD_ResetPort>
 800b086:	4603      	mov	r3, r0
 800b088:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 f901 	bl	800b294 <USBH_Get_USB_Status>
 800b092:	4603      	mov	r3, r0
 800b094:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b096:	7bbb      	ldrb	r3, [r7, #14]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0b2:	78fa      	ldrb	r2, [r7, #3]
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7f8 fbeb 	bl	8003892 <HAL_HCD_HC_GetXferCount>
 800b0bc:	4603      	mov	r3, r0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0c6:	b590      	push	{r4, r7, lr}
 800b0c8:	b089      	sub	sp, #36	; 0x24
 800b0ca:	af04      	add	r7, sp, #16
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	4608      	mov	r0, r1
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	70fb      	strb	r3, [r7, #3]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70bb      	strb	r3, [r7, #2]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b0ee:	787c      	ldrb	r4, [r7, #1]
 800b0f0:	78ba      	ldrb	r2, [r7, #2]
 800b0f2:	78f9      	ldrb	r1, [r7, #3]
 800b0f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0f6:	9302      	str	r3, [sp, #8]
 800b0f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	4623      	mov	r3, r4
 800b106:	f7f8 f83c 	bl	8003182 <HAL_HCD_HC_Init>
 800b10a:	4603      	mov	r3, r0
 800b10c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	4618      	mov	r0, r3
 800b112:	f000 f8bf 	bl	800b294 <USBH_Get_USB_Status>
 800b116:	4603      	mov	r3, r0
 800b118:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	bd90      	pop	{r4, r7, pc}

0800b124 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	4611      	mov	r1, r2
 800b142:	4618      	mov	r0, r3
 800b144:	f7f8 f8b5 	bl	80032b2 <HAL_HCD_HC_Halt>
 800b148:	4603      	mov	r3, r0
 800b14a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 f8a0 	bl	800b294 <USBH_Get_USB_Status>
 800b154:	4603      	mov	r3, r0
 800b156:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 800b158:	7bbb      	ldrb	r3, [r7, #14]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b162:	b590      	push	{r4, r7, lr}
 800b164:	b089      	sub	sp, #36	; 0x24
 800b166:	af04      	add	r7, sp, #16
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	4608      	mov	r0, r1
 800b16c:	4611      	mov	r1, r2
 800b16e:	461a      	mov	r2, r3
 800b170:	4603      	mov	r3, r0
 800b172:	70fb      	strb	r3, [r7, #3]
 800b174:	460b      	mov	r3, r1
 800b176:	70bb      	strb	r3, [r7, #2]
 800b178:	4613      	mov	r3, r2
 800b17a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b18a:	787c      	ldrb	r4, [r7, #1]
 800b18c:	78ba      	ldrb	r2, [r7, #2]
 800b18e:	78f9      	ldrb	r1, [r7, #3]
 800b190:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b194:	9303      	str	r3, [sp, #12]
 800b196:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b198:	9302      	str	r3, [sp, #8]
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	4623      	mov	r3, r4
 800b1a6:	f7f8 f8a7 	bl	80032f8 <HAL_HCD_HC_SubmitRequest>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f86f 	bl	800b294 <USBH_Get_USB_Status>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd90      	pop	{r4, r7, pc}

0800b1c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b1d6:	78fa      	ldrb	r2, [r7, #3]
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7f8 fb44 	bl	8003868 <HAL_HCD_HC_GetURBState>
 800b1e0:	4603      	mov	r3, r0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d103      	bne.n	800b208 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b200:	78fb      	ldrb	r3, [r7, #3]
 800b202:	4618      	mov	r0, r3
 800b204:	f000 f872 	bl	800b2ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b208:	20c8      	movs	r0, #200	; 0xc8
 800b20a:	f7f6 fa95 	bl	8001738 <HAL_Delay>
  return USBH_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	70fb      	strb	r3, [r7, #3]
 800b224:	4613      	mov	r3, r2
 800b226:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b22e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b230:	78fa      	ldrb	r2, [r7, #3]
 800b232:	68f9      	ldr	r1, [r7, #12]
 800b234:	4613      	mov	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	440b      	add	r3, r1
 800b23e:	333b      	adds	r3, #59	; 0x3b
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b246:	78fa      	ldrb	r2, [r7, #3]
 800b248:	68f9      	ldr	r1, [r7, #12]
 800b24a:	4613      	mov	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	440b      	add	r3, r1
 800b254:	3350      	adds	r3, #80	; 0x50
 800b256:	78ba      	ldrb	r2, [r7, #2]
 800b258:	701a      	strb	r2, [r3, #0]
 800b25a:	e009      	b.n	800b270 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b25c:	78fa      	ldrb	r2, [r7, #3]
 800b25e:	68f9      	ldr	r1, [r7, #12]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	440b      	add	r3, r1
 800b26a:	3351      	adds	r3, #81	; 0x51
 800b26c:	78ba      	ldrb	r2, [r7, #2]
 800b26e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b082      	sub	sp, #8
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7f6 fa56 	bl	8001738 <HAL_Delay>
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d817      	bhi.n	800b2d8 <USBH_Get_USB_Status+0x44>
 800b2a8:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <USBH_Get_USB_Status+0x1c>)
 800b2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ae:	bf00      	nop
 800b2b0:	0800b2c1 	.word	0x0800b2c1
 800b2b4:	0800b2c7 	.word	0x0800b2c7
 800b2b8:	0800b2cd 	.word	0x0800b2cd
 800b2bc:	0800b2d3 	.word	0x0800b2d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c4:	e00b      	b.n	800b2de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b2c6:	2302      	movs	r3, #2
 800b2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ca:	e008      	b.n	800b2de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d0:	e005      	b.n	800b2de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d6:	e002      	b.n	800b2de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b2d8:	2302      	movs	r3, #2
 800b2da:	73fb      	strb	r3, [r7, #15]
    break;
 800b2dc:	bf00      	nop
  }
  return usb_status;
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b2fa:	79fb      	ldrb	r3, [r7, #7]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d102      	bne.n	800b306 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800b300:	2301      	movs	r3, #1
 800b302:	73fb      	strb	r3, [r7, #15]
 800b304:	e001      	b.n	800b30a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b306:	2300      	movs	r3, #0
 800b308:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	461a      	mov	r2, r3
 800b30e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b312:	4803      	ldr	r0, [pc, #12]	; (800b320 <MX_DriverVbusFS+0x34>)
 800b314:	f7f7 fea2 	bl	800305c <HAL_GPIO_WritePin>
}
 800b318:	bf00      	nop
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	48000800 	.word	0x48000800

0800b324 <__errno>:
 800b324:	4b01      	ldr	r3, [pc, #4]	; (800b32c <__errno+0x8>)
 800b326:	6818      	ldr	r0, [r3, #0]
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	2000002c 	.word	0x2000002c

0800b330 <__libc_init_array>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	4e0d      	ldr	r6, [pc, #52]	; (800b368 <__libc_init_array+0x38>)
 800b334:	4c0d      	ldr	r4, [pc, #52]	; (800b36c <__libc_init_array+0x3c>)
 800b336:	1ba4      	subs	r4, r4, r6
 800b338:	10a4      	asrs	r4, r4, #2
 800b33a:	2500      	movs	r5, #0
 800b33c:	42a5      	cmp	r5, r4
 800b33e:	d109      	bne.n	800b354 <__libc_init_array+0x24>
 800b340:	4e0b      	ldr	r6, [pc, #44]	; (800b370 <__libc_init_array+0x40>)
 800b342:	4c0c      	ldr	r4, [pc, #48]	; (800b374 <__libc_init_array+0x44>)
 800b344:	f000 f8ea 	bl	800b51c <_init>
 800b348:	1ba4      	subs	r4, r4, r6
 800b34a:	10a4      	asrs	r4, r4, #2
 800b34c:	2500      	movs	r5, #0
 800b34e:	42a5      	cmp	r5, r4
 800b350:	d105      	bne.n	800b35e <__libc_init_array+0x2e>
 800b352:	bd70      	pop	{r4, r5, r6, pc}
 800b354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b358:	4798      	blx	r3
 800b35a:	3501      	adds	r5, #1
 800b35c:	e7ee      	b.n	800b33c <__libc_init_array+0xc>
 800b35e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b362:	4798      	blx	r3
 800b364:	3501      	adds	r5, #1
 800b366:	e7f2      	b.n	800b34e <__libc_init_array+0x1e>
 800b368:	0800b588 	.word	0x0800b588
 800b36c:	0800b588 	.word	0x0800b588
 800b370:	0800b588 	.word	0x0800b588
 800b374:	0800b58c 	.word	0x0800b58c

0800b378 <malloc>:
 800b378:	4b02      	ldr	r3, [pc, #8]	; (800b384 <malloc+0xc>)
 800b37a:	4601      	mov	r1, r0
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	f000 b861 	b.w	800b444 <_malloc_r>
 800b382:	bf00      	nop
 800b384:	2000002c 	.word	0x2000002c

0800b388 <free>:
 800b388:	4b02      	ldr	r3, [pc, #8]	; (800b394 <free+0xc>)
 800b38a:	4601      	mov	r1, r0
 800b38c:	6818      	ldr	r0, [r3, #0]
 800b38e:	f000 b80b 	b.w	800b3a8 <_free_r>
 800b392:	bf00      	nop
 800b394:	2000002c 	.word	0x2000002c

0800b398 <memset>:
 800b398:	4402      	add	r2, r0
 800b39a:	4603      	mov	r3, r0
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d100      	bne.n	800b3a2 <memset+0xa>
 800b3a0:	4770      	bx	lr
 800b3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3a6:	e7f9      	b.n	800b39c <memset+0x4>

0800b3a8 <_free_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	2900      	cmp	r1, #0
 800b3ae:	d045      	beq.n	800b43c <_free_r+0x94>
 800b3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3b4:	1f0c      	subs	r4, r1, #4
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	bfb8      	it	lt
 800b3ba:	18e4      	addlt	r4, r4, r3
 800b3bc:	f000 f8ac 	bl	800b518 <__malloc_lock>
 800b3c0:	4a1f      	ldr	r2, [pc, #124]	; (800b440 <_free_r+0x98>)
 800b3c2:	6813      	ldr	r3, [r2, #0]
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	b933      	cbnz	r3, 800b3d6 <_free_r+0x2e>
 800b3c8:	6063      	str	r3, [r4, #4]
 800b3ca:	6014      	str	r4, [r2, #0]
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3d2:	f000 b8a2 	b.w	800b51a <__malloc_unlock>
 800b3d6:	42a3      	cmp	r3, r4
 800b3d8:	d90c      	bls.n	800b3f4 <_free_r+0x4c>
 800b3da:	6821      	ldr	r1, [r4, #0]
 800b3dc:	1862      	adds	r2, r4, r1
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	bf04      	itt	eq
 800b3e2:	681a      	ldreq	r2, [r3, #0]
 800b3e4:	685b      	ldreq	r3, [r3, #4]
 800b3e6:	6063      	str	r3, [r4, #4]
 800b3e8:	bf04      	itt	eq
 800b3ea:	1852      	addeq	r2, r2, r1
 800b3ec:	6022      	streq	r2, [r4, #0]
 800b3ee:	6004      	str	r4, [r0, #0]
 800b3f0:	e7ec      	b.n	800b3cc <_free_r+0x24>
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	b10a      	cbz	r2, 800b3fc <_free_r+0x54>
 800b3f8:	42a2      	cmp	r2, r4
 800b3fa:	d9fa      	bls.n	800b3f2 <_free_r+0x4a>
 800b3fc:	6819      	ldr	r1, [r3, #0]
 800b3fe:	1858      	adds	r0, r3, r1
 800b400:	42a0      	cmp	r0, r4
 800b402:	d10b      	bne.n	800b41c <_free_r+0x74>
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	4401      	add	r1, r0
 800b408:	1858      	adds	r0, r3, r1
 800b40a:	4282      	cmp	r2, r0
 800b40c:	6019      	str	r1, [r3, #0]
 800b40e:	d1dd      	bne.n	800b3cc <_free_r+0x24>
 800b410:	6810      	ldr	r0, [r2, #0]
 800b412:	6852      	ldr	r2, [r2, #4]
 800b414:	605a      	str	r2, [r3, #4]
 800b416:	4401      	add	r1, r0
 800b418:	6019      	str	r1, [r3, #0]
 800b41a:	e7d7      	b.n	800b3cc <_free_r+0x24>
 800b41c:	d902      	bls.n	800b424 <_free_r+0x7c>
 800b41e:	230c      	movs	r3, #12
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	e7d3      	b.n	800b3cc <_free_r+0x24>
 800b424:	6820      	ldr	r0, [r4, #0]
 800b426:	1821      	adds	r1, r4, r0
 800b428:	428a      	cmp	r2, r1
 800b42a:	bf04      	itt	eq
 800b42c:	6811      	ldreq	r1, [r2, #0]
 800b42e:	6852      	ldreq	r2, [r2, #4]
 800b430:	6062      	str	r2, [r4, #4]
 800b432:	bf04      	itt	eq
 800b434:	1809      	addeq	r1, r1, r0
 800b436:	6021      	streq	r1, [r4, #0]
 800b438:	605c      	str	r4, [r3, #4]
 800b43a:	e7c7      	b.n	800b3cc <_free_r+0x24>
 800b43c:	bd38      	pop	{r3, r4, r5, pc}
 800b43e:	bf00      	nop
 800b440:	200000bc 	.word	0x200000bc

0800b444 <_malloc_r>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	1ccd      	adds	r5, r1, #3
 800b448:	f025 0503 	bic.w	r5, r5, #3
 800b44c:	3508      	adds	r5, #8
 800b44e:	2d0c      	cmp	r5, #12
 800b450:	bf38      	it	cc
 800b452:	250c      	movcc	r5, #12
 800b454:	2d00      	cmp	r5, #0
 800b456:	4606      	mov	r6, r0
 800b458:	db01      	blt.n	800b45e <_malloc_r+0x1a>
 800b45a:	42a9      	cmp	r1, r5
 800b45c:	d903      	bls.n	800b466 <_malloc_r+0x22>
 800b45e:	230c      	movs	r3, #12
 800b460:	6033      	str	r3, [r6, #0]
 800b462:	2000      	movs	r0, #0
 800b464:	bd70      	pop	{r4, r5, r6, pc}
 800b466:	f000 f857 	bl	800b518 <__malloc_lock>
 800b46a:	4a21      	ldr	r2, [pc, #132]	; (800b4f0 <_malloc_r+0xac>)
 800b46c:	6814      	ldr	r4, [r2, #0]
 800b46e:	4621      	mov	r1, r4
 800b470:	b991      	cbnz	r1, 800b498 <_malloc_r+0x54>
 800b472:	4c20      	ldr	r4, [pc, #128]	; (800b4f4 <_malloc_r+0xb0>)
 800b474:	6823      	ldr	r3, [r4, #0]
 800b476:	b91b      	cbnz	r3, 800b480 <_malloc_r+0x3c>
 800b478:	4630      	mov	r0, r6
 800b47a:	f000 f83d 	bl	800b4f8 <_sbrk_r>
 800b47e:	6020      	str	r0, [r4, #0]
 800b480:	4629      	mov	r1, r5
 800b482:	4630      	mov	r0, r6
 800b484:	f000 f838 	bl	800b4f8 <_sbrk_r>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d124      	bne.n	800b4d6 <_malloc_r+0x92>
 800b48c:	230c      	movs	r3, #12
 800b48e:	6033      	str	r3, [r6, #0]
 800b490:	4630      	mov	r0, r6
 800b492:	f000 f842 	bl	800b51a <__malloc_unlock>
 800b496:	e7e4      	b.n	800b462 <_malloc_r+0x1e>
 800b498:	680b      	ldr	r3, [r1, #0]
 800b49a:	1b5b      	subs	r3, r3, r5
 800b49c:	d418      	bmi.n	800b4d0 <_malloc_r+0x8c>
 800b49e:	2b0b      	cmp	r3, #11
 800b4a0:	d90f      	bls.n	800b4c2 <_malloc_r+0x7e>
 800b4a2:	600b      	str	r3, [r1, #0]
 800b4a4:	50cd      	str	r5, [r1, r3]
 800b4a6:	18cc      	adds	r4, r1, r3
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f000 f836 	bl	800b51a <__malloc_unlock>
 800b4ae:	f104 000b 	add.w	r0, r4, #11
 800b4b2:	1d23      	adds	r3, r4, #4
 800b4b4:	f020 0007 	bic.w	r0, r0, #7
 800b4b8:	1ac3      	subs	r3, r0, r3
 800b4ba:	d0d3      	beq.n	800b464 <_malloc_r+0x20>
 800b4bc:	425a      	negs	r2, r3
 800b4be:	50e2      	str	r2, [r4, r3]
 800b4c0:	e7d0      	b.n	800b464 <_malloc_r+0x20>
 800b4c2:	428c      	cmp	r4, r1
 800b4c4:	684b      	ldr	r3, [r1, #4]
 800b4c6:	bf16      	itet	ne
 800b4c8:	6063      	strne	r3, [r4, #4]
 800b4ca:	6013      	streq	r3, [r2, #0]
 800b4cc:	460c      	movne	r4, r1
 800b4ce:	e7eb      	b.n	800b4a8 <_malloc_r+0x64>
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	6849      	ldr	r1, [r1, #4]
 800b4d4:	e7cc      	b.n	800b470 <_malloc_r+0x2c>
 800b4d6:	1cc4      	adds	r4, r0, #3
 800b4d8:	f024 0403 	bic.w	r4, r4, #3
 800b4dc:	42a0      	cmp	r0, r4
 800b4de:	d005      	beq.n	800b4ec <_malloc_r+0xa8>
 800b4e0:	1a21      	subs	r1, r4, r0
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f000 f808 	bl	800b4f8 <_sbrk_r>
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d0cf      	beq.n	800b48c <_malloc_r+0x48>
 800b4ec:	6025      	str	r5, [r4, #0]
 800b4ee:	e7db      	b.n	800b4a8 <_malloc_r+0x64>
 800b4f0:	200000bc 	.word	0x200000bc
 800b4f4:	200000c0 	.word	0x200000c0

0800b4f8 <_sbrk_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4c06      	ldr	r4, [pc, #24]	; (800b514 <_sbrk_r+0x1c>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4605      	mov	r5, r0
 800b500:	4608      	mov	r0, r1
 800b502:	6023      	str	r3, [r4, #0]
 800b504:	f7f6 f814 	bl	8001530 <_sbrk>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d102      	bne.n	800b512 <_sbrk_r+0x1a>
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	b103      	cbz	r3, 800b512 <_sbrk_r+0x1a>
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	20000b00 	.word	0x20000b00

0800b518 <__malloc_lock>:
 800b518:	4770      	bx	lr

0800b51a <__malloc_unlock>:
 800b51a:	4770      	bx	lr

0800b51c <_init>:
 800b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51e:	bf00      	nop
 800b520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b522:	bc08      	pop	{r3}
 800b524:	469e      	mov	lr, r3
 800b526:	4770      	bx	lr

0800b528 <_fini>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	bf00      	nop
 800b52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52e:	bc08      	pop	{r3}
 800b530:	469e      	mov	lr, r3
 800b532:	4770      	bx	lr
